// This file was automatically generated by Biohazrd and should not be modified by hand!
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxArticulationReducedCoordinate.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxBatchQueryDesc.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxConstraintDesc.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxContact.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxContactModifyCallback.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxFiltering.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxImmediateMode.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxPhysics.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxQueryFiltering.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxQueryReport.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxScene.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxSceneDesc.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxSceneLock.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxSimulationEventCallback.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/PxSimulationStatistics.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/characterkinematic/PxBoxController.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/characterkinematic/PxCapsuleController.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/characterkinematic/PxController.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/characterkinematic/PxControllerObstacles.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/characterkinematic/PxExtended.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/collision/PxCollisionDefs.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/common/PxBase.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/common/PxCoreUtilityTypes.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/common/PxRenderBuffer.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/common/PxSerialFramework.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/common/PxTolerancesScale.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/cooking/PxBVH33MidphaseDesc.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/cooking/PxBVH34MidphaseDesc.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/cooking/PxBVHStructureDesc.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/cooking/PxConvexMeshDesc.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/cooking/PxCooking.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/cooking/PxMidphaseDesc.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/cooking/PxTriangleMeshDesc.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/cudamanager/PxCudaContextManager.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/cudamanager/PxCudaMemoryManager.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxContactJoint.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxD6Joint.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxDefaultAllocator.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxDefaultSimulationFilterShader.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxJoint.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxJointLimit.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxMassProperties.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxRepXSerializer.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxRepXSimpleType.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxRigidActorExt.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxSerialization.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxShapeExt.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/extensions/PxTriangleMeshExt.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/filebuf/PxFileBuf.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxBounds3.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxMat33.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxMat44.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxMath.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxMathUtils.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxMemory.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxPlane.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxProfiler.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxQuat.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxTransform.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxVec2.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxVec3.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/foundation/PxVec4.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxBoxGeometry.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxCapsuleGeometry.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxConvexMeshGeometry.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxGeometry.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxGeometryHelpers.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxHeightFieldDesc.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxHeightFieldGeometry.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxHeightFieldSample.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxMeshScale.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxPlaneGeometry.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxSimpleTriangleMesh.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxSphereGeometry.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxTriangle.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geometry/PxTriangleMeshGeometry.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/geomutils/GuContactBuffer.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/solver/PxSolverDefs.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/task/PxTask.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleComponents.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleDrive.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleDrive4W.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleDriveNW.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleDriveTank.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleNoDrive.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleTireFriction.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleUpdate.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleUtilControl.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleUtilSetup.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleUtilTelemetry.h"
#include "../external/PhysX/physx/install/Mochi.PhysX.Windows.x64/include/vehicle/PxVehicleWheels.h"

#pragma comment(linker, "/export:??4PxVec3@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??APxVec3@physx@@QEAAAEAMI@Z")
#pragma comment(linker, "/export:??APxVec3@physx@@QEBAAEBMI@Z")
#pragma comment(linker, "/export:??8PxVec3@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:??9PxVec3@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:?isZero@PxVec3@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isFinite@PxVec3@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isNormalized@PxVec3@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?magnitudeSquared@PxVec3@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?magnitude@PxVec3@physx@@QEBAMXZ")
#pragma comment(linker, "/export:??GPxVec3@physx@@QEBA?AV01@XZ")
#pragma comment(linker, "/export:??HPxVec3@physx@@QEBA?AV01@AEBV01@@Z")
#pragma comment(linker, "/export:??GPxVec3@physx@@QEBA?AV01@AEBV01@@Z")
#pragma comment(linker, "/export:??DPxVec3@physx@@QEBA?AV01@M@Z")
#pragma comment(linker, "/export:??KPxVec3@physx@@QEBA?AV01@M@Z")
#pragma comment(linker, "/export:??YPxVec3@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??ZPxVec3@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??XPxVec3@physx@@QEAAAEAV01@M@Z")
#pragma comment(linker, "/export:??_0PxVec3@physx@@QEAAAEAV01@M@Z")
#pragma comment(linker, "/export:?dot@PxVec3@physx@@QEBAMAEBV12@@Z")
#pragma comment(linker, "/export:?cross@PxVec3@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?getNormalized@PxVec3@physx@@QEBA?AV12@XZ")
#pragma comment(linker, "/export:?normalize@PxVec3@physx@@QEAAMXZ")
#pragma comment(linker, "/export:?normalizeSafe@PxVec3@physx@@QEAAMXZ")
#pragma comment(linker, "/export:?normalizeFast@PxVec3@physx@@QEAAMXZ")
#pragma comment(linker, "/export:?multiply@PxVec3@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?minimum@PxVec3@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?minElement@PxVec3@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?maximum@PxVec3@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?maxElement@PxVec3@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?abs@PxVec3@physx@@QEBA?AV12@XZ")
#pragma comment(linker, "/export:?isIdentity@PxQuat@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isFinite@PxQuat@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isUnit@PxQuat@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isSane@PxQuat@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:??8PxQuat@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:?toRadiansAndUnitAxis@PxQuat@physx@@QEBAXAEAMAEAVPxVec3@2@@Z")
#pragma comment(linker, "/export:?getAngle@PxQuat@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getAngle@PxQuat@physx@@QEBAMAEBV12@@Z")
#pragma comment(linker, "/export:?magnitudeSquared@PxQuat@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?dot@PxQuat@physx@@QEBAMAEBV12@@Z")
#pragma comment(linker, "/export:?getNormalized@PxQuat@physx@@QEBA?AV12@XZ")
#pragma comment(linker, "/export:?magnitude@PxQuat@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?normalize@PxQuat@physx@@QEAAMXZ")
#pragma comment(linker, "/export:?getConjugate@PxQuat@physx@@QEBA?AV12@XZ")
#pragma comment(linker, "/export:?getImaginaryPart@PxQuat@physx@@QEBA?AVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getBasisVector0@PxQuat@physx@@QEBA?AVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getBasisVector1@PxQuat@physx@@QEBA?AVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getBasisVector2@PxQuat@physx@@QEBA?AVPxVec3@2@XZ")
#pragma comment(linker, "/export:?rotate@PxQuat@physx@@QEBA?BVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?rotateInv@PxQuat@physx@@QEBA?BVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:??4PxQuat@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??XPxQuat@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??YPxQuat@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??ZPxQuat@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??XPxQuat@physx@@QEAAAEAV01@M@Z")
#pragma comment(linker, "/export:??DPxQuat@physx@@QEBA?AV01@AEBV01@@Z")
#pragma comment(linker, "/export:??HPxQuat@physx@@QEBA?AV01@AEBV01@@Z")
#pragma comment(linker, "/export:??GPxQuat@physx@@QEBA?AV01@XZ")
#pragma comment(linker, "/export:??GPxQuat@physx@@QEBA?AV01@AEBV01@@Z")
#pragma comment(linker, "/export:??DPxQuat@physx@@QEBA?AV01@M@Z")
#pragma comment(linker, "/export:??4PxMat33@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:?createDiagonal@PxMat33@physx@@SA?BV12@AEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:??8PxMat33@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:?getTranspose@PxMat33@physx@@QEBA?BV12@XZ")
#pragma comment(linker, "/export:?getInverse@PxMat33@physx@@QEBA?BV12@XZ")
#pragma comment(linker, "/export:?getDeterminant@PxMat33@physx@@QEBAMXZ")
#pragma comment(linker, "/export:??GPxMat33@physx@@QEBA?BV01@XZ")
#pragma comment(linker, "/export:??HPxMat33@physx@@QEBA?BV01@AEBV01@@Z")
#pragma comment(linker, "/export:??GPxMat33@physx@@QEBA?BV01@AEBV01@@Z")
#pragma comment(linker, "/export:??DPxMat33@physx@@QEBA?BV01@M@Z")
#pragma comment(linker, "/export:??DPxMat33@physx@@QEBA?BVPxVec3@1@AEBV21@@Z")
#pragma comment(linker, "/export:??DPxMat33@physx@@QEBA?BV01@AEBV01@@Z")
#pragma comment(linker, "/export:??YPxMat33@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??ZPxMat33@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??XPxMat33@physx@@QEAAAEAV01@M@Z")
#pragma comment(linker, "/export:??XPxMat33@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??RPxMat33@physx@@QEBAMII@Z")
#pragma comment(linker, "/export:??RPxMat33@physx@@QEAAAEAMII@Z")
#pragma comment(linker, "/export:?transform@PxMat33@physx@@QEBA?BVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?transformTranspose@PxMat33@physx@@QEBA?BVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?front@PxMat33@physx@@QEBAPEBMXZ")
#pragma comment(linker, "/export:??APxMat33@physx@@QEAAAEAVPxVec3@1@I@Z")
#pragma comment(linker, "/export:??APxMat33@physx@@QEBAAEBVPxVec3@1@I@Z")
#pragma comment(linker, "/export:??8PxPlane@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:?distance@PxPlane@physx@@QEBAMAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?contains@PxPlane@physx@@QEBA_NAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?project@PxPlane@physx@@QEBA?AVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?pointInPlane@PxPlane@physx@@QEBA?AVPxVec3@2@XZ")
#pragma comment(linker, "/export:?normalize@PxPlane@physx@@QEAAXXZ")
#pragma comment(linker, "/export:??8PxTransform@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:??DPxTransform@physx@@QEBA?AV01@AEBV01@@Z")
#pragma comment(linker, "/export:??XPxTransform@physx@@QEAAAEAV01@AEAV01@@Z")
#pragma comment(linker, "/export:?getInverse@PxTransform@physx@@QEBA?AV12@XZ")
#pragma comment(linker, "/export:?transform@PxTransform@physx@@QEBA?AVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?transformInv@PxTransform@physx@@QEBA?AVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?rotate@PxTransform@physx@@QEBA?AVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?rotateInv@PxTransform@physx@@QEBA?AVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?transform@PxTransform@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?isValid@PxTransform@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isSane@PxTransform@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isFinite@PxTransform@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?transformInv@PxTransform@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?transform@PxTransform@physx@@QEBA?AVPxPlane@2@AEBV32@@Z")
#pragma comment(linker, "/export:?inverseTransform@PxTransform@physx@@QEBA?AVPxPlane@2@AEBV32@@Z")
#pragma comment(linker, "/export:?getNormalized@PxTransform@physx@@QEBA?AV12@XZ")
#pragma comment(linker, "/export:?readName@PxDeserializationContext@physx@@QEAAXAEAPEBD@Z")
#pragma comment(linker, "/export:?alignExtraData@PxDeserializationContext@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?getConcreteType@PxBase@physx@@QEBAGXZ")
#pragma comment(linker, "/export:?setBaseFlag@PxBase@physx@@QEAAXW4Enum@PxBaseFlag@2@_N@Z")
#pragma comment(linker, "/export:?setBaseFlags@PxBase@physx@@QEAAXV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@2@@Z")
#pragma comment(linker, "/export:?getBaseFlags@PxBase@physx@@QEBA?AV?$PxFlags@W4Enum@PxBaseFlag@physx@@G@2@XZ")
#pragma comment(linker, "/export:?projectVelocity@PxSolverBodyData@physx@@QEBAMAEBVPxVec3@2@0@Z")
#pragma comment(linker, "/export:?projectVelocity@PxTGSSolverBodyVel@physx@@QEBAMAEBVPxVec3@2@0@Z")
#pragma comment(linker, "/export:?projectVelocity@PxTGSSolverBodyData@physx@@QEBAMAEBVPxVec3@2@0@Z")
#pragma comment(linker, "/export:?hasNextPatch@PxContactStreamIterator@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getTotalContactCount@PxContactStreamIterator@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getTotalPatchCount@PxContactStreamIterator@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?nextPatch@PxContactStreamIterator@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?hasNextContact@PxContactStreamIterator@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?nextContact@PxContactStreamIterator@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?getContactNormal@PxContactStreamIterator@physx@@QEBAAEBVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getInvMassScale0@PxContactStreamIterator@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getInvMassScale1@PxContactStreamIterator@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getInvInertiaScale0@PxContactStreamIterator@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getInvInertiaScale1@PxContactStreamIterator@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getMaxImpulse@PxContactStreamIterator@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getTargetVel@PxContactStreamIterator@physx@@QEBAAEBVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getContactPoint@PxContactStreamIterator@physx@@QEBAAEBVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getSeparation@PxContactStreamIterator@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getFaceIndex0@PxContactStreamIterator@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getFaceIndex1@PxContactStreamIterator@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getStaticFriction@PxContactStreamIterator@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getDynamicFriction@PxContactStreamIterator@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getRestitution@PxContactStreamIterator@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getMaterialFlags@PxContactStreamIterator@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getMaterialIndex0@PxContactStreamIterator@physx@@QEBAGXZ")
#pragma comment(linker, "/export:?getMaterialIndex1@PxContactStreamIterator@physx@@QEBAGXZ")
#pragma comment(linker, "/export:?advanceToIndex@PxContactStreamIterator@physx@@QEAA_NI@Z")
#pragma comment(linker, "/export:?reset@ContactBuffer@Gu@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?contact@ContactBuffer@Gu@physx@@QEAA_NAEBVPxVec3@3@0MI@Z")
#pragma comment(linker, "/export:?contact@ContactBuffer@Gu@physx@@QEAA_NAEBVPxVec3@3@0MGI@Z")
#pragma comment(linker, "/export:?contact@ContactBuffer@Gu@physx@@QEAA_NAEBUContactPoint@23@@Z")
#pragma comment(linker, "/export:?contact@ContactBuffer@Gu@physx@@QEAAPEAUContactPoint@23@XZ")
#pragma comment(linker, "/export:?getType@PxGeometry@physx@@QEBA?AW4Enum@PxGeometryType@2@XZ")
#pragma comment(linker, "/export:?reset@PxCache@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?initData@PxFeatherstoneArticulationLinkData@immediate@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?empty@PxBounds3@physx@@SA?AV12@XZ")
#pragma comment(linker, "/export:?boundsOfPoints@PxBounds3@physx@@SA?AV12@AEBVPxVec3@2@0@Z")
#pragma comment(linker, "/export:?centerExtents@PxBounds3@physx@@SA?AV12@AEBVPxVec3@2@0@Z")
#pragma comment(linker, "/export:?basisExtent@PxBounds3@physx@@SA?AV12@AEBVPxVec3@2@AEBVPxMat33@2@0@Z")
#pragma comment(linker, "/export:?poseExtent@PxBounds3@physx@@SA?AV12@AEBVPxTransform@2@AEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?transformSafe@PxBounds3@physx@@SA?AV12@AEBVPxMat33@2@AEBV12@@Z")
#pragma comment(linker, "/export:?transformFast@PxBounds3@physx@@SA?AV12@AEBVPxMat33@2@AEBV12@@Z")
#pragma comment(linker, "/export:?transformSafe@PxBounds3@physx@@SA?AV12@AEBVPxTransform@2@AEBV12@@Z")
#pragma comment(linker, "/export:?transformFast@PxBounds3@physx@@SA?AV12@AEBVPxTransform@2@AEBV12@@Z")
#pragma comment(linker, "/export:?setEmpty@PxBounds3@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?setMaximal@PxBounds3@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?include@PxBounds3@physx@@QEAAXAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?include@PxBounds3@physx@@QEAAXAEBV12@@Z")
#pragma comment(linker, "/export:?isEmpty@PxBounds3@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?intersects@PxBounds3@physx@@QEBA_NAEBV12@@Z")
#pragma comment(linker, "/export:?intersects1D@PxBounds3@physx@@QEBA_NAEBV12@I@Z")
#pragma comment(linker, "/export:?contains@PxBounds3@physx@@QEBA_NAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?isInside@PxBounds3@physx@@QEBA_NAEBV12@@Z")
#pragma comment(linker, "/export:?getCenter@PxBounds3@physx@@QEBA?AVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getCenter@PxBounds3@physx@@QEBAMI@Z")
#pragma comment(linker, "/export:?getExtents@PxBounds3@physx@@QEBAMI@Z")
#pragma comment(linker, "/export:?getDimensions@PxBounds3@physx@@QEBA?AVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getExtents@PxBounds3@physx@@QEBA?AVPxVec3@2@XZ")
#pragma comment(linker, "/export:?scaleSafe@PxBounds3@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?scaleFast@PxBounds3@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?fattenSafe@PxBounds3@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?fattenFast@PxBounds3@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?isFinite@PxBounds3@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxBounds3@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:??4PxVec4@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??APxVec4@physx@@QEAAAEAMI@Z")
#pragma comment(linker, "/export:??APxVec4@physx@@QEBAAEBMI@Z")
#pragma comment(linker, "/export:??8PxVec4@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:??9PxVec4@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:?isZero@PxVec4@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isFinite@PxVec4@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isNormalized@PxVec4@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?magnitudeSquared@PxVec4@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?magnitude@PxVec4@physx@@QEBAMXZ")
#pragma comment(linker, "/export:??GPxVec4@physx@@QEBA?AV01@XZ")
#pragma comment(linker, "/export:??HPxVec4@physx@@QEBA?AV01@AEBV01@@Z")
#pragma comment(linker, "/export:??GPxVec4@physx@@QEBA?AV01@AEBV01@@Z")
#pragma comment(linker, "/export:??DPxVec4@physx@@QEBA?AV01@M@Z")
#pragma comment(linker, "/export:??KPxVec4@physx@@QEBA?AV01@M@Z")
#pragma comment(linker, "/export:??YPxVec4@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??ZPxVec4@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??XPxVec4@physx@@QEAAAEAV01@M@Z")
#pragma comment(linker, "/export:??_0PxVec4@physx@@QEAAAEAV01@M@Z")
#pragma comment(linker, "/export:?dot@PxVec4@physx@@QEBAMAEBV12@@Z")
#pragma comment(linker, "/export:?getNormalized@PxVec4@physx@@QEBA?AV12@XZ")
#pragma comment(linker, "/export:?normalize@PxVec4@physx@@QEAAMXZ")
#pragma comment(linker, "/export:?multiply@PxVec4@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?minimum@PxVec4@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?maximum@PxVec4@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?getXYZ@PxVec4@physx@@QEBA?AVPxVec3@2@XZ")
#pragma comment(linker, "/export:?setZero@PxVec4@physx@@QEAAXXZ")
#pragma comment(linker, "/export:??8PxMat44@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:??4PxMat44@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:?getTranspose@PxMat44@physx@@QEBA?BV12@XZ")
#pragma comment(linker, "/export:??GPxMat44@physx@@QEBA?BV01@XZ")
#pragma comment(linker, "/export:??HPxMat44@physx@@QEBA?BV01@AEBV01@@Z")
#pragma comment(linker, "/export:??GPxMat44@physx@@QEBA?BV01@AEBV01@@Z")
#pragma comment(linker, "/export:??DPxMat44@physx@@QEBA?BV01@M@Z")
#pragma comment(linker, "/export:??DPxMat44@physx@@QEBA?BV01@AEBV01@@Z")
#pragma comment(linker, "/export:??YPxMat44@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??ZPxMat44@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??XPxMat44@physx@@QEAAAEAV01@M@Z")
#pragma comment(linker, "/export:??XPxMat44@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??RPxMat44@physx@@QEBAMII@Z")
#pragma comment(linker, "/export:??RPxMat44@physx@@QEAAAEAMII@Z")
#pragma comment(linker, "/export:?transform@PxMat44@physx@@QEBA?BVPxVec4@2@AEBV32@@Z")
#pragma comment(linker, "/export:?transform@PxMat44@physx@@QEBA?BVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?rotate@PxMat44@physx@@QEBA?BVPxVec4@2@AEBV32@@Z")
#pragma comment(linker, "/export:?rotate@PxMat44@physx@@QEBA?BVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?getBasis@PxMat44@physx@@QEBA?BVPxVec3@2@H@Z")
#pragma comment(linker, "/export:?getPosition@PxMat44@physx@@QEBA?BVPxVec3@2@XZ")
#pragma comment(linker, "/export:?setPosition@PxMat44@physx@@QEAAXAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?front@PxMat44@physx@@QEBAPEBMXZ")
#pragma comment(linker, "/export:??APxMat44@physx@@QEAAAEAVPxVec4@1@I@Z")
#pragma comment(linker, "/export:??APxMat44@physx@@QEBAAEBVPxVec4@1@I@Z")
#pragma comment(linker, "/export:?scale@PxMat44@physx@@QEAAXAEBVPxVec4@2@@Z")
#pragma comment(linker, "/export:?inverseRT@PxMat44@physx@@QEBA?BV12@XZ")
#pragma comment(linker, "/export:?isFinite@PxMat44@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:??4PxVec2@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??APxVec2@physx@@QEAAAEAMH@Z")
#pragma comment(linker, "/export:??APxVec2@physx@@QEBAAEBMH@Z")
#pragma comment(linker, "/export:??8PxVec2@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:??9PxVec2@physx@@QEBA_NAEBV01@@Z")
#pragma comment(linker, "/export:?isZero@PxVec2@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isFinite@PxVec2@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isNormalized@PxVec2@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?magnitudeSquared@PxVec2@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?magnitude@PxVec2@physx@@QEBAMXZ")
#pragma comment(linker, "/export:??GPxVec2@physx@@QEBA?AV01@XZ")
#pragma comment(linker, "/export:??HPxVec2@physx@@QEBA?AV01@AEBV01@@Z")
#pragma comment(linker, "/export:??GPxVec2@physx@@QEBA?AV01@AEBV01@@Z")
#pragma comment(linker, "/export:??DPxVec2@physx@@QEBA?AV01@M@Z")
#pragma comment(linker, "/export:??KPxVec2@physx@@QEBA?AV01@M@Z")
#pragma comment(linker, "/export:??YPxVec2@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??ZPxVec2@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??XPxVec2@physx@@QEAAAEAV01@M@Z")
#pragma comment(linker, "/export:??_0PxVec2@physx@@QEAAAEAV01@M@Z")
#pragma comment(linker, "/export:?dot@PxVec2@physx@@QEBAMAEBV12@@Z")
#pragma comment(linker, "/export:?getNormalized@PxVec2@physx@@QEBA?AV12@XZ")
#pragma comment(linker, "/export:?normalize@PxVec2@physx@@QEAAMXZ")
#pragma comment(linker, "/export:?multiply@PxVec2@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?minimum@PxVec2@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?minElement@PxVec2@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?maximum@PxVec2@physx@@QEBA?AV12@AEBV12@@Z")
#pragma comment(linker, "/export:?maxElement@PxVec2@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?isValid@PxTolerancesScale@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getTaskManager@PxBaseTask@physx@@QEBAPEAVPxTaskManager@2@XZ")
#pragma comment(linker, "/export:?setContextId@PxBaseTask@physx@@QEAAX_K@Z")
#pragma comment(linker, "/export:?getContextId@PxBaseTask@physx@@QEBA_KXZ")
#pragma comment(linker, "/export:?finishBefore@PxTask@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?startAfter@PxTask@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?getTaskID@PxTask@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?setContinuation@PxLightCpuTask@physx@@QEAAXAEAVPxTaskManager@2@PEAVPxBaseTask@2@@Z")
#pragma comment(linker, "/export:?setContinuation@PxLightCpuTask@physx@@QEAAXPEAVPxBaseTask@2@@Z")
#pragma comment(linker, "/export:?getContinuation@PxLightCpuTask@physx@@QEBAPEAVPxBaseTask@2@XZ")
#pragma comment(linker, "/export:?getFileName@PxAllocInfo@physx@@QEBAPEBDXZ")
#pragma comment(linker, "/export:?getLine@PxAllocInfo@physx@@QEBAHXZ")
#pragma comment(linker, "/export:?getAllocName@PxAllocInfo@physx@@QEBAPEBDXZ")
#pragma comment(linker, "/export:?getAllocId@PxAllocInfo@physx@@QEBA?AW4Enum@PxAllocId@2@XZ")
#pragma comment(linker, "/export:?isValid@PxBoxGeometry@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxCapsuleGeometry@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isIdentity@PxMeshScale@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getInverse@PxMeshScale@physx@@QEBA?AV12@XZ")
#pragma comment(linker, "/export:?toMat33@PxMeshScale@physx@@QEBA?AVPxMat33@2@XZ")
#pragma comment(linker, "/export:?hasNegativeDeterminant@PxMeshScale@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?transform@PxMeshScale@physx@@QEBA?AVPxVec3@2@AEBV32@@Z")
#pragma comment(linker, "/export:?isValidForTriangleMesh@PxMeshScale@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValidForConvexMesh@PxMeshScale@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxConvexMeshGeometry@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxSphereGeometry@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxPlaneGeometry@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxTriangleMeshGeometry@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxHeightFieldGeometry@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getType@PxGeometryHolder@physx@@QEBA?AW4Enum@PxGeometryType@2@XZ")
#pragma comment(linker, "/export:?any@PxGeometryHolder@physx@@QEAAAEAVPxGeometry@2@XZ")
#pragma comment(linker, "/export:?any@PxGeometryHolder@physx@@QEBAAEBVPxGeometry@2@XZ")
#pragma comment(linker, "/export:?sphere@PxGeometryHolder@physx@@QEAAAEAVPxSphereGeometry@2@XZ")
#pragma comment(linker, "/export:?sphere@PxGeometryHolder@physx@@QEBAAEBVPxSphereGeometry@2@XZ")
#pragma comment(linker, "/export:?plane@PxGeometryHolder@physx@@QEAAAEAVPxPlaneGeometry@2@XZ")
#pragma comment(linker, "/export:?plane@PxGeometryHolder@physx@@QEBAAEBVPxPlaneGeometry@2@XZ")
#pragma comment(linker, "/export:?capsule@PxGeometryHolder@physx@@QEAAAEAVPxCapsuleGeometry@2@XZ")
#pragma comment(linker, "/export:?capsule@PxGeometryHolder@physx@@QEBAAEBVPxCapsuleGeometry@2@XZ")
#pragma comment(linker, "/export:?box@PxGeometryHolder@physx@@QEAAAEAVPxBoxGeometry@2@XZ")
#pragma comment(linker, "/export:?box@PxGeometryHolder@physx@@QEBAAEBVPxBoxGeometry@2@XZ")
#pragma comment(linker, "/export:?convexMesh@PxGeometryHolder@physx@@QEAAAEAVPxConvexMeshGeometry@2@XZ")
#pragma comment(linker, "/export:?convexMesh@PxGeometryHolder@physx@@QEBAAEBVPxConvexMeshGeometry@2@XZ")
#pragma comment(linker, "/export:?triangleMesh@PxGeometryHolder@physx@@QEAAAEAVPxTriangleMeshGeometry@2@XZ")
#pragma comment(linker, "/export:?triangleMesh@PxGeometryHolder@physx@@QEBAAEBVPxTriangleMeshGeometry@2@XZ")
#pragma comment(linker, "/export:?heightField@PxGeometryHolder@physx@@QEAAAEAVPxHeightFieldGeometry@2@XZ")
#pragma comment(linker, "/export:?heightField@PxGeometryHolder@physx@@QEBAAEBVPxHeightFieldGeometry@2@XZ")
#pragma comment(linker, "/export:?storeAny@PxGeometryHolder@physx@@QEAAXAEBVPxGeometry@2@@Z")
#pragma comment(linker, "/export:?hadInitialOverlap@PxLocationHit@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?tessFlag@PxHeightFieldSample@physx@@QEBAEXZ")
#pragma comment(linker, "/export:?setTessFlag@PxHeightFieldSample@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?clearTessFlag@PxHeightFieldSample@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?setToDefault@PxHeightFieldDesc@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?isValid@PxHeightFieldDesc@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?setToDefault@PxSimpleTriangleMesh@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?isValid@PxSimpleTriangleMesh@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:??4PxTriangle@physx@@QEAAXAEBV01@@Z")
#pragma comment(linker, "/export:?normal@PxTriangle@physx@@QEBAXAEAVPxVec3@2@@Z")
#pragma comment(linker, "/export:?denormalizedNormal@PxTriangle@physx@@QEBAXAEAVPxVec3@2@@Z")
#pragma comment(linker, "/export:?area@PxTriangle@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?pointFromUV@PxTriangle@physx@@QEBA?AVPxVec3@2@MM@Z")
#pragma comment(linker, "/export:?setToDefault@PxFilterData@physx@@QEAAXXZ")
#pragma comment(linker, "/export:??4PxFilterData@physx@@QEAAXAEBU01@@Z")
#pragma comment(linker, "/export:??8PxFilterData@physx@@QEBA_NAEBU01@@Z")
#pragma comment(linker, "/export:??9PxFilterData@physx@@QEBA_NAEBU01@@Z")
#pragma comment(linker, "/export:?getMaxRaycastsPerExecute@PxBatchQueryMemory@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getMaxSweepsPerExecute@PxBatchQueryMemory@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getMaxOverlapsPerExecute@PxBatchQueryMemory@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?isValid@PxBatchQueryDesc@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getPoint@PxContactSet@physx@@QEBAAEBVPxVec3@2@I@Z")
#pragma comment(linker, "/export:?setPoint@PxContactSet@physx@@QEAAXIAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?getNormal@PxContactSet@physx@@QEBAAEBVPxVec3@2@I@Z")
#pragma comment(linker, "/export:?setNormal@PxContactSet@physx@@QEAAXIAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?getSeparation@PxContactSet@physx@@QEBAMI@Z")
#pragma comment(linker, "/export:?setSeparation@PxContactSet@physx@@QEAAXIM@Z")
#pragma comment(linker, "/export:?getTargetVelocity@PxContactSet@physx@@QEBAAEBVPxVec3@2@I@Z")
#pragma comment(linker, "/export:?setTargetVelocity@PxContactSet@physx@@QEAAXIAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?getInternalFaceIndex0@PxContactSet@physx@@QEBAII@Z")
#pragma comment(linker, "/export:?getInternalFaceIndex1@PxContactSet@physx@@QEBAII@Z")
#pragma comment(linker, "/export:?getMaxImpulse@PxContactSet@physx@@QEBAMI@Z")
#pragma comment(linker, "/export:?setMaxImpulse@PxContactSet@physx@@QEAAXIM@Z")
#pragma comment(linker, "/export:?getRestitution@PxContactSet@physx@@QEBAMI@Z")
#pragma comment(linker, "/export:?setRestitution@PxContactSet@physx@@QEAAXIM@Z")
#pragma comment(linker, "/export:?getStaticFriction@PxContactSet@physx@@QEBAMI@Z")
#pragma comment(linker, "/export:?setStaticFriction@PxContactSet@physx@@QEAAXIM@Z")
#pragma comment(linker, "/export:?getDynamicFriction@PxContactSet@physx@@QEBAMI@Z")
#pragma comment(linker, "/export:?setDynamicFriction@PxContactSet@physx@@QEAAXIM@Z")
#pragma comment(linker, "/export:?ignore@PxContactSet@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?size@PxContactSet@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getInvMassScale0@PxContactSet@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getInvMassScale1@PxContactSet@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getInvInertiaScale0@PxContactSet@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getInvInertiaScale1@PxContactSet@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?setInvMassScale0@PxContactSet@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setInvMassScale1@PxContactSet@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setInvInertiaScale0@PxContactSet@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setInvInertiaScale1@PxContactSet@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?createShape@PxPhysics@physx@@QEAAPEAVPxShape@2@AEBVPxGeometry@2@AEBVPxMaterial@2@_NV?$PxFlags@W4Enum@PxShapeFlag@physx@@E@2@@Z")
#pragma comment(linker, "/export:?setToDefault@PxSceneLimits@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?isValid@PxSceneLimits@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?setToDefault@PxSceneDesc@physx@@QEAAXAEBVPxTolerancesScale@2@@Z")
#pragma comment(linker, "/export:?isValid@PxSceneDesc@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getTolerancesScale@PxSceneDesc@physx@@QEBAAEBVPxTolerancesScale@2@XZ")
#pragma comment(linker, "/export:?getNbBroadPhaseAdds@PxSimulationStatistics@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbBroadPhaseRemoves@PxSimulationStatistics@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getRbPairStats@PxSimulationStatistics@physx@@QEBAIW4RbPairStatsType@12@W4Enum@PxGeometryType@2@1@Z")
#pragma comment(linker, "/export:?nextItemSet@PxContactPairExtraDataIterator@physx@@QEAA_NXZ")
#pragma comment(linker, "/export:?extractContacts@PxContactPair@physx@@QEBAIPEAUPxContactPairPoint@2@I@Z")
#pragma comment(linker, "/export:?bufferContacts@PxContactPair@physx@@QEBAXPEAU12@PEAE@Z")
#pragma comment(linker, "/export:?getInternalFaceIndices@PxContactPair@physx@@QEBAPEBIXZ")
#pragma comment(linker, "/export:?isZero@PxExtendedVec3@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?dot@PxExtendedVec3@physx@@QEBANAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?distanceSquared@PxExtendedVec3@physx@@QEBANAEBU12@@Z")
#pragma comment(linker, "/export:?magnitudeSquared@PxExtendedVec3@physx@@QEBANXZ")
#pragma comment(linker, "/export:?magnitude@PxExtendedVec3@physx@@QEBANXZ")
#pragma comment(linker, "/export:?normalize@PxExtendedVec3@physx@@QEAANXZ")
#pragma comment(linker, "/export:?isFinite@PxExtendedVec3@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?maximum@PxExtendedVec3@physx@@QEAAXAEBU12@@Z")
#pragma comment(linker, "/export:?minimum@PxExtendedVec3@physx@@QEAAXAEBU12@@Z")
#pragma comment(linker, "/export:?set@PxExtendedVec3@physx@@QEAAXNNN@Z")
#pragma comment(linker, "/export:?setPlusInfinity@PxExtendedVec3@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?setMinusInfinity@PxExtendedVec3@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?cross@PxExtendedVec3@physx@@QEAAXAEBU12@AEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?cross@PxExtendedVec3@physx@@QEAAXAEBU12@0@Z")
#pragma comment(linker, "/export:?cross@PxExtendedVec3@physx@@QEBA?AU12@AEBU12@@Z")
#pragma comment(linker, "/export:?cross@PxExtendedVec3@physx@@QEAAXAEBVPxVec3@2@AEBU12@@Z")
#pragma comment(linker, "/export:??GPxExtendedVec3@physx@@QEBA?AU01@XZ")
#pragma comment(linker, "/export:??YPxExtendedVec3@physx@@QEAAAEAU01@AEBU01@@Z")
#pragma comment(linker, "/export:??ZPxExtendedVec3@physx@@QEAAAEAU01@AEBU01@@Z")
#pragma comment(linker, "/export:??YPxExtendedVec3@physx@@QEAAAEAU01@AEBVPxVec3@1@@Z")
#pragma comment(linker, "/export:??ZPxExtendedVec3@physx@@QEAAAEAU01@AEBVPxVec3@1@@Z")
#pragma comment(linker, "/export:??XPxExtendedVec3@physx@@QEAAAEAU01@AEBM@Z")
#pragma comment(linker, "/export:??HPxExtendedVec3@physx@@QEBA?AU01@AEBU01@@Z")
#pragma comment(linker, "/export:??GPxExtendedVec3@physx@@QEBA?AVPxVec3@1@AEBU01@@Z")
#pragma comment(linker, "/export:??APxExtendedVec3@physx@@QEAAAEANH@Z")
#pragma comment(linker, "/export:??APxExtendedVec3@physx@@QEBANH@Z")
#pragma comment(linker, "/export:?getType@PxObstacle@physx@@QEBA?AW4Enum@PxGeometryType@2@XZ")
#pragma comment(linker, "/export:?getType@PxControllerDesc@physx@@QEBA?AW4Enum@PxControllerShapeType@2@XZ")
#pragma comment(linker, "/export:??4PxBoxControllerDesc@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:??4PxCapsuleControllerDesc@physx@@QEAAAEAV01@AEBV01@@Z")
#pragma comment(linker, "/export:?setToDefault@PxConvexMeshDesc@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?isValid@PxConvexMeshDesc@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?setToDefault@PxTriangleMeshDesc@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?isValid@PxTriangleMeshDesc@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?setToDefault@PxBVH33MidphaseDesc@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?isValid@PxBVH33MidphaseDesc@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?setToDefault@PxBVH34MidphaseDesc@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?isValid@PxBVH34MidphaseDesc@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getType@PxMidphaseDesc@physx@@QEBA?AW4Enum@PxMeshMidPhase@2@XZ")
#pragma comment(linker, "/export:?setToDefault@PxMidphaseDesc@physx@@QEAAXW4Enum@PxMeshMidPhase@2@@Z")
#pragma comment(linker, "/export:?isValid@PxMidphaseDesc@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:??4PxMidphaseDesc@physx@@QEAAAEAV01@W4Enum@PxMeshMidPhase@1@@Z")
#pragma comment(linker, "/export:?setToDefault@PxBVHStructureDesc@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?isValid@PxBVHStructureDesc@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:??XPxJacobianRow@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:??DPxJacobianRow@physx@@QEBA?AU01@M@Z")
#pragma comment(linker, "/export:?isValid@PxJointLimitParameters@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isSoft@PxJointLimitParameters@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxJointLinearLimit@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxJointLinearLimitPair@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxJointAngularLimitPair@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxJointLimitCone@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxJointLimitPyramid@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?isValid@PxD6JointDrive@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getTwist@PxD6Joint@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?setLinearLimit@PxD6Joint@physx@@QEAAXAEBVPxJointLinearLimit@2@@Z")
#pragma comment(linker, "/export:?getLinearLimit@PxD6Joint@physx@@QEBA?AVPxJointLinearLimit@2@XZ")
#pragma comment(linker, "/export:?createExclusiveShape@PxRigidActorExt@physx@@SAPEAVPxShape@2@AEAVPxRigidActor@2@AEBVPxGeometry@2@PEBQEAVPxMaterial@2@GV?$PxFlags@W4Enum@PxShapeFlag@physx@@E@2@@Z")
#pragma comment(linker, "/export:?createExclusiveShape@PxRigidActorExt@physx@@SAPEAVPxShape@2@AEAVPxRigidActor@2@AEBVPxGeometry@2@AEBVPxMaterial@2@V?$PxFlags@W4Enum@PxShapeFlag@physx@@E@2@@Z")
#pragma comment(linker, "/export:??DPxMassProperties@physx@@QEBA?AV01@M@Z")
#pragma comment(linker, "/export:?translate@PxMassProperties@physx@@QEAAXAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?getMassSpaceInertia@PxMassProperties@physx@@SA?AVPxVec3@2@AEBVPxMat33@2@AEAVPxQuat@2@@Z")
#pragma comment(linker, "/export:?translateInertia@PxMassProperties@physx@@SA?AVPxMat33@2@AEBV32@MAEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?rotateInertia@PxMassProperties@physx@@SA?AVPxMat33@2@AEBV32@AEBVPxQuat@2@@Z")
#pragma comment(linker, "/export:?scaleInertia@PxMassProperties@physx@@SA?AVPxMat33@2@AEBV32@AEBVPxQuat@2@AEBVPxVec3@2@@Z")
#pragma comment(linker, "/export:?sum@PxMassProperties@physx@@SA?AV12@PEBV12@PEBVPxTransform@2@I@Z")
#pragma comment(linker, "/export:?getGlobalPose@PxShapeExt@physx@@SA?AVPxTransform@2@AEBVPxShape@2@AEBVPxRigidActor@2@@Z")
#pragma comment(linker, "/export:?raycast@PxShapeExt@physx@@SAIAEBVPxShape@2@AEBVPxRigidActor@2@AEBVPxVec3@2@2MV?$PxFlags@W4Enum@PxHitFlag@physx@@G@2@IPEAUPxRaycastHit@2@@Z")
#pragma comment(linker, "/export:?overlap@PxShapeExt@physx@@SA_NAEBVPxShape@2@AEBVPxRigidActor@2@AEBVPxGeometry@2@AEBVPxTransform@2@@Z")
#pragma comment(linker, "/export:?sweep@PxShapeExt@physx@@SA_NAEBVPxShape@2@AEBVPxRigidActor@2@AEBVPxVec3@2@MAEBVPxGeometry@2@AEBVPxTransform@2@AEAUPxSweepHit@2@V?$PxFlags@W4Enum@PxHitFlag@physx@@G@2@@Z")
#pragma comment(linker, "/export:?getWorldBounds@PxShapeExt@physx@@SA?AVPxBounds3@2@AEBVPxShape@2@AEBVPxRigidActor@2@M@Z")
#pragma comment(linker, "/export:?getResults@PxMeshOverlapUtil@physx@@QEBAPEBIXZ")
#pragma comment(linker, "/export:?getNbResults@PxMeshOverlapUtil@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?isValid@PxRepXObject@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getRecipMOI@PxVehicleEngineData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getRecipMaxOmega@PxVehicleEngineData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getGearRatio@PxVehicleGearsData@physx@@QEBAMW4Enum@12@@Z")
#pragma comment(linker, "/export:?setGearRatio@PxVehicleGearsData@physx@@QEAAXW4Enum@12@M@Z")
#pragma comment(linker, "/export:?setLatency@PxVehicleAutoBoxData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?getLatency@PxVehicleAutoBoxData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getUpRatios@PxVehicleAutoBoxData@physx@@QEBAMW4Enum@PxVehicleGearsData@2@@Z")
#pragma comment(linker, "/export:?setUpRatios@PxVehicleAutoBoxData@physx@@QEAAXW4Enum@PxVehicleGearsData@2@M@Z")
#pragma comment(linker, "/export:?getDownRatios@PxVehicleAutoBoxData@physx@@QEBAMW4Enum@PxVehicleGearsData@2@@Z")
#pragma comment(linker, "/export:?setDownRatios@PxVehicleAutoBoxData@physx@@QEAAXW4Enum@PxVehicleGearsData@2@M@Z")
#pragma comment(linker, "/export:?getDenominator@PxVehicleTireLoadFilterData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getRecipRadius@PxVehicleWheelData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getRecipMOI@PxVehicleWheelData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getRecipMaxCompression@PxVehicleSuspensionData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getRecipMaxDroop@PxVehicleSuspensionData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?setMassAndPreserveNaturalFrequency@PxVehicleSuspensionData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?getRecipLongitudinalStiffnessPerUnitGravity@PxVehicleTireData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getFrictionVsSlipGraphRecipx1Minusx0@PxVehicleTireData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getFrictionVsSlipGraphRecipx2Minusx1@PxVehicleTireData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getNbWheels@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbAntiRollBars@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getTireLoadFilterData@PxVehicleWheelsSimData@physx@@QEBAAEBVPxVehicleTireLoadFilterData@2@XZ")
#pragma comment(linker, "/export:?getNbWheels4@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbSuspensionData@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbWheelData@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbSuspTravelDirection@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbTireData@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbSuspForceAppPointOffset@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbTireForceAppPointOffset@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbWheelCentreOffset@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbWheelShapeMapping@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbSceneQueryFilterData@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getMinLongSlipDenominator@PxVehicleWheelsSimData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?setThresholdLongSpeed@PxVehicleWheelsSimData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?getThresholdLongSpeed@PxVehicleWheelsSimData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?setLowForwardSpeedSubStepCount@PxVehicleWheelsSimData@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?getLowForwardSpeedSubStepCount@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?setHighForwardSpeedSubStepCount@PxVehicleWheelsSimData@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?getHighForwardSpeedSubStepCount@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?setWheelEnabledState@PxVehicleWheelsSimData@physx@@QEAAXI_N@Z")
#pragma comment(linker, "/export:?getWheelEnabledState@PxVehicleWheelsSimData@physx@@QEBA_NI@Z")
#pragma comment(linker, "/export:?getNbWheelEnabledState@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbAntiRollBars4@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbAntiRollBarData@PxVehicleWheelsSimData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbWheelRotationSpeed@PxVehicleWheelsDynData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbWheelRotationAngle@PxVehicleWheelsDynData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getWheel4DynData@PxVehicleWheelsDynData@physx@@QEBAPEAVPxVehicleWheels4DynData@2@XZ")
#pragma comment(linker, "/export:?getNbConstraints@PxVehicleWheelsDynData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getVehicleType@PxVehicleWheels@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getRigidDynamicActor@PxVehicleWheels@physx@@QEAAPEAVPxRigidDynamic@2@XZ")
#pragma comment(linker, "/export:?getRigidDynamicActor@PxVehicleWheels@physx@@QEBAPEBVPxRigidDynamic@2@XZ")
#pragma comment(linker, "/export:?getNbNonDrivenWheels@PxVehicleWheels@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getEngineData@PxVehicleDriveSimData@physx@@QEBAAEBVPxVehicleEngineData@2@XZ")
#pragma comment(linker, "/export:?getGearsData@PxVehicleDriveSimData@physx@@QEBAAEBVPxVehicleGearsData@2@XZ")
#pragma comment(linker, "/export:?getClutchData@PxVehicleDriveSimData@physx@@QEBAAEBVPxVehicleClutchData@2@XZ")
#pragma comment(linker, "/export:?getAutoBoxData@PxVehicleDriveSimData@physx@@QEBAAEBVPxVehicleAutoBoxData@2@XZ")
#pragma comment(linker, "/export:?setGearUp@PxVehicleDriveDynData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setGearDown@PxVehicleDriveDynData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?getGearUp@PxVehicleDriveDynData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getGearDown@PxVehicleDriveDynData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?setUseAutoGears@PxVehicleDriveDynData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?getUseAutoGears@PxVehicleDriveDynData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?toggleAutoGears@PxVehicleDriveDynData@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?setCurrentGear@PxVehicleDriveDynData@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?getCurrentGear@PxVehicleDriveDynData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?setTargetGear@PxVehicleDriveDynData@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?getTargetGear@PxVehicleDriveDynData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?startGearChange@PxVehicleDriveDynData@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?forceGearChange@PxVehicleDriveDynData@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?setEngineRotationSpeed@PxVehicleDriveDynData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?getEngineRotationSpeed@PxVehicleDriveDynData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getGearSwitchTime@PxVehicleDriveDynData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getAutoBoxSwitchTime@PxVehicleDriveDynData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getNbAnalogInput@PxVehicleDriveDynData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?setGearChange@PxVehicleDriveDynData@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?getGearChange@PxVehicleDriveDynData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?setGearSwitchTime@PxVehicleDriveDynData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setAutoBoxSwitchTime@PxVehicleDriveDynData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?getDiffData@PxVehicleDriveSimData4W@physx@@QEBAAEBVPxVehicleDifferential4WData@2@XZ")
#pragma comment(linker, "/export:?getAckermannGeometryData@PxVehicleDriveSimData4W@physx@@QEBAAEBVPxVehicleAckermannGeometryData@2@XZ")
#pragma comment(linker, "/export:?setDriveModel@PxVehicleDriveTank@physx@@QEAAXW4Enum@PxVehicleDriveTankControlModel@2@@Z")
#pragma comment(linker, "/export:?getDriveModel@PxVehicleDriveTank@physx@@QEBA?AW4Enum@PxVehicleDriveTankControlModel@2@XZ")
#pragma comment(linker, "/export:?getMaxNbSurfaceTypes@PxVehicleDrivableSurfaceToTireFrictionPairs@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getMaxNbTireTypes@PxVehicleDrivableSurfaceToTireFrictionPairs@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getDiffData@PxVehicleDriveSimDataNW@physx@@QEBAAEBVPxVehicleDifferentialNWData@2@XZ")
#pragma comment(linker, "/export:?setDigitalAccel@PxVehicleDrive4WRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setDigitalBrake@PxVehicleDrive4WRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setDigitalHandbrake@PxVehicleDrive4WRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setDigitalSteerLeft@PxVehicleDrive4WRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setDigitalSteerRight@PxVehicleDrive4WRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?getDigitalAccel@PxVehicleDrive4WRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getDigitalBrake@PxVehicleDrive4WRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getDigitalHandbrake@PxVehicleDrive4WRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getDigitalSteerLeft@PxVehicleDrive4WRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getDigitalSteerRight@PxVehicleDrive4WRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?setAnalogAccel@PxVehicleDrive4WRawInputData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setAnalogBrake@PxVehicleDrive4WRawInputData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setAnalogHandbrake@PxVehicleDrive4WRawInputData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setAnalogSteer@PxVehicleDrive4WRawInputData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?getAnalogAccel@PxVehicleDrive4WRawInputData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getAnalogBrake@PxVehicleDrive4WRawInputData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getAnalogHandbrake@PxVehicleDrive4WRawInputData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getAnalogSteer@PxVehicleDrive4WRawInputData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?setGearUp@PxVehicleDrive4WRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setGearDown@PxVehicleDrive4WRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?getGearUp@PxVehicleDrive4WRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getGearDown@PxVehicleDrive4WRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getDriveModel@PxVehicleDriveTankRawInputData@physx@@QEBA?AW4Enum@PxVehicleDriveTankControlModel@2@XZ")
#pragma comment(linker, "/export:?setDigitalAccel@PxVehicleDriveTankRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setDigitalLeftThrust@PxVehicleDriveTankRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setDigitalRightThrust@PxVehicleDriveTankRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setDigitalLeftBrake@PxVehicleDriveTankRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setDigitalRightBrake@PxVehicleDriveTankRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?getDigitalAccel@PxVehicleDriveTankRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getDigitalLeftThrust@PxVehicleDriveTankRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getDigitalRightThrust@PxVehicleDriveTankRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getDigitalLeftBrake@PxVehicleDriveTankRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getDigitalRightBrake@PxVehicleDriveTankRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?setAnalogAccel@PxVehicleDriveTankRawInputData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setAnalogLeftThrust@PxVehicleDriveTankRawInputData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setAnalogRightThrust@PxVehicleDriveTankRawInputData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setAnalogLeftBrake@PxVehicleDriveTankRawInputData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?setAnalogRightBrake@PxVehicleDriveTankRawInputData@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?getAnalogAccel@PxVehicleDriveTankRawInputData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getAnalogLeftThrust@PxVehicleDriveTankRawInputData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getAnalogRightThrust@PxVehicleDriveTankRawInputData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getAnalogLeftBrake@PxVehicleDriveTankRawInputData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getAnalogRightBrake@PxVehicleDriveTankRawInputData@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?setGearUp@PxVehicleDriveTankRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?setGearDown@PxVehicleDriveTankRawInputData@physx@@QEAAX_N@Z")
#pragma comment(linker, "/export:?getGearUp@PxVehicleDriveTankRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getGearDown@PxVehicleDriveTankRawInputData@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?getBackgroundColor@PxVehicleGraph@physx@@QEBAAEBVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getBackgroundAlpha@PxVehicleGraph@physx@@QEBAMXZ")
#pragma comment(linker, "/export:?getBackgroundCoords@PxVehicleGraph@physx@@QEBAXAEAM000@Z")
#pragma comment(linker, "/export:?getEngineGraph@PxVehicleTelemetryData@physx@@QEBAAEBVPxVehicleGraph@2@XZ")
#pragma comment(linker, "/export:?getNbWheelGraphs@PxVehicleTelemetryData@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getWheelGraph@PxVehicleTelemetryData@physx@@QEBAAEBVPxVehicleGraph@2@I@Z")
#pragma comment(linker, "/export:?getTireforceAppPoints@PxVehicleTelemetryData@physx@@QEBAPEBVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getSuspforceAppPoints@PxVehicleTelemetryData@physx@@QEBAPEBVPxVec3@2@XZ")
#pragma comment(linker, "/export:?getNbSteerAngle@PxVehicleNoDrive@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbDriveTorque@PxVehicleNoDrive@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?getNbBrakeTorque@PxVehicleNoDrive@physx@@QEBAIXZ")
#pragma comment(linker, "/export:?isOpen@PxFileBuf@general_PxIOStream2@physx@@QEBA_NXZ")
#pragma comment(linker, "/export:?setEndianMode@PxFileBuf@general_PxIOStream2@physx@@QEAAXW4EndianMode@123@@Z")
#pragma comment(linker, "/export:?getEndianMode@PxFileBuf@general_PxIOStream2@physx@@QEBA?AW4EndianMode@123@XZ")
#pragma comment(linker, "/export:?release@PxFileBuf@general_PxIOStream2@physx@@QEAAXXZ")
#pragma comment(linker, "/export:?isBigEndian@PxFileBuf@general_PxIOStream2@physx@@SA_NXZ")
#pragma comment(linker, "/export:?swap2Bytes@PxFileBuf@general_PxIOStream2@physx@@QEBAXPEAX@Z")
#pragma comment(linker, "/export:?swap4Bytes@PxFileBuf@general_PxIOStream2@physx@@QEBAXPEAX@Z")
#pragma comment(linker, "/export:?swap8Bytes@PxFileBuf@general_PxIOStream2@physx@@QEBAXPEAX@Z")
#pragma comment(linker, "/export:?storeDword@PxFileBuf@general_PxIOStream2@physx@@QEAAXI@Z")
#pragma comment(linker, "/export:?storeFloat@PxFileBuf@general_PxIOStream2@physx@@QEAAXM@Z")
#pragma comment(linker, "/export:?storeDouble@PxFileBuf@general_PxIOStream2@physx@@QEAAXN@Z")
#pragma comment(linker, "/export:?storeByte@PxFileBuf@general_PxIOStream2@physx@@QEAAXE@Z")
#pragma comment(linker, "/export:?storeWord@PxFileBuf@general_PxIOStream2@physx@@QEAAXG@Z")
#pragma comment(linker, "/export:?readByte@PxFileBuf@general_PxIOStream2@physx@@QEAAEXZ")
#pragma comment(linker, "/export:?readWord@PxFileBuf@general_PxIOStream2@physx@@QEAAGXZ")
#pragma comment(linker, "/export:?readDword@PxFileBuf@general_PxIOStream2@physx@@QEAAIXZ")
#pragma comment(linker, "/export:?readFloat@PxFileBuf@general_PxIOStream2@physx@@QEAAMXZ")
#pragma comment(linker, "/export:?readDouble@PxFileBuf@general_PxIOStream2@physx@@QEAANXZ")
#pragma comment(linker, "/export:?PxAbs@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxEquals@physx@@YA_NMMM@Z")
#pragma comment(linker, "/export:?PxAbs@physx@@YANN@Z")
#pragma comment(linker, "/export:?PxAbs@physx@@YAHH@Z")
#pragma comment(linker, "/export:?PxSqrt@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxSqrt@physx@@YANN@Z")
#pragma comment(linker, "/export:?PxRecipSqrt@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxRecipSqrt@physx@@YANN@Z")
#pragma comment(linker, "/export:?PxSin@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxSin@physx@@YANN@Z")
#pragma comment(linker, "/export:?PxCos@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxCos@physx@@YANN@Z")
#pragma comment(linker, "/export:?PxTan@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxTan@physx@@YANN@Z")
#pragma comment(linker, "/export:?PxAsin@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxAsin@physx@@YANN@Z")
#pragma comment(linker, "/export:?PxAcos@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxAcos@physx@@YANN@Z")
#pragma comment(linker, "/export:?PxAtan@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxAtan@physx@@YANN@Z")
#pragma comment(linker, "/export:?PxAtan2@physx@@YAMMM@Z")
#pragma comment(linker, "/export:?PxAtan2@physx@@YANNN@Z")
#pragma comment(linker, "/export:?PxIsFinite@physx@@YA_NM@Z")
#pragma comment(linker, "/export:?PxIsFinite@physx@@YA_NN@Z")
#pragma comment(linker, "/export:?PxFloor@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxExp@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxCeil@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxSign@physx@@YAMM@Z")
#pragma comment(linker, "/export:?PxPow@physx@@YAMMM@Z")
#pragma comment(linker, "/export:?PxLog@physx@@YAMM@Z")
#pragma comment(linker, "/export:??Uphysx@@YA?AV?$PxFlags@W4Enum@PxArticulationAxis@physx@@E@0@W4Enum@PxArticulationAxis@0@0@Z")
#pragma comment(linker, "/export:??Iphysx@@YA?AV?$PxFlags@W4Enum@PxArticulationAxis@physx@@E@0@W4Enum@PxArticulationAxis@0@0@Z")
#pragma comment(linker, "/export:??Sphysx@@YA?AV?$PxFlags@W4Enum@PxArticulationAxis@physx@@E@0@W4Enum@PxArticulationAxis@0@@Z")
#pragma comment(linker, "/export:?PxPlaneEquationFromTransform@physx@@YA?AVPxPlane@1@AEBVPxTransform@1@@Z")
#pragma comment(linker, "/export:?PxMemZero@physx@@YAPEAXPEAXI@Z")
#pragma comment(linker, "/export:?PxMemSet@physx@@YAPEAXPEAXHI@Z")
#pragma comment(linker, "/export:?PxMemCopy@physx@@YAPEAXPEAXPEBXI@Z")
#pragma comment(linker, "/export:?PxMemMove@physx@@YAPEAXPEAXPEBXI@Z")
#pragma comment(linker, "/export:?PxGetFilterObjectType@physx@@YA?AW4Enum@PxFilterObjectType@1@I@Z")
#pragma comment(linker, "/export:?PxFilterObjectIsKinematic@physx@@YA_NI@Z")
#pragma comment(linker, "/export:?PxFilterObjectIsTrigger@physx@@YA_NI@Z")
#pragma comment(linker, "/export:?PxCreatePhysics@@YAPEAVPxPhysics@physx@@IAEAVPxFoundation@2@AEBVPxTolerancesScale@2@_NPEAVPxPvd@2@@Z")
#pragma comment(linker, "/export:?toVec3@physx@@YA?AVPxVec3@1@AEBUPxExtendedVec3@1@@Z")
#pragma comment(linker, "/export:?platformAlignedAlloc@physx@@YAPEAX_K@Z")
#pragma comment(linker, "/export:?platformAlignedFree@physx@@YAXPEAX@Z")
#pragma comment(linker, "/export:?PxCreateRepXObject@@YA?AUPxRepXObject@physx@@PEBVPxBase@2@_K@Z")

namespace ____BiohazrdInlineExportHelpers
{
    physx::PxVec3 & (physx::PxVec3::* unused0)(const physx::PxVec3 &) = &physx::PxVec3::operator=;
    float & (physx::PxVec3::* unused1)(unsigned int) = &physx::PxVec3::operator[];
    const float & (physx::PxVec3::* unused2)(unsigned int) const = &physx::PxVec3::operator[];
    bool (physx::PxVec3::* unused3)(const physx::PxVec3 &) const = &physx::PxVec3::operator==;
    bool (physx::PxVec3::* unused4)(const physx::PxVec3 &) const = &physx::PxVec3::operator!=;
    bool (physx::PxVec3::* unused5)() const = &physx::PxVec3::isZero;
    bool (physx::PxVec3::* unused6)() const = &physx::PxVec3::isFinite;
    bool (physx::PxVec3::* unused7)() const = &physx::PxVec3::isNormalized;
    float (physx::PxVec3::* unused8)() const = &physx::PxVec3::magnitudeSquared;
    float (physx::PxVec3::* unused9)() const = &physx::PxVec3::magnitude;
    physx::PxVec3 (physx::PxVec3::* unused10)() const = &physx::PxVec3::operator-;
    physx::PxVec3 (physx::PxVec3::* unused11)(const physx::PxVec3 &) const = &physx::PxVec3::operator+;
    physx::PxVec3 (physx::PxVec3::* unused12)(const physx::PxVec3 &) const = &physx::PxVec3::operator-;
    physx::PxVec3 (physx::PxVec3::* unused13)(float) const = &physx::PxVec3::operator*;
    physx::PxVec3 (physx::PxVec3::* unused14)(float) const = &physx::PxVec3::operator/;
    physx::PxVec3 & (physx::PxVec3::* unused15)(const physx::PxVec3 &) = &physx::PxVec3::operator+=;
    physx::PxVec3 & (physx::PxVec3::* unused16)(const physx::PxVec3 &) = &physx::PxVec3::operator-=;
    physx::PxVec3 & (physx::PxVec3::* unused17)(float) = &physx::PxVec3::operator*=;
    physx::PxVec3 & (physx::PxVec3::* unused18)(float) = &physx::PxVec3::operator/=;
    float (physx::PxVec3::* unused19)(const physx::PxVec3 &) const = &physx::PxVec3::dot;
    physx::PxVec3 (physx::PxVec3::* unused20)(const physx::PxVec3 &) const = &physx::PxVec3::cross;
    physx::PxVec3 (physx::PxVec3::* unused21)() const = &physx::PxVec3::getNormalized;
    float (physx::PxVec3::* unused22)() = &physx::PxVec3::normalize;
    float (physx::PxVec3::* unused23)() = &physx::PxVec3::normalizeSafe;
    float (physx::PxVec3::* unused24)() = &physx::PxVec3::normalizeFast;
    physx::PxVec3 (physx::PxVec3::* unused25)(const physx::PxVec3 &) const = &physx::PxVec3::multiply;
    physx::PxVec3 (physx::PxVec3::* unused26)(const physx::PxVec3 &) const = &physx::PxVec3::minimum;
    float (physx::PxVec3::* unused27)() const = &physx::PxVec3::minElement;
    physx::PxVec3 (physx::PxVec3::* unused28)(const physx::PxVec3 &) const = &physx::PxVec3::maximum;
    float (physx::PxVec3::* unused29)() const = &physx::PxVec3::maxElement;
    physx::PxVec3 (physx::PxVec3::* unused30)() const = &physx::PxVec3::abs;
    bool (physx::PxQuat::* unused31)() const = &physx::PxQuat::isIdentity;
    bool (physx::PxQuat::* unused32)() const = &physx::PxQuat::isFinite;
    bool (physx::PxQuat::* unused33)() const = &physx::PxQuat::isUnit;
    bool (physx::PxQuat::* unused34)() const = &physx::PxQuat::isSane;
    bool (physx::PxQuat::* unused35)(const physx::PxQuat &) const = &physx::PxQuat::operator==;
    void (physx::PxQuat::* unused36)(float &, physx::PxVec3 &) const = &physx::PxQuat::toRadiansAndUnitAxis;
    float (physx::PxQuat::* unused37)() const = &physx::PxQuat::getAngle;
    float (physx::PxQuat::* unused38)(const physx::PxQuat &) const = &physx::PxQuat::getAngle;
    float (physx::PxQuat::* unused39)() const = &physx::PxQuat::magnitudeSquared;
    float (physx::PxQuat::* unused40)(const physx::PxQuat &) const = &physx::PxQuat::dot;
    physx::PxQuat (physx::PxQuat::* unused41)() const = &physx::PxQuat::getNormalized;
    float (physx::PxQuat::* unused42)() const = &physx::PxQuat::magnitude;
    float (physx::PxQuat::* unused43)() = &physx::PxQuat::normalize;
    physx::PxQuat (physx::PxQuat::* unused44)() const = &physx::PxQuat::getConjugate;
    physx::PxVec3 (physx::PxQuat::* unused45)() const = &physx::PxQuat::getImaginaryPart;
    physx::PxVec3 (physx::PxQuat::* unused46)() const = &physx::PxQuat::getBasisVector0;
    physx::PxVec3 (physx::PxQuat::* unused47)() const = &physx::PxQuat::getBasisVector1;
    physx::PxVec3 (physx::PxQuat::* unused48)() const = &physx::PxQuat::getBasisVector2;
    const physx::PxVec3 (physx::PxQuat::* unused49)(const physx::PxVec3 &) const = &physx::PxQuat::rotate;
    const physx::PxVec3 (physx::PxQuat::* unused50)(const physx::PxVec3 &) const = &physx::PxQuat::rotateInv;
    physx::PxQuat & (physx::PxQuat::* unused51)(const physx::PxQuat &) = &physx::PxQuat::operator=;
    physx::PxQuat & (physx::PxQuat::* unused52)(const physx::PxQuat &) = &physx::PxQuat::operator*=;
    physx::PxQuat & (physx::PxQuat::* unused53)(const physx::PxQuat &) = &physx::PxQuat::operator+=;
    physx::PxQuat & (physx::PxQuat::* unused54)(const physx::PxQuat &) = &physx::PxQuat::operator-=;
    physx::PxQuat & (physx::PxQuat::* unused55)(const float) = &physx::PxQuat::operator*=;
    physx::PxQuat (physx::PxQuat::* unused56)(const physx::PxQuat &) const = &physx::PxQuat::operator*;
    physx::PxQuat (physx::PxQuat::* unused57)(const physx::PxQuat &) const = &physx::PxQuat::operator+;
    physx::PxQuat (physx::PxQuat::* unused58)() const = &physx::PxQuat::operator-;
    physx::PxQuat (physx::PxQuat::* unused59)(const physx::PxQuat &) const = &physx::PxQuat::operator-;
    physx::PxQuat (physx::PxQuat::* unused60)(float) const = &physx::PxQuat::operator*;
    physx::PxMat33 & (physx::PxMat33::* unused61)(const physx::PxMat33 &) = &physx::PxMat33::operator=;
    const physx::PxMat33 (*unused62)(const physx::PxVec3 &) = &physx::PxMat33::createDiagonal;
    bool (physx::PxMat33::* unused63)(const physx::PxMat33 &) const = &physx::PxMat33::operator==;
    const physx::PxMat33 (physx::PxMat33::* unused64)() const = &physx::PxMat33::getTranspose;
    const physx::PxMat33 (physx::PxMat33::* unused65)() const = &physx::PxMat33::getInverse;
    float (physx::PxMat33::* unused66)() const = &physx::PxMat33::getDeterminant;
    const physx::PxMat33 (physx::PxMat33::* unused67)() const = &physx::PxMat33::operator-;
    const physx::PxMat33 (physx::PxMat33::* unused68)(const physx::PxMat33 &) const = &physx::PxMat33::operator+;
    const physx::PxMat33 (physx::PxMat33::* unused69)(const physx::PxMat33 &) const = &physx::PxMat33::operator-;
    const physx::PxMat33 (physx::PxMat33::* unused70)(float) const = &physx::PxMat33::operator*;
    const physx::PxVec3 (physx::PxMat33::* unused71)(const physx::PxVec3 &) const = &physx::PxMat33::operator*;
    const physx::PxMat33 (physx::PxMat33::* unused72)(const physx::PxMat33 &) const = &physx::PxMat33::operator*;
    physx::PxMat33 & (physx::PxMat33::* unused73)(const physx::PxMat33 &) = &physx::PxMat33::operator+=;
    physx::PxMat33 & (physx::PxMat33::* unused74)(const physx::PxMat33 &) = &physx::PxMat33::operator-=;
    physx::PxMat33 & (physx::PxMat33::* unused75)(float) = &physx::PxMat33::operator*=;
    physx::PxMat33 & (physx::PxMat33::* unused76)(const physx::PxMat33 &) = &physx::PxMat33::operator*=;
    float (physx::PxMat33::* unused77)(unsigned int, unsigned int) const = &physx::PxMat33::operator();
    float & (physx::PxMat33::* unused78)(unsigned int, unsigned int) = &physx::PxMat33::operator();
    const physx::PxVec3 (physx::PxMat33::* unused79)(const physx::PxVec3 &) const = &physx::PxMat33::transform;
    const physx::PxVec3 (physx::PxMat33::* unused80)(const physx::PxVec3 &) const = &physx::PxMat33::transformTranspose;
    const float * (physx::PxMat33::* unused81)() const = &physx::PxMat33::front;
    physx::PxVec3 & (physx::PxMat33::* unused82)(unsigned int) = &physx::PxMat33::operator[];
    const physx::PxVec3 & (physx::PxMat33::* unused83)(unsigned int) const = &physx::PxMat33::operator[];
    bool (physx::PxPlane::* unused84)(const physx::PxPlane &) const = &physx::PxPlane::operator==;
    float (physx::PxPlane::* unused85)(const physx::PxVec3 &) const = &physx::PxPlane::distance;
    bool (physx::PxPlane::* unused86)(const physx::PxVec3 &) const = &physx::PxPlane::contains;
    physx::PxVec3 (physx::PxPlane::* unused87)(const physx::PxVec3 &) const = &physx::PxPlane::project;
    physx::PxVec3 (physx::PxPlane::* unused88)() const = &physx::PxPlane::pointInPlane;
    void (physx::PxPlane::* unused89)() = &physx::PxPlane::normalize;
    bool (physx::PxTransform::* unused90)(const physx::PxTransform &) const = &physx::PxTransform::operator==;
    physx::PxTransform (physx::PxTransform::* unused91)(const physx::PxTransform &) const = &physx::PxTransform::operator*;
    physx::PxTransform & (physx::PxTransform::* unused92)(physx::PxTransform &) = &physx::PxTransform::operator*=;
    physx::PxTransform (physx::PxTransform::* unused93)() const = &physx::PxTransform::getInverse;
    physx::PxVec3 (physx::PxTransform::* unused94)(const physx::PxVec3 &) const = &physx::PxTransform::transform;
    physx::PxVec3 (physx::PxTransform::* unused95)(const physx::PxVec3 &) const = &physx::PxTransform::transformInv;
    physx::PxVec3 (physx::PxTransform::* unused96)(const physx::PxVec3 &) const = &physx::PxTransform::rotate;
    physx::PxVec3 (physx::PxTransform::* unused97)(const physx::PxVec3 &) const = &physx::PxTransform::rotateInv;
    physx::PxTransform (physx::PxTransform::* unused98)(const physx::PxTransform &) const = &physx::PxTransform::transform;
    bool (physx::PxTransform::* unused99)() const = &physx::PxTransform::isValid;
    bool (physx::PxTransform::* unused100)() const = &physx::PxTransform::isSane;
    bool (physx::PxTransform::* unused101)() const = &physx::PxTransform::isFinite;
    physx::PxTransform (physx::PxTransform::* unused102)(const physx::PxTransform &) const = &physx::PxTransform::transformInv;
    physx::PxPlane (physx::PxTransform::* unused103)(const physx::PxPlane &) const = &physx::PxTransform::transform;
    physx::PxPlane (physx::PxTransform::* unused104)(const physx::PxPlane &) const = &physx::PxTransform::inverseTransform;
    physx::PxTransform (physx::PxTransform::* unused105)() const = &physx::PxTransform::getNormalized;
    void (physx::PxDeserializationContext::* unused106)(const char *&) = &physx::PxDeserializationContext::readName;
    void (physx::PxDeserializationContext::* unused107)(unsigned int) = &physx::PxDeserializationContext::alignExtraData;
    unsigned short (physx::PxBase::* unused108)() const = &physx::PxBase::getConcreteType;
    void (physx::PxBase::* unused109)(physx::PxBaseFlag::Enum, bool) = &physx::PxBase::setBaseFlag;
    void (physx::PxBase::* unused110)(physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short>) = &physx::PxBase::setBaseFlags;
    physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> (physx::PxBase::* unused111)() const = &physx::PxBase::getBaseFlags;
    float (physx::PxSolverBodyData::* unused112)(const physx::PxVec3 &, const physx::PxVec3 &) const = &physx::PxSolverBodyData::projectVelocity;
    float (physx::PxTGSSolverBodyVel::* unused113)(const physx::PxVec3 &, const physx::PxVec3 &) const = &physx::PxTGSSolverBodyVel::projectVelocity;
    float (physx::PxTGSSolverBodyData::* unused114)(const physx::PxVec3 &, const physx::PxVec3 &) const = &physx::PxTGSSolverBodyData::projectVelocity;
    bool (physx::PxContactStreamIterator::* unused115)() const = &physx::PxContactStreamIterator::hasNextPatch;
    unsigned int (physx::PxContactStreamIterator::* unused116)() const = &physx::PxContactStreamIterator::getTotalContactCount;
    unsigned int (physx::PxContactStreamIterator::* unused117)() const = &physx::PxContactStreamIterator::getTotalPatchCount;
    void (physx::PxContactStreamIterator::* unused118)() = &physx::PxContactStreamIterator::nextPatch;
    bool (physx::PxContactStreamIterator::* unused119)() const = &physx::PxContactStreamIterator::hasNextContact;
    void (physx::PxContactStreamIterator::* unused120)() = &physx::PxContactStreamIterator::nextContact;
    const physx::PxVec3 & (physx::PxContactStreamIterator::* unused121)() const = &physx::PxContactStreamIterator::getContactNormal;
    float (physx::PxContactStreamIterator::* unused122)() const = &physx::PxContactStreamIterator::getInvMassScale0;
    float (physx::PxContactStreamIterator::* unused123)() const = &physx::PxContactStreamIterator::getInvMassScale1;
    float (physx::PxContactStreamIterator::* unused124)() const = &physx::PxContactStreamIterator::getInvInertiaScale0;
    float (physx::PxContactStreamIterator::* unused125)() const = &physx::PxContactStreamIterator::getInvInertiaScale1;
    float (physx::PxContactStreamIterator::* unused126)() const = &physx::PxContactStreamIterator::getMaxImpulse;
    const physx::PxVec3 & (physx::PxContactStreamIterator::* unused127)() const = &physx::PxContactStreamIterator::getTargetVel;
    const physx::PxVec3 & (physx::PxContactStreamIterator::* unused128)() const = &physx::PxContactStreamIterator::getContactPoint;
    float (physx::PxContactStreamIterator::* unused129)() const = &physx::PxContactStreamIterator::getSeparation;
    unsigned int (physx::PxContactStreamIterator::* unused130)() const = &physx::PxContactStreamIterator::getFaceIndex0;
    unsigned int (physx::PxContactStreamIterator::* unused131)() const = &physx::PxContactStreamIterator::getFaceIndex1;
    float (physx::PxContactStreamIterator::* unused132)() const = &physx::PxContactStreamIterator::getStaticFriction;
    float (physx::PxContactStreamIterator::* unused133)() const = &physx::PxContactStreamIterator::getDynamicFriction;
    float (physx::PxContactStreamIterator::* unused134)() const = &physx::PxContactStreamIterator::getRestitution;
    unsigned int (physx::PxContactStreamIterator::* unused135)() const = &physx::PxContactStreamIterator::getMaterialFlags;
    unsigned short (physx::PxContactStreamIterator::* unused136)() const = &physx::PxContactStreamIterator::getMaterialIndex0;
    unsigned short (physx::PxContactStreamIterator::* unused137)() const = &physx::PxContactStreamIterator::getMaterialIndex1;
    bool (physx::PxContactStreamIterator::* unused138)(const unsigned int) = &physx::PxContactStreamIterator::advanceToIndex;
    void (physx::Gu::ContactBuffer::* unused139)() = &physx::Gu::ContactBuffer::reset;
    bool (physx::Gu::ContactBuffer::* unused140)(const physx::PxVec3 &, const physx::PxVec3 &, float, unsigned int) = &physx::Gu::ContactBuffer::contact;
    bool (physx::Gu::ContactBuffer::* unused141)(const physx::PxVec3 &, const physx::PxVec3 &, float, unsigned short, unsigned int) = &physx::Gu::ContactBuffer::contact;
    bool (physx::Gu::ContactBuffer::* unused142)(const physx::Gu::ContactPoint &) = &physx::Gu::ContactBuffer::contact;
    physx::Gu::ContactPoint * (physx::Gu::ContactBuffer::* unused143)() = &physx::Gu::ContactBuffer::contact;
    physx::PxGeometryType::Enum (physx::PxGeometry::* unused144)() const = &physx::PxGeometry::getType;
    void (physx::PxCache::* unused145)() = &physx::PxCache::reset;
    void (physx::immediate::PxFeatherstoneArticulationLinkData::* unused146)() = &physx::immediate::PxFeatherstoneArticulationLinkData::initData;
    physx::PxBounds3 (*unused147)() = &physx::PxBounds3::empty;
    physx::PxBounds3 (*unused148)(const physx::PxVec3 &, const physx::PxVec3 &) = &physx::PxBounds3::boundsOfPoints;
    physx::PxBounds3 (*unused149)(const physx::PxVec3 &, const physx::PxVec3 &) = &physx::PxBounds3::centerExtents;
    physx::PxBounds3 (*unused150)(const physx::PxVec3 &, const physx::PxMat33 &, const physx::PxVec3 &) = &physx::PxBounds3::basisExtent;
    physx::PxBounds3 (*unused151)(const physx::PxTransform &, const physx::PxVec3 &) = &physx::PxBounds3::poseExtent;
    physx::PxBounds3 (*unused152)(const physx::PxMat33 &, const physx::PxBounds3 &) = &physx::PxBounds3::transformSafe;
    physx::PxBounds3 (*unused153)(const physx::PxMat33 &, const physx::PxBounds3 &) = &physx::PxBounds3::transformFast;
    physx::PxBounds3 (*unused154)(const physx::PxTransform &, const physx::PxBounds3 &) = &physx::PxBounds3::transformSafe;
    physx::PxBounds3 (*unused155)(const physx::PxTransform &, const physx::PxBounds3 &) = &physx::PxBounds3::transformFast;
    void (physx::PxBounds3::* unused156)() = &physx::PxBounds3::setEmpty;
    void (physx::PxBounds3::* unused157)() = &physx::PxBounds3::setMaximal;
    void (physx::PxBounds3::* unused158)(const physx::PxVec3 &) = &physx::PxBounds3::include;
    void (physx::PxBounds3::* unused159)(const physx::PxBounds3 &) = &physx::PxBounds3::include;
    bool (physx::PxBounds3::* unused160)() const = &physx::PxBounds3::isEmpty;
    bool (physx::PxBounds3::* unused161)(const physx::PxBounds3 &) const = &physx::PxBounds3::intersects;
    bool (physx::PxBounds3::* unused162)(const physx::PxBounds3 &, unsigned int) const = &physx::PxBounds3::intersects1D;
    bool (physx::PxBounds3::* unused163)(const physx::PxVec3 &) const = &physx::PxBounds3::contains;
    bool (physx::PxBounds3::* unused164)(const physx::PxBounds3 &) const = &physx::PxBounds3::isInside;
    physx::PxVec3 (physx::PxBounds3::* unused165)() const = &physx::PxBounds3::getCenter;
    float (physx::PxBounds3::* unused166)(unsigned int) const = &physx::PxBounds3::getCenter;
    float (physx::PxBounds3::* unused167)(unsigned int) const = &physx::PxBounds3::getExtents;
    physx::PxVec3 (physx::PxBounds3::* unused168)() const = &physx::PxBounds3::getDimensions;
    physx::PxVec3 (physx::PxBounds3::* unused169)() const = &physx::PxBounds3::getExtents;
    void (physx::PxBounds3::* unused170)(float) = &physx::PxBounds3::scaleSafe;
    void (physx::PxBounds3::* unused171)(float) = &physx::PxBounds3::scaleFast;
    void (physx::PxBounds3::* unused172)(float) = &physx::PxBounds3::fattenSafe;
    void (physx::PxBounds3::* unused173)(float) = &physx::PxBounds3::fattenFast;
    bool (physx::PxBounds3::* unused174)() const = &physx::PxBounds3::isFinite;
    bool (physx::PxBounds3::* unused175)() const = &physx::PxBounds3::isValid;
    physx::PxVec4 & (physx::PxVec4::* unused176)(const physx::PxVec4 &) = &physx::PxVec4::operator=;
    float & (physx::PxVec4::* unused177)(unsigned int) = &physx::PxVec4::operator[];
    const float & (physx::PxVec4::* unused178)(unsigned int) const = &physx::PxVec4::operator[];
    bool (physx::PxVec4::* unused179)(const physx::PxVec4 &) const = &physx::PxVec4::operator==;
    bool (physx::PxVec4::* unused180)(const physx::PxVec4 &) const = &physx::PxVec4::operator!=;
    bool (physx::PxVec4::* unused181)() const = &physx::PxVec4::isZero;
    bool (physx::PxVec4::* unused182)() const = &physx::PxVec4::isFinite;
    bool (physx::PxVec4::* unused183)() const = &physx::PxVec4::isNormalized;
    float (physx::PxVec4::* unused184)() const = &physx::PxVec4::magnitudeSquared;
    float (physx::PxVec4::* unused185)() const = &physx::PxVec4::magnitude;
    physx::PxVec4 (physx::PxVec4::* unused186)() const = &physx::PxVec4::operator-;
    physx::PxVec4 (physx::PxVec4::* unused187)(const physx::PxVec4 &) const = &physx::PxVec4::operator+;
    physx::PxVec4 (physx::PxVec4::* unused188)(const physx::PxVec4 &) const = &physx::PxVec4::operator-;
    physx::PxVec4 (physx::PxVec4::* unused189)(float) const = &physx::PxVec4::operator*;
    physx::PxVec4 (physx::PxVec4::* unused190)(float) const = &physx::PxVec4::operator/;
    physx::PxVec4 & (physx::PxVec4::* unused191)(const physx::PxVec4 &) = &physx::PxVec4::operator+=;
    physx::PxVec4 & (physx::PxVec4::* unused192)(const physx::PxVec4 &) = &physx::PxVec4::operator-=;
    physx::PxVec4 & (physx::PxVec4::* unused193)(float) = &physx::PxVec4::operator*=;
    physx::PxVec4 & (physx::PxVec4::* unused194)(float) = &physx::PxVec4::operator/=;
    float (physx::PxVec4::* unused195)(const physx::PxVec4 &) const = &physx::PxVec4::dot;
    physx::PxVec4 (physx::PxVec4::* unused196)() const = &physx::PxVec4::getNormalized;
    float (physx::PxVec4::* unused197)() = &physx::PxVec4::normalize;
    physx::PxVec4 (physx::PxVec4::* unused198)(const physx::PxVec4 &) const = &physx::PxVec4::multiply;
    physx::PxVec4 (physx::PxVec4::* unused199)(const physx::PxVec4 &) const = &physx::PxVec4::minimum;
    physx::PxVec4 (physx::PxVec4::* unused200)(const physx::PxVec4 &) const = &physx::PxVec4::maximum;
    physx::PxVec3 (physx::PxVec4::* unused201)() const = &physx::PxVec4::getXYZ;
    void (physx::PxVec4::* unused202)() = &physx::PxVec4::setZero;
    bool (physx::PxMat44::* unused203)(const physx::PxMat44 &) const = &physx::PxMat44::operator==;
    physx::PxMat44 & (physx::PxMat44::* unused204)(const physx::PxMat44 &) = &physx::PxMat44::operator=;
    const physx::PxMat44 (physx::PxMat44::* unused205)() const = &physx::PxMat44::getTranspose;
    const physx::PxMat44 (physx::PxMat44::* unused206)() const = &physx::PxMat44::operator-;
    const physx::PxMat44 (physx::PxMat44::* unused207)(const physx::PxMat44 &) const = &physx::PxMat44::operator+;
    const physx::PxMat44 (physx::PxMat44::* unused208)(const physx::PxMat44 &) const = &physx::PxMat44::operator-;
    const physx::PxMat44 (physx::PxMat44::* unused209)(float) const = &physx::PxMat44::operator*;
    const physx::PxMat44 (physx::PxMat44::* unused210)(const physx::PxMat44 &) const = &physx::PxMat44::operator*;
    physx::PxMat44 & (physx::PxMat44::* unused211)(const physx::PxMat44 &) = &physx::PxMat44::operator+=;
    physx::PxMat44 & (physx::PxMat44::* unused212)(const physx::PxMat44 &) = &physx::PxMat44::operator-=;
    physx::PxMat44 & (physx::PxMat44::* unused213)(float) = &physx::PxMat44::operator*=;
    physx::PxMat44 & (physx::PxMat44::* unused214)(const physx::PxMat44 &) = &physx::PxMat44::operator*=;
    float (physx::PxMat44::* unused215)(unsigned int, unsigned int) const = &physx::PxMat44::operator();
    float & (physx::PxMat44::* unused216)(unsigned int, unsigned int) = &physx::PxMat44::operator();
    const physx::PxVec4 (physx::PxMat44::* unused217)(const physx::PxVec4 &) const = &physx::PxMat44::transform;
    const physx::PxVec3 (physx::PxMat44::* unused218)(const physx::PxVec3 &) const = &physx::PxMat44::transform;
    const physx::PxVec4 (physx::PxMat44::* unused219)(const physx::PxVec4 &) const = &physx::PxMat44::rotate;
    const physx::PxVec3 (physx::PxMat44::* unused220)(const physx::PxVec3 &) const = &physx::PxMat44::rotate;
    const physx::PxVec3 (physx::PxMat44::* unused221)(int) const = &physx::PxMat44::getBasis;
    const physx::PxVec3 (physx::PxMat44::* unused222)() const = &physx::PxMat44::getPosition;
    void (physx::PxMat44::* unused223)(const physx::PxVec3 &) = &physx::PxMat44::setPosition;
    const float * (physx::PxMat44::* unused224)() const = &physx::PxMat44::front;
    physx::PxVec4 & (physx::PxMat44::* unused225)(unsigned int) = &physx::PxMat44::operator[];
    const physx::PxVec4 & (physx::PxMat44::* unused226)(unsigned int) const = &physx::PxMat44::operator[];
    void (physx::PxMat44::* unused227)(const physx::PxVec4 &) = &physx::PxMat44::scale;
    const physx::PxMat44 (physx::PxMat44::* unused228)() const = &physx::PxMat44::inverseRT;
    bool (physx::PxMat44::* unused229)() const = &physx::PxMat44::isFinite;
    physx::PxVec2 & (physx::PxVec2::* unused230)(const physx::PxVec2 &) = &physx::PxVec2::operator=;
    float & (physx::PxVec2::* unused231)(int) = &physx::PxVec2::operator[];
    const float & (physx::PxVec2::* unused232)(int) const = &physx::PxVec2::operator[];
    bool (physx::PxVec2::* unused233)(const physx::PxVec2 &) const = &physx::PxVec2::operator==;
    bool (physx::PxVec2::* unused234)(const physx::PxVec2 &) const = &physx::PxVec2::operator!=;
    bool (physx::PxVec2::* unused235)() const = &physx::PxVec2::isZero;
    bool (physx::PxVec2::* unused236)() const = &physx::PxVec2::isFinite;
    bool (physx::PxVec2::* unused237)() const = &physx::PxVec2::isNormalized;
    float (physx::PxVec2::* unused238)() const = &physx::PxVec2::magnitudeSquared;
    float (physx::PxVec2::* unused239)() const = &physx::PxVec2::magnitude;
    physx::PxVec2 (physx::PxVec2::* unused240)() const = &physx::PxVec2::operator-;
    physx::PxVec2 (physx::PxVec2::* unused241)(const physx::PxVec2 &) const = &physx::PxVec2::operator+;
    physx::PxVec2 (physx::PxVec2::* unused242)(const physx::PxVec2 &) const = &physx::PxVec2::operator-;
    physx::PxVec2 (physx::PxVec2::* unused243)(float) const = &physx::PxVec2::operator*;
    physx::PxVec2 (physx::PxVec2::* unused244)(float) const = &physx::PxVec2::operator/;
    physx::PxVec2 & (physx::PxVec2::* unused245)(const physx::PxVec2 &) = &physx::PxVec2::operator+=;
    physx::PxVec2 & (physx::PxVec2::* unused246)(const physx::PxVec2 &) = &physx::PxVec2::operator-=;
    physx::PxVec2 & (physx::PxVec2::* unused247)(float) = &physx::PxVec2::operator*=;
    physx::PxVec2 & (physx::PxVec2::* unused248)(float) = &physx::PxVec2::operator/=;
    float (physx::PxVec2::* unused249)(const physx::PxVec2 &) const = &physx::PxVec2::dot;
    physx::PxVec2 (physx::PxVec2::* unused250)() const = &physx::PxVec2::getNormalized;
    float (physx::PxVec2::* unused251)() = &physx::PxVec2::normalize;
    physx::PxVec2 (physx::PxVec2::* unused252)(const physx::PxVec2 &) const = &physx::PxVec2::multiply;
    physx::PxVec2 (physx::PxVec2::* unused253)(const physx::PxVec2 &) const = &physx::PxVec2::minimum;
    float (physx::PxVec2::* unused254)() const = &physx::PxVec2::minElement;
    physx::PxVec2 (physx::PxVec2::* unused255)(const physx::PxVec2 &) const = &physx::PxVec2::maximum;
    float (physx::PxVec2::* unused256)() const = &physx::PxVec2::maxElement;
    bool (physx::PxTolerancesScale::* unused257)() const = &physx::PxTolerancesScale::isValid;
    physx::PxTaskManager * (physx::PxBaseTask::* unused258)() const = &physx::PxBaseTask::getTaskManager;
    void (physx::PxBaseTask::* unused259)(unsigned long long) = &physx::PxBaseTask::setContextId;
    unsigned long long (physx::PxBaseTask::* unused260)() const = &physx::PxBaseTask::getContextId;
    void (physx::PxTask::* unused261)(unsigned int) = &physx::PxTask::finishBefore;
    void (physx::PxTask::* unused262)(unsigned int) = &physx::PxTask::startAfter;
    unsigned int (physx::PxTask::* unused263)() const = &physx::PxTask::getTaskID;
    void (physx::PxLightCpuTask::* unused264)(physx::PxTaskManager &, physx::PxBaseTask *) = &physx::PxLightCpuTask::setContinuation;
    void (physx::PxLightCpuTask::* unused265)(physx::PxBaseTask *) = &physx::PxLightCpuTask::setContinuation;
    physx::PxBaseTask * (physx::PxLightCpuTask::* unused266)() const = &physx::PxLightCpuTask::getContinuation;
    const char * (physx::PxAllocInfo::* unused267)() const = &physx::PxAllocInfo::getFileName;
    int (physx::PxAllocInfo::* unused268)() const = &physx::PxAllocInfo::getLine;
    const char * (physx::PxAllocInfo::* unused269)() const = &physx::PxAllocInfo::getAllocName;
    physx::PxAllocId::Enum (physx::PxAllocInfo::* unused270)() const = &physx::PxAllocInfo::getAllocId;
    bool (physx::PxBoxGeometry::* unused271)() const = &physx::PxBoxGeometry::isValid;
    bool (physx::PxCapsuleGeometry::* unused272)() const = &physx::PxCapsuleGeometry::isValid;
    bool (physx::PxMeshScale::* unused273)() const = &physx::PxMeshScale::isIdentity;
    physx::PxMeshScale (physx::PxMeshScale::* unused274)() const = &physx::PxMeshScale::getInverse;
    physx::PxMat33 (physx::PxMeshScale::* unused275)() const = &physx::PxMeshScale::toMat33;
    bool (physx::PxMeshScale::* unused276)() const = &physx::PxMeshScale::hasNegativeDeterminant;
    physx::PxVec3 (physx::PxMeshScale::* unused277)(const physx::PxVec3 &) const = &physx::PxMeshScale::transform;
    bool (physx::PxMeshScale::* unused278)() const = &physx::PxMeshScale::isValidForTriangleMesh;
    bool (physx::PxMeshScale::* unused279)() const = &physx::PxMeshScale::isValidForConvexMesh;
    bool (physx::PxConvexMeshGeometry::* unused280)() const = &physx::PxConvexMeshGeometry::isValid;
    bool (physx::PxSphereGeometry::* unused281)() const = &physx::PxSphereGeometry::isValid;
    bool (physx::PxPlaneGeometry::* unused282)() const = &physx::PxPlaneGeometry::isValid;
    bool (physx::PxTriangleMeshGeometry::* unused283)() const = &physx::PxTriangleMeshGeometry::isValid;
    bool (physx::PxHeightFieldGeometry::* unused284)() const = &physx::PxHeightFieldGeometry::isValid;
    physx::PxGeometryType::Enum (physx::PxGeometryHolder::* unused285)() const = &physx::PxGeometryHolder::getType;
    physx::PxGeometry & (physx::PxGeometryHolder::* unused286)() = &physx::PxGeometryHolder::any;
    const physx::PxGeometry & (physx::PxGeometryHolder::* unused287)() const = &physx::PxGeometryHolder::any;
    physx::PxSphereGeometry & (physx::PxGeometryHolder::* unused288)() = &physx::PxGeometryHolder::sphere;
    const physx::PxSphereGeometry & (physx::PxGeometryHolder::* unused289)() const = &physx::PxGeometryHolder::sphere;
    physx::PxPlaneGeometry & (physx::PxGeometryHolder::* unused290)() = &physx::PxGeometryHolder::plane;
    const physx::PxPlaneGeometry & (physx::PxGeometryHolder::* unused291)() const = &physx::PxGeometryHolder::plane;
    physx::PxCapsuleGeometry & (physx::PxGeometryHolder::* unused292)() = &physx::PxGeometryHolder::capsule;
    const physx::PxCapsuleGeometry & (physx::PxGeometryHolder::* unused293)() const = &physx::PxGeometryHolder::capsule;
    physx::PxBoxGeometry & (physx::PxGeometryHolder::* unused294)() = &physx::PxGeometryHolder::box;
    const physx::PxBoxGeometry & (physx::PxGeometryHolder::* unused295)() const = &physx::PxGeometryHolder::box;
    physx::PxConvexMeshGeometry & (physx::PxGeometryHolder::* unused296)() = &physx::PxGeometryHolder::convexMesh;
    const physx::PxConvexMeshGeometry & (physx::PxGeometryHolder::* unused297)() const = &physx::PxGeometryHolder::convexMesh;
    physx::PxTriangleMeshGeometry & (physx::PxGeometryHolder::* unused298)() = &physx::PxGeometryHolder::triangleMesh;
    const physx::PxTriangleMeshGeometry & (physx::PxGeometryHolder::* unused299)() const = &physx::PxGeometryHolder::triangleMesh;
    physx::PxHeightFieldGeometry & (physx::PxGeometryHolder::* unused300)() = &physx::PxGeometryHolder::heightField;
    const physx::PxHeightFieldGeometry & (physx::PxGeometryHolder::* unused301)() const = &physx::PxGeometryHolder::heightField;
    void (physx::PxGeometryHolder::* unused302)(const physx::PxGeometry &) = &physx::PxGeometryHolder::storeAny;
    bool (physx::PxLocationHit::* unused303)() const = &physx::PxLocationHit::hadInitialOverlap;
    unsigned char (physx::PxHeightFieldSample::* unused304)() const = &physx::PxHeightFieldSample::tessFlag;
    void (physx::PxHeightFieldSample::* unused305)() = &physx::PxHeightFieldSample::setTessFlag;
    void (physx::PxHeightFieldSample::* unused306)() = &physx::PxHeightFieldSample::clearTessFlag;
    void (physx::PxHeightFieldDesc::* unused307)() = &physx::PxHeightFieldDesc::setToDefault;
    bool (physx::PxHeightFieldDesc::* unused308)() const = &physx::PxHeightFieldDesc::isValid;
    void (physx::PxSimpleTriangleMesh::* unused309)() = &physx::PxSimpleTriangleMesh::setToDefault;
    bool (physx::PxSimpleTriangleMesh::* unused310)() const = &physx::PxSimpleTriangleMesh::isValid;
    void (physx::PxTriangle::* unused311)(const physx::PxTriangle &) = &physx::PxTriangle::operator=;
    void (physx::PxTriangle::* unused312)(physx::PxVec3 &) const = &physx::PxTriangle::normal;
    void (physx::PxTriangle::* unused313)(physx::PxVec3 &) const = &physx::PxTriangle::denormalizedNormal;
    float (physx::PxTriangle::* unused314)() const = &physx::PxTriangle::area;
    physx::PxVec3 (physx::PxTriangle::* unused315)(float, float) const = &physx::PxTriangle::pointFromUV;
    void (physx::PxFilterData::* unused316)() = &physx::PxFilterData::setToDefault;
    void (physx::PxFilterData::* unused317)(const physx::PxFilterData &) = &physx::PxFilterData::operator=;
    bool (physx::PxFilterData::* unused318)(const physx::PxFilterData &) const = &physx::PxFilterData::operator==;
    bool (physx::PxFilterData::* unused319)(const physx::PxFilterData &) const = &physx::PxFilterData::operator!=;
    unsigned int (physx::PxBatchQueryMemory::* unused320)() const = &physx::PxBatchQueryMemory::getMaxRaycastsPerExecute;
    unsigned int (physx::PxBatchQueryMemory::* unused321)() const = &physx::PxBatchQueryMemory::getMaxSweepsPerExecute;
    unsigned int (physx::PxBatchQueryMemory::* unused322)() const = &physx::PxBatchQueryMemory::getMaxOverlapsPerExecute;
    bool (physx::PxBatchQueryDesc::* unused323)() const = &physx::PxBatchQueryDesc::isValid;
    const physx::PxVec3 & (physx::PxContactSet::* unused324)(unsigned int) const = &physx::PxContactSet::getPoint;
    void (physx::PxContactSet::* unused325)(unsigned int, const physx::PxVec3 &) = &physx::PxContactSet::setPoint;
    const physx::PxVec3 & (physx::PxContactSet::* unused326)(unsigned int) const = &physx::PxContactSet::getNormal;
    void (physx::PxContactSet::* unused327)(unsigned int, const physx::PxVec3 &) = &physx::PxContactSet::setNormal;
    float (physx::PxContactSet::* unused328)(unsigned int) const = &physx::PxContactSet::getSeparation;
    void (physx::PxContactSet::* unused329)(unsigned int, float) = &physx::PxContactSet::setSeparation;
    const physx::PxVec3 & (physx::PxContactSet::* unused330)(unsigned int) const = &physx::PxContactSet::getTargetVelocity;
    void (physx::PxContactSet::* unused331)(unsigned int, const physx::PxVec3 &) = &physx::PxContactSet::setTargetVelocity;
    unsigned int (physx::PxContactSet::* unused332)(unsigned int) const = &physx::PxContactSet::getInternalFaceIndex0;
    unsigned int (physx::PxContactSet::* unused333)(unsigned int) const = &physx::PxContactSet::getInternalFaceIndex1;
    float (physx::PxContactSet::* unused334)(unsigned int) const = &physx::PxContactSet::getMaxImpulse;
    void (physx::PxContactSet::* unused335)(unsigned int, float) = &physx::PxContactSet::setMaxImpulse;
    float (physx::PxContactSet::* unused336)(unsigned int) const = &physx::PxContactSet::getRestitution;
    void (physx::PxContactSet::* unused337)(unsigned int, float) = &physx::PxContactSet::setRestitution;
    float (physx::PxContactSet::* unused338)(unsigned int) const = &physx::PxContactSet::getStaticFriction;
    void (physx::PxContactSet::* unused339)(unsigned int, float) = &physx::PxContactSet::setStaticFriction;
    float (physx::PxContactSet::* unused340)(unsigned int) const = &physx::PxContactSet::getDynamicFriction;
    void (physx::PxContactSet::* unused341)(unsigned int, float) = &physx::PxContactSet::setDynamicFriction;
    void (physx::PxContactSet::* unused342)(unsigned int) = &physx::PxContactSet::ignore;
    unsigned int (physx::PxContactSet::* unused343)() const = &physx::PxContactSet::size;
    float (physx::PxContactSet::* unused344)() const = &physx::PxContactSet::getInvMassScale0;
    float (physx::PxContactSet::* unused345)() const = &physx::PxContactSet::getInvMassScale1;
    float (physx::PxContactSet::* unused346)() const = &physx::PxContactSet::getInvInertiaScale0;
    float (physx::PxContactSet::* unused347)() const = &physx::PxContactSet::getInvInertiaScale1;
    void (physx::PxContactSet::* unused348)(const float) = &physx::PxContactSet::setInvMassScale0;
    void (physx::PxContactSet::* unused349)(const float) = &physx::PxContactSet::setInvMassScale1;
    void (physx::PxContactSet::* unused350)(const float) = &physx::PxContactSet::setInvInertiaScale0;
    void (physx::PxContactSet::* unused351)(const float) = &physx::PxContactSet::setInvInertiaScale1;
    physx::PxShape * (physx::PxPhysics::* unused352)(const physx::PxGeometry &, const physx::PxMaterial &, bool, physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>) = &physx::PxPhysics::createShape;
    void (physx::PxSceneLimits::* unused353)() = &physx::PxSceneLimits::setToDefault;
    bool (physx::PxSceneLimits::* unused354)() const = &physx::PxSceneLimits::isValid;
    void (physx::PxSceneDesc::* unused355)(const physx::PxTolerancesScale &) = &physx::PxSceneDesc::setToDefault;
    bool (physx::PxSceneDesc::* unused356)() const = &physx::PxSceneDesc::isValid;
    const physx::PxTolerancesScale & (physx::PxSceneDesc::* unused357)() const = &physx::PxSceneDesc::getTolerancesScale;
    unsigned int (physx::PxSimulationStatistics::* unused358)() const = &physx::PxSimulationStatistics::getNbBroadPhaseAdds;
    unsigned int (physx::PxSimulationStatistics::* unused359)() const = &physx::PxSimulationStatistics::getNbBroadPhaseRemoves;
    unsigned int (physx::PxSimulationStatistics::* unused360)(physx::PxSimulationStatistics::RbPairStatsType, physx::PxGeometryType::Enum, physx::PxGeometryType::Enum) const = &physx::PxSimulationStatistics::getRbPairStats;
    bool (physx::PxContactPairExtraDataIterator::* unused361)() = &physx::PxContactPairExtraDataIterator::nextItemSet;
    unsigned int (physx::PxContactPair::* unused362)(physx::PxContactPairPoint *, unsigned int) const = &physx::PxContactPair::extractContacts;
    void (physx::PxContactPair::* unused363)(physx::PxContactPair *, unsigned char *) const = &physx::PxContactPair::bufferContacts;
    const unsigned int * (physx::PxContactPair::* unused364)() const = &physx::PxContactPair::getInternalFaceIndices;
    bool (physx::PxExtendedVec3::* unused365)() const = &physx::PxExtendedVec3::isZero;
    double (physx::PxExtendedVec3::* unused366)(const physx::PxVec3 &) const = &physx::PxExtendedVec3::dot;
    double (physx::PxExtendedVec3::* unused367)(const physx::PxExtendedVec3 &) const = &physx::PxExtendedVec3::distanceSquared;
    double (physx::PxExtendedVec3::* unused368)() const = &physx::PxExtendedVec3::magnitudeSquared;
    double (physx::PxExtendedVec3::* unused369)() const = &physx::PxExtendedVec3::magnitude;
    double (physx::PxExtendedVec3::* unused370)() = &physx::PxExtendedVec3::normalize;
    bool (physx::PxExtendedVec3::* unused371)() const = &physx::PxExtendedVec3::isFinite;
    void (physx::PxExtendedVec3::* unused372)(const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::maximum;
    void (physx::PxExtendedVec3::* unused373)(const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::minimum;
    void (physx::PxExtendedVec3::* unused374)(double, double, double) = &physx::PxExtendedVec3::set;
    void (physx::PxExtendedVec3::* unused375)() = &physx::PxExtendedVec3::setPlusInfinity;
    void (physx::PxExtendedVec3::* unused376)() = &physx::PxExtendedVec3::setMinusInfinity;
    void (physx::PxExtendedVec3::* unused377)(const physx::PxExtendedVec3 &, const physx::PxVec3 &) = &physx::PxExtendedVec3::cross;
    void (physx::PxExtendedVec3::* unused378)(const physx::PxExtendedVec3 &, const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::cross;
    physx::PxExtendedVec3 (physx::PxExtendedVec3::* unused379)(const physx::PxExtendedVec3 &) const = &physx::PxExtendedVec3::cross;
    void (physx::PxExtendedVec3::* unused380)(const physx::PxVec3 &, const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::cross;
    physx::PxExtendedVec3 (physx::PxExtendedVec3::* unused381)() const = &physx::PxExtendedVec3::operator-;
    physx::PxExtendedVec3 & (physx::PxExtendedVec3::* unused382)(const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::operator+=;
    physx::PxExtendedVec3 & (physx::PxExtendedVec3::* unused383)(const physx::PxExtendedVec3 &) = &physx::PxExtendedVec3::operator-=;
    physx::PxExtendedVec3 & (physx::PxExtendedVec3::* unused384)(const physx::PxVec3 &) = &physx::PxExtendedVec3::operator+=;
    physx::PxExtendedVec3 & (physx::PxExtendedVec3::* unused385)(const physx::PxVec3 &) = &physx::PxExtendedVec3::operator-=;
    physx::PxExtendedVec3 & (physx::PxExtendedVec3::* unused386)(const float &) = &physx::PxExtendedVec3::operator*=;
    physx::PxExtendedVec3 (physx::PxExtendedVec3::* unused387)(const physx::PxExtendedVec3 &) const = &physx::PxExtendedVec3::operator+;
    physx::PxVec3 (physx::PxExtendedVec3::* unused388)(const physx::PxExtendedVec3 &) const = &physx::PxExtendedVec3::operator-;
    double & (physx::PxExtendedVec3::* unused389)(int) = &physx::PxExtendedVec3::operator[];
    double (physx::PxExtendedVec3::* unused390)(int) const = &physx::PxExtendedVec3::operator[];
    physx::PxGeometryType::Enum (physx::PxObstacle::* unused391)() const = &physx::PxObstacle::getType;
    physx::PxControllerShapeType::Enum (physx::PxControllerDesc::* unused392)() const = &physx::PxControllerDesc::getType;
    physx::PxBoxControllerDesc & (physx::PxBoxControllerDesc::* unused393)(const physx::PxBoxControllerDesc &) = &physx::PxBoxControllerDesc::operator=;
    physx::PxCapsuleControllerDesc & (physx::PxCapsuleControllerDesc::* unused394)(const physx::PxCapsuleControllerDesc &) = &physx::PxCapsuleControllerDesc::operator=;
    void (physx::PxConvexMeshDesc::* unused395)() = &physx::PxConvexMeshDesc::setToDefault;
    bool (physx::PxConvexMeshDesc::* unused396)() const = &physx::PxConvexMeshDesc::isValid;
    void (physx::PxTriangleMeshDesc::* unused397)() = &physx::PxTriangleMeshDesc::setToDefault;
    bool (physx::PxTriangleMeshDesc::* unused398)() const = &physx::PxTriangleMeshDesc::isValid;
    void (physx::PxBVH33MidphaseDesc::* unused399)() = &physx::PxBVH33MidphaseDesc::setToDefault;
    bool (physx::PxBVH33MidphaseDesc::* unused400)() const = &physx::PxBVH33MidphaseDesc::isValid;
    void (physx::PxBVH34MidphaseDesc::* unused401)() = &physx::PxBVH34MidphaseDesc::setToDefault;
    bool (physx::PxBVH34MidphaseDesc::* unused402)() const = &physx::PxBVH34MidphaseDesc::isValid;
    physx::PxMeshMidPhase::Enum (physx::PxMidphaseDesc::* unused403)() const = &physx::PxMidphaseDesc::getType;
    void (physx::PxMidphaseDesc::* unused404)(physx::PxMeshMidPhase::Enum) = &physx::PxMidphaseDesc::setToDefault;
    bool (physx::PxMidphaseDesc::* unused405)() const = &physx::PxMidphaseDesc::isValid;
    physx::PxMidphaseDesc & (physx::PxMidphaseDesc::* unused406)(physx::PxMeshMidPhase::Enum) = &physx::PxMidphaseDesc::operator=;
    void (physx::PxBVHStructureDesc::* unused407)() = &physx::PxBVHStructureDesc::setToDefault;
    bool (physx::PxBVHStructureDesc::* unused408)() const = &physx::PxBVHStructureDesc::isValid;
    void (physx::PxJacobianRow::* unused409)(const float) = &physx::PxJacobianRow::operator*=;
    physx::PxJacobianRow (physx::PxJacobianRow::* unused410)(const float) const = &physx::PxJacobianRow::operator*;
    bool (physx::PxJointLimitParameters::* unused411)() const = &physx::PxJointLimitParameters::isValid;
    bool (physx::PxJointLimitParameters::* unused412)() const = &physx::PxJointLimitParameters::isSoft;
    bool (physx::PxJointLinearLimit::* unused413)() const = &physx::PxJointLinearLimit::isValid;
    bool (physx::PxJointLinearLimitPair::* unused414)() const = &physx::PxJointLinearLimitPair::isValid;
    bool (physx::PxJointAngularLimitPair::* unused415)() const = &physx::PxJointAngularLimitPair::isValid;
    bool (physx::PxJointLimitCone::* unused416)() const = &physx::PxJointLimitCone::isValid;
    bool (physx::PxJointLimitPyramid::* unused417)() const = &physx::PxJointLimitPyramid::isValid;
    bool (physx::PxD6JointDrive::* unused418)() const = &physx::PxD6JointDrive::isValid;
    float (physx::PxD6Joint::* unused419)() const = &physx::PxD6Joint::getTwist;
    void (physx::PxD6Joint::* unused420)(const physx::PxJointLinearLimit &) = &physx::PxD6Joint::setLinearLimit;
    physx::PxJointLinearLimit (physx::PxD6Joint::* unused421)() const = &physx::PxD6Joint::getLinearLimit;
    physx::PxShape * (*unused422)(physx::PxRigidActor &, const physx::PxGeometry &, physx::PxMaterial *const *, unsigned short, physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>) = &physx::PxRigidActorExt::createExclusiveShape;
    physx::PxShape * (*unused423)(physx::PxRigidActor &, const physx::PxGeometry &, const physx::PxMaterial &, physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>) = &physx::PxRigidActorExt::createExclusiveShape;
    physx::PxMassProperties (physx::PxMassProperties::* unused424)(const float) const = &physx::PxMassProperties::operator*;
    void (physx::PxMassProperties::* unused425)(const physx::PxVec3 &) = &physx::PxMassProperties::translate;
    physx::PxVec3 (*unused426)(const physx::PxMat33 &, physx::PxQuat &) = &physx::PxMassProperties::getMassSpaceInertia;
    physx::PxMat33 (*unused427)(const physx::PxMat33 &, const float, const physx::PxVec3 &) = &physx::PxMassProperties::translateInertia;
    physx::PxMat33 (*unused428)(const physx::PxMat33 &, const physx::PxQuat &) = &physx::PxMassProperties::rotateInertia;
    physx::PxMat33 (*unused429)(const physx::PxMat33 &, const physx::PxQuat &, const physx::PxVec3 &) = &physx::PxMassProperties::scaleInertia;
    physx::PxMassProperties (*unused430)(const physx::PxMassProperties *, const physx::PxTransform *, const unsigned int) = &physx::PxMassProperties::sum;
    physx::PxTransform (*unused431)(const physx::PxShape &, const physx::PxRigidActor &) = &physx::PxShapeExt::getGlobalPose;
    unsigned int (*unused432)(const physx::PxShape &, const physx::PxRigidActor &, const physx::PxVec3 &, const physx::PxVec3 &, float, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>, unsigned int, physx::PxRaycastHit *) = &physx::PxShapeExt::raycast;
    bool (*unused433)(const physx::PxShape &, const physx::PxRigidActor &, const physx::PxGeometry &, const physx::PxTransform &) = &physx::PxShapeExt::overlap;
    bool (*unused434)(const physx::PxShape &, const physx::PxRigidActor &, const physx::PxVec3 &, const float, const physx::PxGeometry &, const physx::PxTransform &, physx::PxSweepHit &, physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>) = &physx::PxShapeExt::sweep;
    physx::PxBounds3 (*unused435)(const physx::PxShape &, const physx::PxRigidActor &, float) = &physx::PxShapeExt::getWorldBounds;
    const unsigned int * (physx::PxMeshOverlapUtil::* unused436)() const = &physx::PxMeshOverlapUtil::getResults;
    unsigned int (physx::PxMeshOverlapUtil::* unused437)() const = &physx::PxMeshOverlapUtil::getNbResults;
    bool (physx::PxRepXObject::* unused438)() const = &physx::PxRepXObject::isValid;
    float (physx::PxVehicleEngineData::* unused439)() const = &physx::PxVehicleEngineData::getRecipMOI;
    float (physx::PxVehicleEngineData::* unused440)() const = &physx::PxVehicleEngineData::getRecipMaxOmega;
    float (physx::PxVehicleGearsData::* unused441)(physx::PxVehicleGearsData::Enum) const = &physx::PxVehicleGearsData::getGearRatio;
    void (physx::PxVehicleGearsData::* unused442)(physx::PxVehicleGearsData::Enum, float) = &physx::PxVehicleGearsData::setGearRatio;
    void (physx::PxVehicleAutoBoxData::* unused443)(const float) = &physx::PxVehicleAutoBoxData::setLatency;
    float (physx::PxVehicleAutoBoxData::* unused444)() const = &physx::PxVehicleAutoBoxData::getLatency;
    float (physx::PxVehicleAutoBoxData::* unused445)(physx::PxVehicleGearsData::Enum) const = &physx::PxVehicleAutoBoxData::getUpRatios;
    void (physx::PxVehicleAutoBoxData::* unused446)(physx::PxVehicleGearsData::Enum, float) = &physx::PxVehicleAutoBoxData::setUpRatios;
    float (physx::PxVehicleAutoBoxData::* unused447)(physx::PxVehicleGearsData::Enum) const = &physx::PxVehicleAutoBoxData::getDownRatios;
    void (physx::PxVehicleAutoBoxData::* unused448)(physx::PxVehicleGearsData::Enum, float) = &physx::PxVehicleAutoBoxData::setDownRatios;
    float (physx::PxVehicleTireLoadFilterData::* unused449)() const = &physx::PxVehicleTireLoadFilterData::getDenominator;
    float (physx::PxVehicleWheelData::* unused450)() const = &physx::PxVehicleWheelData::getRecipRadius;
    float (physx::PxVehicleWheelData::* unused451)() const = &physx::PxVehicleWheelData::getRecipMOI;
    float (physx::PxVehicleSuspensionData::* unused452)() const = &physx::PxVehicleSuspensionData::getRecipMaxCompression;
    float (physx::PxVehicleSuspensionData::* unused453)() const = &physx::PxVehicleSuspensionData::getRecipMaxDroop;
    void (physx::PxVehicleSuspensionData::* unused454)(const float) = &physx::PxVehicleSuspensionData::setMassAndPreserveNaturalFrequency;
    float (physx::PxVehicleTireData::* unused455)() const = &physx::PxVehicleTireData::getRecipLongitudinalStiffnessPerUnitGravity;
    float (physx::PxVehicleTireData::* unused456)() const = &physx::PxVehicleTireData::getFrictionVsSlipGraphRecipx1Minusx0;
    float (physx::PxVehicleTireData::* unused457)() const = &physx::PxVehicleTireData::getFrictionVsSlipGraphRecipx2Minusx1;
    unsigned int (physx::PxVehicleWheelsSimData::* unused458)() const = &physx::PxVehicleWheelsSimData::getNbWheels;
    unsigned int (physx::PxVehicleWheelsSimData::* unused459)() const = &physx::PxVehicleWheelsSimData::getNbAntiRollBars;
    const physx::PxVehicleTireLoadFilterData & (physx::PxVehicleWheelsSimData::* unused460)() const = &physx::PxVehicleWheelsSimData::getTireLoadFilterData;
    unsigned int (physx::PxVehicleWheelsSimData::* unused461)() const = &physx::PxVehicleWheelsSimData::getNbWheels4;
    unsigned int (physx::PxVehicleWheelsSimData::* unused462)() const = &physx::PxVehicleWheelsSimData::getNbSuspensionData;
    unsigned int (physx::PxVehicleWheelsSimData::* unused463)() const = &physx::PxVehicleWheelsSimData::getNbWheelData;
    unsigned int (physx::PxVehicleWheelsSimData::* unused464)() const = &physx::PxVehicleWheelsSimData::getNbSuspTravelDirection;
    unsigned int (physx::PxVehicleWheelsSimData::* unused465)() const = &physx::PxVehicleWheelsSimData::getNbTireData;
    unsigned int (physx::PxVehicleWheelsSimData::* unused466)() const = &physx::PxVehicleWheelsSimData::getNbSuspForceAppPointOffset;
    unsigned int (physx::PxVehicleWheelsSimData::* unused467)() const = &physx::PxVehicleWheelsSimData::getNbTireForceAppPointOffset;
    unsigned int (physx::PxVehicleWheelsSimData::* unused468)() const = &physx::PxVehicleWheelsSimData::getNbWheelCentreOffset;
    unsigned int (physx::PxVehicleWheelsSimData::* unused469)() const = &physx::PxVehicleWheelsSimData::getNbWheelShapeMapping;
    unsigned int (physx::PxVehicleWheelsSimData::* unused470)() const = &physx::PxVehicleWheelsSimData::getNbSceneQueryFilterData;
    float (physx::PxVehicleWheelsSimData::* unused471)() const = &physx::PxVehicleWheelsSimData::getMinLongSlipDenominator;
    void (physx::PxVehicleWheelsSimData::* unused472)(const float) = &physx::PxVehicleWheelsSimData::setThresholdLongSpeed;
    float (physx::PxVehicleWheelsSimData::* unused473)() const = &physx::PxVehicleWheelsSimData::getThresholdLongSpeed;
    void (physx::PxVehicleWheelsSimData::* unused474)(const unsigned int) = &physx::PxVehicleWheelsSimData::setLowForwardSpeedSubStepCount;
    unsigned int (physx::PxVehicleWheelsSimData::* unused475)() const = &physx::PxVehicleWheelsSimData::getLowForwardSpeedSubStepCount;
    void (physx::PxVehicleWheelsSimData::* unused476)(const unsigned int) = &physx::PxVehicleWheelsSimData::setHighForwardSpeedSubStepCount;
    unsigned int (physx::PxVehicleWheelsSimData::* unused477)() const = &physx::PxVehicleWheelsSimData::getHighForwardSpeedSubStepCount;
    void (physx::PxVehicleWheelsSimData::* unused478)(const unsigned int, const bool) = &physx::PxVehicleWheelsSimData::setWheelEnabledState;
    bool (physx::PxVehicleWheelsSimData::* unused479)(const unsigned int) const = &physx::PxVehicleWheelsSimData::getWheelEnabledState;
    unsigned int (physx::PxVehicleWheelsSimData::* unused480)() const = &physx::PxVehicleWheelsSimData::getNbWheelEnabledState;
    unsigned int (physx::PxVehicleWheelsSimData::* unused481)() const = &physx::PxVehicleWheelsSimData::getNbAntiRollBars4;
    unsigned int (physx::PxVehicleWheelsSimData::* unused482)() const = &physx::PxVehicleWheelsSimData::getNbAntiRollBarData;
    unsigned int (physx::PxVehicleWheelsDynData::* unused483)() const = &physx::PxVehicleWheelsDynData::getNbWheelRotationSpeed;
    unsigned int (physx::PxVehicleWheelsDynData::* unused484)() const = &physx::PxVehicleWheelsDynData::getNbWheelRotationAngle;
    physx::PxVehicleWheels4DynData * (physx::PxVehicleWheelsDynData::* unused485)() const = &physx::PxVehicleWheelsDynData::getWheel4DynData;
    unsigned int (physx::PxVehicleWheelsDynData::* unused486)() const = &physx::PxVehicleWheelsDynData::getNbConstraints;
    unsigned int (physx::PxVehicleWheels::* unused487)() const = &physx::PxVehicleWheels::getVehicleType;
    physx::PxRigidDynamic * (physx::PxVehicleWheels::* unused488)() = &physx::PxVehicleWheels::getRigidDynamicActor;
    const physx::PxRigidDynamic * (physx::PxVehicleWheels::* unused489)() const = &physx::PxVehicleWheels::getRigidDynamicActor;
    unsigned int (physx::PxVehicleWheels::* unused490)() const = &physx::PxVehicleWheels::getNbNonDrivenWheels;
    const physx::PxVehicleEngineData & (physx::PxVehicleDriveSimData::* unused491)() const = &physx::PxVehicleDriveSimData::getEngineData;
    const physx::PxVehicleGearsData & (physx::PxVehicleDriveSimData::* unused492)() const = &physx::PxVehicleDriveSimData::getGearsData;
    const physx::PxVehicleClutchData & (physx::PxVehicleDriveSimData::* unused493)() const = &physx::PxVehicleDriveSimData::getClutchData;
    const physx::PxVehicleAutoBoxData & (physx::PxVehicleDriveSimData::* unused494)() const = &physx::PxVehicleDriveSimData::getAutoBoxData;
    void (physx::PxVehicleDriveDynData::* unused495)(const bool) = &physx::PxVehicleDriveDynData::setGearUp;
    void (physx::PxVehicleDriveDynData::* unused496)(const bool) = &physx::PxVehicleDriveDynData::setGearDown;
    bool (physx::PxVehicleDriveDynData::* unused497)() const = &physx::PxVehicleDriveDynData::getGearUp;
    bool (physx::PxVehicleDriveDynData::* unused498)() const = &physx::PxVehicleDriveDynData::getGearDown;
    void (physx::PxVehicleDriveDynData::* unused499)(const bool) = &physx::PxVehicleDriveDynData::setUseAutoGears;
    bool (physx::PxVehicleDriveDynData::* unused500)() const = &physx::PxVehicleDriveDynData::getUseAutoGears;
    void (physx::PxVehicleDriveDynData::* unused501)() = &physx::PxVehicleDriveDynData::toggleAutoGears;
    void (physx::PxVehicleDriveDynData::* unused502)(unsigned int) = &physx::PxVehicleDriveDynData::setCurrentGear;
    unsigned int (physx::PxVehicleDriveDynData::* unused503)() const = &physx::PxVehicleDriveDynData::getCurrentGear;
    void (physx::PxVehicleDriveDynData::* unused504)(unsigned int) = &physx::PxVehicleDriveDynData::setTargetGear;
    unsigned int (physx::PxVehicleDriveDynData::* unused505)() const = &physx::PxVehicleDriveDynData::getTargetGear;
    void (physx::PxVehicleDriveDynData::* unused506)(const unsigned int) = &physx::PxVehicleDriveDynData::startGearChange;
    void (physx::PxVehicleDriveDynData::* unused507)(const unsigned int) = &physx::PxVehicleDriveDynData::forceGearChange;
    void (physx::PxVehicleDriveDynData::* unused508)(const float) = &physx::PxVehicleDriveDynData::setEngineRotationSpeed;
    float (physx::PxVehicleDriveDynData::* unused509)() const = &physx::PxVehicleDriveDynData::getEngineRotationSpeed;
    float (physx::PxVehicleDriveDynData::* unused510)() const = &physx::PxVehicleDriveDynData::getGearSwitchTime;
    float (physx::PxVehicleDriveDynData::* unused511)() const = &physx::PxVehicleDriveDynData::getAutoBoxSwitchTime;
    unsigned int (physx::PxVehicleDriveDynData::* unused512)() const = &physx::PxVehicleDriveDynData::getNbAnalogInput;
    void (physx::PxVehicleDriveDynData::* unused513)(const unsigned int) = &physx::PxVehicleDriveDynData::setGearChange;
    unsigned int (physx::PxVehicleDriveDynData::* unused514)() const = &physx::PxVehicleDriveDynData::getGearChange;
    void (physx::PxVehicleDriveDynData::* unused515)(const float) = &physx::PxVehicleDriveDynData::setGearSwitchTime;
    void (physx::PxVehicleDriveDynData::* unused516)(const float) = &physx::PxVehicleDriveDynData::setAutoBoxSwitchTime;
    const physx::PxVehicleDifferential4WData & (physx::PxVehicleDriveSimData4W::* unused517)() const = &physx::PxVehicleDriveSimData4W::getDiffData;
    const physx::PxVehicleAckermannGeometryData & (physx::PxVehicleDriveSimData4W::* unused518)() const = &physx::PxVehicleDriveSimData4W::getAckermannGeometryData;
    void (physx::PxVehicleDriveTank::* unused519)(const physx::PxVehicleDriveTankControlModel::Enum) = &physx::PxVehicleDriveTank::setDriveModel;
    physx::PxVehicleDriveTankControlModel::Enum (physx::PxVehicleDriveTank::* unused520)() const = &physx::PxVehicleDriveTank::getDriveModel;
    unsigned int (physx::PxVehicleDrivableSurfaceToTireFrictionPairs::* unused521)() const = &physx::PxVehicleDrivableSurfaceToTireFrictionPairs::getMaxNbSurfaceTypes;
    unsigned int (physx::PxVehicleDrivableSurfaceToTireFrictionPairs::* unused522)() const = &physx::PxVehicleDrivableSurfaceToTireFrictionPairs::getMaxNbTireTypes;
    const physx::PxVehicleDifferentialNWData & (physx::PxVehicleDriveSimDataNW::* unused523)() const = &physx::PxVehicleDriveSimDataNW::getDiffData;
    void (physx::PxVehicleDrive4WRawInputData::* unused524)(const bool) = &physx::PxVehicleDrive4WRawInputData::setDigitalAccel;
    void (physx::PxVehicleDrive4WRawInputData::* unused525)(const bool) = &physx::PxVehicleDrive4WRawInputData::setDigitalBrake;
    void (physx::PxVehicleDrive4WRawInputData::* unused526)(const bool) = &physx::PxVehicleDrive4WRawInputData::setDigitalHandbrake;
    void (physx::PxVehicleDrive4WRawInputData::* unused527)(const bool) = &physx::PxVehicleDrive4WRawInputData::setDigitalSteerLeft;
    void (physx::PxVehicleDrive4WRawInputData::* unused528)(const bool) = &physx::PxVehicleDrive4WRawInputData::setDigitalSteerRight;
    bool (physx::PxVehicleDrive4WRawInputData::* unused529)() const = &physx::PxVehicleDrive4WRawInputData::getDigitalAccel;
    bool (physx::PxVehicleDrive4WRawInputData::* unused530)() const = &physx::PxVehicleDrive4WRawInputData::getDigitalBrake;
    bool (physx::PxVehicleDrive4WRawInputData::* unused531)() const = &physx::PxVehicleDrive4WRawInputData::getDigitalHandbrake;
    bool (physx::PxVehicleDrive4WRawInputData::* unused532)() const = &physx::PxVehicleDrive4WRawInputData::getDigitalSteerLeft;
    bool (physx::PxVehicleDrive4WRawInputData::* unused533)() const = &physx::PxVehicleDrive4WRawInputData::getDigitalSteerRight;
    void (physx::PxVehicleDrive4WRawInputData::* unused534)(const float) = &physx::PxVehicleDrive4WRawInputData::setAnalogAccel;
    void (physx::PxVehicleDrive4WRawInputData::* unused535)(const float) = &physx::PxVehicleDrive4WRawInputData::setAnalogBrake;
    void (physx::PxVehicleDrive4WRawInputData::* unused536)(const float) = &physx::PxVehicleDrive4WRawInputData::setAnalogHandbrake;
    void (physx::PxVehicleDrive4WRawInputData::* unused537)(const float) = &physx::PxVehicleDrive4WRawInputData::setAnalogSteer;
    float (physx::PxVehicleDrive4WRawInputData::* unused538)() const = &physx::PxVehicleDrive4WRawInputData::getAnalogAccel;
    float (physx::PxVehicleDrive4WRawInputData::* unused539)() const = &physx::PxVehicleDrive4WRawInputData::getAnalogBrake;
    float (physx::PxVehicleDrive4WRawInputData::* unused540)() const = &physx::PxVehicleDrive4WRawInputData::getAnalogHandbrake;
    float (physx::PxVehicleDrive4WRawInputData::* unused541)() const = &physx::PxVehicleDrive4WRawInputData::getAnalogSteer;
    void (physx::PxVehicleDrive4WRawInputData::* unused542)(const bool) = &physx::PxVehicleDrive4WRawInputData::setGearUp;
    void (physx::PxVehicleDrive4WRawInputData::* unused543)(const bool) = &physx::PxVehicleDrive4WRawInputData::setGearDown;
    bool (physx::PxVehicleDrive4WRawInputData::* unused544)() const = &physx::PxVehicleDrive4WRawInputData::getGearUp;
    bool (physx::PxVehicleDrive4WRawInputData::* unused545)() const = &physx::PxVehicleDrive4WRawInputData::getGearDown;
    physx::PxVehicleDriveTankControlModel::Enum (physx::PxVehicleDriveTankRawInputData::* unused546)() const = &physx::PxVehicleDriveTankRawInputData::getDriveModel;
    void (physx::PxVehicleDriveTankRawInputData::* unused547)(const bool) = &physx::PxVehicleDriveTankRawInputData::setDigitalAccel;
    void (physx::PxVehicleDriveTankRawInputData::* unused548)(const bool) = &physx::PxVehicleDriveTankRawInputData::setDigitalLeftThrust;
    void (physx::PxVehicleDriveTankRawInputData::* unused549)(const bool) = &physx::PxVehicleDriveTankRawInputData::setDigitalRightThrust;
    void (physx::PxVehicleDriveTankRawInputData::* unused550)(const bool) = &physx::PxVehicleDriveTankRawInputData::setDigitalLeftBrake;
    void (physx::PxVehicleDriveTankRawInputData::* unused551)(const bool) = &physx::PxVehicleDriveTankRawInputData::setDigitalRightBrake;
    bool (physx::PxVehicleDriveTankRawInputData::* unused552)() const = &physx::PxVehicleDriveTankRawInputData::getDigitalAccel;
    bool (physx::PxVehicleDriveTankRawInputData::* unused553)() const = &physx::PxVehicleDriveTankRawInputData::getDigitalLeftThrust;
    bool (physx::PxVehicleDriveTankRawInputData::* unused554)() const = &physx::PxVehicleDriveTankRawInputData::getDigitalRightThrust;
    bool (physx::PxVehicleDriveTankRawInputData::* unused555)() const = &physx::PxVehicleDriveTankRawInputData::getDigitalLeftBrake;
    bool (physx::PxVehicleDriveTankRawInputData::* unused556)() const = &physx::PxVehicleDriveTankRawInputData::getDigitalRightBrake;
    void (physx::PxVehicleDriveTankRawInputData::* unused557)(const float) = &physx::PxVehicleDriveTankRawInputData::setAnalogAccel;
    void (physx::PxVehicleDriveTankRawInputData::* unused558)(const float) = &physx::PxVehicleDriveTankRawInputData::setAnalogLeftThrust;
    void (physx::PxVehicleDriveTankRawInputData::* unused559)(const float) = &physx::PxVehicleDriveTankRawInputData::setAnalogRightThrust;
    void (physx::PxVehicleDriveTankRawInputData::* unused560)(const float) = &physx::PxVehicleDriveTankRawInputData::setAnalogLeftBrake;
    void (physx::PxVehicleDriveTankRawInputData::* unused561)(const float) = &physx::PxVehicleDriveTankRawInputData::setAnalogRightBrake;
    float (physx::PxVehicleDriveTankRawInputData::* unused562)() const = &physx::PxVehicleDriveTankRawInputData::getAnalogAccel;
    float (physx::PxVehicleDriveTankRawInputData::* unused563)() const = &physx::PxVehicleDriveTankRawInputData::getAnalogLeftThrust;
    float (physx::PxVehicleDriveTankRawInputData::* unused564)() const = &physx::PxVehicleDriveTankRawInputData::getAnalogRightThrust;
    float (physx::PxVehicleDriveTankRawInputData::* unused565)() const = &physx::PxVehicleDriveTankRawInputData::getAnalogLeftBrake;
    float (physx::PxVehicleDriveTankRawInputData::* unused566)() const = &physx::PxVehicleDriveTankRawInputData::getAnalogRightBrake;
    void (physx::PxVehicleDriveTankRawInputData::* unused567)(const bool) = &physx::PxVehicleDriveTankRawInputData::setGearUp;
    void (physx::PxVehicleDriveTankRawInputData::* unused568)(const bool) = &physx::PxVehicleDriveTankRawInputData::setGearDown;
    bool (physx::PxVehicleDriveTankRawInputData::* unused569)() const = &physx::PxVehicleDriveTankRawInputData::getGearUp;
    bool (physx::PxVehicleDriveTankRawInputData::* unused570)() const = &physx::PxVehicleDriveTankRawInputData::getGearDown;
    const physx::PxVec3 & (physx::PxVehicleGraph::* unused571)() const = &physx::PxVehicleGraph::getBackgroundColor;
    float (physx::PxVehicleGraph::* unused572)() const = &physx::PxVehicleGraph::getBackgroundAlpha;
    void (physx::PxVehicleGraph::* unused573)(float &, float &, float &, float &) const = &physx::PxVehicleGraph::getBackgroundCoords;
    const physx::PxVehicleGraph & (physx::PxVehicleTelemetryData::* unused574)() const = &physx::PxVehicleTelemetryData::getEngineGraph;
    unsigned int (physx::PxVehicleTelemetryData::* unused575)() const = &physx::PxVehicleTelemetryData::getNbWheelGraphs;
    const physx::PxVehicleGraph & (physx::PxVehicleTelemetryData::* unused576)(const unsigned int) const = &physx::PxVehicleTelemetryData::getWheelGraph;
    const physx::PxVec3 * (physx::PxVehicleTelemetryData::* unused577)() const = &physx::PxVehicleTelemetryData::getTireforceAppPoints;
    const physx::PxVec3 * (physx::PxVehicleTelemetryData::* unused578)() const = &physx::PxVehicleTelemetryData::getSuspforceAppPoints;
    unsigned int (physx::PxVehicleNoDrive::* unused579)() const = &physx::PxVehicleNoDrive::getNbSteerAngle;
    unsigned int (physx::PxVehicleNoDrive::* unused580)() const = &physx::PxVehicleNoDrive::getNbDriveTorque;
    unsigned int (physx::PxVehicleNoDrive::* unused581)() const = &physx::PxVehicleNoDrive::getNbBrakeTorque;
    bool (physx::general_PxIOStream2::PxFileBuf::* unused582)() const = &physx::general_PxIOStream2::PxFileBuf::isOpen;
    void (physx::general_PxIOStream2::PxFileBuf::* unused583)(physx::general_PxIOStream2::PxFileBuf::EndianMode) = &physx::general_PxIOStream2::PxFileBuf::setEndianMode;
    physx::general_PxIOStream2::PxFileBuf::EndianMode (physx::general_PxIOStream2::PxFileBuf::* unused584)() const = &physx::general_PxIOStream2::PxFileBuf::getEndianMode;
    void (physx::general_PxIOStream2::PxFileBuf::* unused585)() = &physx::general_PxIOStream2::PxFileBuf::release;
    bool (*unused586)() = &physx::general_PxIOStream2::PxFileBuf::isBigEndian;
    void (physx::general_PxIOStream2::PxFileBuf::* unused587)(void *) const = &physx::general_PxIOStream2::PxFileBuf::swap2Bytes;
    void (physx::general_PxIOStream2::PxFileBuf::* unused588)(void *) const = &physx::general_PxIOStream2::PxFileBuf::swap4Bytes;
    void (physx::general_PxIOStream2::PxFileBuf::* unused589)(void *) const = &physx::general_PxIOStream2::PxFileBuf::swap8Bytes;
    void (physx::general_PxIOStream2::PxFileBuf::* unused590)(unsigned int) = &physx::general_PxIOStream2::PxFileBuf::storeDword;
    void (physx::general_PxIOStream2::PxFileBuf::* unused591)(float) = &physx::general_PxIOStream2::PxFileBuf::storeFloat;
    void (physx::general_PxIOStream2::PxFileBuf::* unused592)(double) = &physx::general_PxIOStream2::PxFileBuf::storeDouble;
    void (physx::general_PxIOStream2::PxFileBuf::* unused593)(unsigned char) = &physx::general_PxIOStream2::PxFileBuf::storeByte;
    void (physx::general_PxIOStream2::PxFileBuf::* unused594)(unsigned short) = &physx::general_PxIOStream2::PxFileBuf::storeWord;
    unsigned char (physx::general_PxIOStream2::PxFileBuf::* unused595)() = &physx::general_PxIOStream2::PxFileBuf::readByte;
    unsigned short (physx::general_PxIOStream2::PxFileBuf::* unused596)() = &physx::general_PxIOStream2::PxFileBuf::readWord;
    unsigned int (physx::general_PxIOStream2::PxFileBuf::* unused597)() = &physx::general_PxIOStream2::PxFileBuf::readDword;
    float (physx::general_PxIOStream2::PxFileBuf::* unused598)() = &physx::general_PxIOStream2::PxFileBuf::readFloat;
    double (physx::general_PxIOStream2::PxFileBuf::* unused599)() = &physx::general_PxIOStream2::PxFileBuf::readDouble;
    float (*unused600)(float) = &physx::PxAbs;
    bool (*unused601)(float, float, float) = &physx::PxEquals;
    double (*unused602)(double) = &physx::PxAbs;
    int (*unused603)(int) = &physx::PxAbs;
    float (*unused604)(float) = &physx::PxSqrt;
    double (*unused605)(double) = &physx::PxSqrt;
    float (*unused606)(float) = &physx::PxRecipSqrt;
    double (*unused607)(double) = &physx::PxRecipSqrt;
    float (*unused608)(float) = &physx::PxSin;
    double (*unused609)(double) = &physx::PxSin;
    float (*unused610)(float) = &physx::PxCos;
    double (*unused611)(double) = &physx::PxCos;
    float (*unused612)(float) = &physx::PxTan;
    double (*unused613)(double) = &physx::PxTan;
    float (*unused614)(float) = &physx::PxAsin;
    double (*unused615)(double) = &physx::PxAsin;
    float (*unused616)(float) = &physx::PxAcos;
    double (*unused617)(double) = &physx::PxAcos;
    float (*unused618)(float) = &physx::PxAtan;
    double (*unused619)(double) = &physx::PxAtan;
    float (*unused620)(float, float) = &physx::PxAtan2;
    double (*unused621)(double, double) = &physx::PxAtan2;
    bool (*unused622)(float) = &physx::PxIsFinite;
    bool (*unused623)(double) = &physx::PxIsFinite;
    float (*unused624)(float) = &physx::PxFloor;
    float (*unused625)(float) = &physx::PxExp;
    float (*unused626)(float) = &physx::PxCeil;
    float (*unused627)(float) = &physx::PxSign;
    float (*unused628)(float, float) = &physx::PxPow;
    float (*unused629)(float) = &physx::PxLog;
    physx::PxFlags<physx::PxArticulationAxis::Enum, unsigned char> (*unused630)(physx::PxArticulationAxis::Enum, physx::PxArticulationAxis::Enum) = &physx::operator|;
    physx::PxFlags<physx::PxArticulationAxis::Enum, unsigned char> (*unused631)(physx::PxArticulationAxis::Enum, physx::PxArticulationAxis::Enum) = &physx::operator&;
    physx::PxFlags<physx::PxArticulationAxis::Enum, unsigned char> (*unused632)(physx::PxArticulationAxis::Enum) = &physx::operator~;
    physx::PxPlane (*unused633)(const physx::PxTransform &) = &physx::PxPlaneEquationFromTransform;
    void * (*unused634)(void *, unsigned int) = &physx::PxMemZero;
    void * (*unused635)(void *, int, unsigned int) = &physx::PxMemSet;
    void * (*unused636)(void *, const void *, unsigned int) = &physx::PxMemCopy;
    void * (*unused637)(void *, const void *, unsigned int) = &physx::PxMemMove;
    physx::PxFilterObjectType::Enum (*unused638)(unsigned int) = &physx::PxGetFilterObjectType;
    bool (*unused639)(unsigned int) = &physx::PxFilterObjectIsKinematic;
    bool (*unused640)(unsigned int) = &physx::PxFilterObjectIsTrigger;
    physx::PxPhysics * (*unused641)(unsigned int, physx::PxFoundation &, const physx::PxTolerancesScale &, bool, physx::PxPvd *) = &PxCreatePhysics;
    physx::PxVec3 (*unused642)(const physx::PxExtendedVec3 &) = &physx::toVec3;
    void * (*unused643)(unsigned long long) = &physx::platformAlignedAlloc;
    void (*unused644)(void *) = &physx::platformAlignedFree;
    physx::PxRepXObject (*unused645)(const physx::PxBase *, const unsigned long long) = &PxCreateRepXObject;
}

namespace ____BiohazrdInlineExportHelpers
{
    struct __BiohazrdNewHelper { };
}

inline void* operator new(size_t, ____BiohazrdInlineExportHelpers::__BiohazrdNewHelper, void* _this) { return _this; }
inline void operator delete(void*, ____BiohazrdInlineExportHelpers::__BiohazrdNewHelper, void*) { }

#pragma warning(disable: 4190) // C-linkage function returning C++ type
extern "C" namespace ____BiohazrdInlineExportHelpers
{
    __declspec(dllexport) physx::PxVec3* __InlineHelper0(physx::PxVec3* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec3(); }

    __declspec(dllexport) physx::PxVec3* __InlineHelper1(physx::PxVec3* _this, physx::PxZERO _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec3(_0); }

    __declspec(dllexport) physx::PxVec3* __InlineHelper2(physx::PxVec3* _this, float _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec3(_0); }

    __declspec(dllexport) physx::PxVec3* __InlineHelper3(physx::PxVec3* _this, float _0, float _1, float _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec3(_0, _1, _2); }

    __declspec(dllexport) physx::PxVec3* __InlineHelper4(physx::PxVec3* _this, const physx::PxVec3 &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec3(_0); }

    __declspec(dllexport) physx::PxQuat* __InlineHelper5(physx::PxQuat* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQuat(); }

    __declspec(dllexport) physx::PxQuat* __InlineHelper6(physx::PxQuat* _this, physx::PxIDENTITY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQuat(_0); }

    __declspec(dllexport) physx::PxQuat* __InlineHelper7(physx::PxQuat* _this, float _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQuat(_0); }

    __declspec(dllexport) physx::PxQuat* __InlineHelper8(physx::PxQuat* _this, float _0, float _1, float _2, float _3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQuat(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxQuat* __InlineHelper9(physx::PxQuat* _this, float _0, const physx::PxVec3 &_1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQuat(_0, _1); }

    __declspec(dllexport) physx::PxQuat* __InlineHelper10(physx::PxQuat* _this, const physx::PxQuat &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQuat(_0); }

    __declspec(dllexport) physx::PxQuat* __InlineHelper11(physx::PxQuat* _this, const physx::PxMat33 &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQuat(_0); }

    __declspec(dllexport) physx::PxMat33* __InlineHelper12(physx::PxMat33* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat33(); }

    __declspec(dllexport) physx::PxMat33* __InlineHelper13(physx::PxMat33* _this, physx::PxIDENTITY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat33(_0); }

    __declspec(dllexport) physx::PxMat33* __InlineHelper14(physx::PxMat33* _this, physx::PxZERO _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat33(_0); }

    __declspec(dllexport) physx::PxMat33* __InlineHelper15(physx::PxMat33* _this, const physx::PxVec3 &_0, const physx::PxVec3 &_1, const physx::PxVec3 &_2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat33(_0, _1, _2); }

    __declspec(dllexport) physx::PxMat33* __InlineHelper16(physx::PxMat33* _this, float _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat33(_0); }

    __declspec(dllexport) physx::PxMat33* __InlineHelper17(physx::PxMat33* _this, float _0[])
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat33(_0); }

    __declspec(dllexport) physx::PxMat33* __InlineHelper18(physx::PxMat33* _this, const physx::PxQuat &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat33(_0); }

    __declspec(dllexport) physx::PxMat33* __InlineHelper19(physx::PxMat33* _this, const physx::PxMat33 &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat33(_0); }

    __declspec(dllexport) physx::PxPlane* __InlineHelper20(physx::PxPlane* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxPlane(); }

    __declspec(dllexport) physx::PxPlane* __InlineHelper21(physx::PxPlane* _this, float _0, float _1, float _2, float _3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxPlane(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxPlane* __InlineHelper22(physx::PxPlane* _this, const physx::PxVec3 &_0, float _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxPlane(_0, _1); }

    __declspec(dllexport) physx::PxPlane* __InlineHelper23(physx::PxPlane* _this, const physx::PxVec3 &_0, const physx::PxVec3 &_1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxPlane(_0, _1); }

    __declspec(dllexport) physx::PxPlane* __InlineHelper24(physx::PxPlane* _this, const physx::PxVec3 &_0, const physx::PxVec3 &_1, const physx::PxVec3 &_2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxPlane(_0, _1, _2); }

    __declspec(dllexport) physx::PxTransform* __InlineHelper25(physx::PxTransform* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTransform(); }

    __declspec(dllexport) physx::PxTransform* __InlineHelper26(physx::PxTransform* _this, const physx::PxVec3 &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTransform(_0); }

    __declspec(dllexport) physx::PxTransform* __InlineHelper27(physx::PxTransform* _this, physx::PxIDENTITY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTransform(_0); }

    __declspec(dllexport) physx::PxTransform* __InlineHelper28(physx::PxTransform* _this, const physx::PxQuat &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTransform(_0); }

    __declspec(dllexport) physx::PxTransform* __InlineHelper29(physx::PxTransform* _this, float _0, float _1, float _2, physx::PxQuat _3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTransform(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxTransform* __InlineHelper30(physx::PxTransform* _this, const physx::PxVec3 &_0, const physx::PxQuat &_1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTransform(_0, _1); }

    __declspec(dllexport) physx::PxTransform* __InlineHelper31(physx::PxTransform* _this, const physx::PxMat44 &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTransform(_0); }

    __declspec(dllexport) physx::Px1DConstraintFlag* __InlineHelper32(physx::Px1DConstraintFlag* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::Px1DConstraintFlag(); }

    __declspec(dllexport) physx::PxConstraintInvMassScale* __InlineHelper33(physx::PxConstraintInvMassScale* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxConstraintInvMassScale(); }

    __declspec(dllexport) physx::PxConstraintInvMassScale* __InlineHelper34(physx::PxConstraintInvMassScale* _this, float _0, float _1, float _2, float _3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxConstraintInvMassScale(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxSolverBody* __InlineHelper35(physx::PxSolverBody* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSolverBody(); }

    __declspec(dllexport) physx::PxContactStreamIterator* __InlineHelper36(physx::PxContactStreamIterator* _this, const unsigned char *_0, const unsigned char *_1, const unsigned int *_2, unsigned int _3, unsigned int _4)
    { return new (__BiohazrdNewHelper(), _this) physx::PxContactStreamIterator(_0, _1, _2, _3, _4); }

    __declspec(dllexport) physx::Gu::NarrowPhaseParams* __InlineHelper37(physx::Gu::NarrowPhaseParams* _this, float _0, float _1, float _2)
    { return new (__BiohazrdNewHelper(), _this) physx::Gu::NarrowPhaseParams(_0, _1, _2); }

    __declspec(dllexport) physx::PxCache* __InlineHelper38(physx::PxCache* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxCache(); }

    __declspec(dllexport) physx::PxArticulationCache* __InlineHelper39(physx::PxArticulationCache* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxArticulationCache(); }

    __declspec(dllexport) physx::immediate::PxFeatherstoneArticulationLinkData* __InlineHelper40(physx::immediate::PxFeatherstoneArticulationLinkData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::immediate::PxFeatherstoneArticulationLinkData(); }

    __declspec(dllexport) physx::PxBounds3* __InlineHelper41(physx::PxBounds3* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBounds3(); }

    __declspec(dllexport) physx::PxBounds3* __InlineHelper42(physx::PxBounds3* _this, const physx::PxVec3 &_0, const physx::PxVec3 &_1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBounds3(_0, _1); }

    __declspec(dllexport) physx::PxVec4* __InlineHelper43(physx::PxVec4* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec4(); }

    __declspec(dllexport) physx::PxVec4* __InlineHelper44(physx::PxVec4* _this, physx::PxZERO _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec4(_0); }

    __declspec(dllexport) physx::PxVec4* __InlineHelper45(physx::PxVec4* _this, float _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec4(_0); }

    __declspec(dllexport) physx::PxVec4* __InlineHelper46(physx::PxVec4* _this, float _0, float _1, float _2, float _3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec4(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxVec4* __InlineHelper47(physx::PxVec4* _this, const physx::PxVec3 &_0, float _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec4(_0, _1); }

    __declspec(dllexport) physx::PxVec4* __InlineHelper48(physx::PxVec4* _this, float const _0[])
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec4(_0); }

    __declspec(dllexport) physx::PxVec4* __InlineHelper49(physx::PxVec4* _this, const physx::PxVec4 &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec4(_0); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper50(physx::PxMat44* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper51(physx::PxMat44* _this, physx::PxIDENTITY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper52(physx::PxMat44* _this, physx::PxZERO _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper53(physx::PxMat44* _this, const physx::PxVec4 &_0, const physx::PxVec4 &_1, const physx::PxVec4 &_2, const physx::PxVec4 &_3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper54(physx::PxMat44* _this, float _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper55(physx::PxMat44* _this, const physx::PxVec3 &_0, const physx::PxVec3 &_1, const physx::PxVec3 &_2, const physx::PxVec3 &_3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper56(physx::PxMat44* _this, float _0[])
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper57(physx::PxMat44* _this, const physx::PxQuat &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper58(physx::PxMat44* _this, const physx::PxVec4 &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper59(physx::PxMat44* _this, const physx::PxMat33 &_0, const physx::PxVec3 &_1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0, _1); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper60(physx::PxMat44* _this, const physx::PxTransform &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0); }

    __declspec(dllexport) physx::PxMat44* __InlineHelper61(physx::PxMat44* _this, const physx::PxMat44 &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMat44(_0); }

    __declspec(dllexport) physx::PxVec2* __InlineHelper62(physx::PxVec2* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec2(); }

    __declspec(dllexport) physx::PxVec2* __InlineHelper63(physx::PxVec2* _this, physx::PxZERO _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec2(_0); }

    __declspec(dllexport) physx::PxVec2* __InlineHelper64(physx::PxVec2* _this, float _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec2(_0); }

    __declspec(dllexport) physx::PxVec2* __InlineHelper65(physx::PxVec2* _this, float _0, float _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec2(_0, _1); }

    __declspec(dllexport) physx::PxVec2* __InlineHelper66(physx::PxVec2* _this, const physx::PxVec2 &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVec2(_0); }

    __declspec(dllexport) physx::PxStridedData* __InlineHelper67(physx::PxStridedData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxStridedData(); }

    __declspec(dllexport) physx::PxBoundedData* __InlineHelper68(physx::PxBoundedData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBoundedData(); }

    __declspec(dllexport) physx::PxDebugPoint* __InlineHelper69(physx::PxDebugPoint* _this, const physx::PxVec3 &_0, const unsigned int &_1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxDebugPoint(_0, _1); }

    __declspec(dllexport) physx::PxDebugLine* __InlineHelper70(physx::PxDebugLine* _this, const physx::PxVec3 &_0, const physx::PxVec3 &_1, const unsigned int &_2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxDebugLine(_0, _1, _2); }

    __declspec(dllexport) physx::PxDebugTriangle* __InlineHelper71(physx::PxDebugTriangle* _this, const physx::PxVec3 &_0, const physx::PxVec3 &_1, const physx::PxVec3 &_2, const unsigned int &_3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxDebugTriangle(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxDebugText* __InlineHelper72(physx::PxDebugText* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxDebugText(); }

    __declspec(dllexport) physx::PxDebugText* __InlineHelper73(physx::PxDebugText* _this, const physx::PxVec3 &_0, const float &_1, const unsigned int &_2, const char *_3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxDebugText(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxTolerancesScale* __InlineHelper74(physx::PxTolerancesScale* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTolerancesScale(); }

    __declspec(dllexport) physx::PxAllocInfo* __InlineHelper75(physx::PxAllocInfo* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxAllocInfo(); }

    __declspec(dllexport) physx::PxAllocInfo* __InlineHelper76(physx::PxAllocInfo* _this, const char *_0, int _1, const char *_2, physx::PxAllocId::Enum _3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxAllocInfo(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxCudaBufferType* __InlineHelper77(physx::PxCudaBufferType* _this, const physx::PxCudaBufferType &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxCudaBufferType(_0); }

    __declspec(dllexport) physx::PxCudaBufferType* __InlineHelper78(physx::PxCudaBufferType* _this, physx::PxCudaBufferMemorySpace::Enum _0, physx::PxCudaBufferFlags::Enum _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxCudaBufferType(_0, _1); }

    __declspec(dllexport) physx::PxCudaContextManagerDesc* __InlineHelper79(physx::PxCudaContextManagerDesc* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxCudaContextManagerDesc(); }

    __declspec(dllexport) physx::PxScopedCudaLock* __InlineHelper80(physx::PxScopedCudaLock* _this, physx::PxCudaContextManager &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxScopedCudaLock(_0); }

    __declspec(dllexport) void __InlineHelper81(physx::PxScopedCudaLock* _this)
    { _this->~PxScopedCudaLock(); }

    __declspec(dllexport) physx::PxBoxGeometry* __InlineHelper82(physx::PxBoxGeometry* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBoxGeometry(); }

    __declspec(dllexport) physx::PxBoxGeometry* __InlineHelper83(physx::PxBoxGeometry* _this, float _0, float _1, float _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBoxGeometry(_0, _1, _2); }

    __declspec(dllexport) physx::PxBoxGeometry* __InlineHelper84(physx::PxBoxGeometry* _this, physx::PxVec3 _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBoxGeometry(_0); }

    __declspec(dllexport) physx::PxCapsuleGeometry* __InlineHelper85(physx::PxCapsuleGeometry* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxCapsuleGeometry(); }

    __declspec(dllexport) physx::PxCapsuleGeometry* __InlineHelper86(physx::PxCapsuleGeometry* _this, float _0, float _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxCapsuleGeometry(_0, _1); }

    __declspec(dllexport) physx::PxMeshScale* __InlineHelper87(physx::PxMeshScale* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMeshScale(); }

    __declspec(dllexport) physx::PxMeshScale* __InlineHelper88(physx::PxMeshScale* _this, float _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMeshScale(_0); }

    __declspec(dllexport) physx::PxMeshScale* __InlineHelper89(physx::PxMeshScale* _this, const physx::PxVec3 &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMeshScale(_0); }

    __declspec(dllexport) physx::PxMeshScale* __InlineHelper90(physx::PxMeshScale* _this, const physx::PxVec3 &_0, const physx::PxQuat &_1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMeshScale(_0, _1); }

    __declspec(dllexport) physx::PxConvexMeshGeometry* __InlineHelper91(physx::PxConvexMeshGeometry* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxConvexMeshGeometry(); }

    __declspec(dllexport) physx::PxConvexMeshGeometry* __InlineHelper92(physx::PxConvexMeshGeometry* _this, physx::PxConvexMesh *_0, const physx::PxMeshScale &_1, physx::PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char> _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxConvexMeshGeometry(_0, _1, _2); }

    __declspec(dllexport) physx::PxSphereGeometry* __InlineHelper93(physx::PxSphereGeometry* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSphereGeometry(); }

    __declspec(dllexport) physx::PxSphereGeometry* __InlineHelper94(physx::PxSphereGeometry* _this, float _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSphereGeometry(_0); }

    __declspec(dllexport) physx::PxPlaneGeometry* __InlineHelper95(physx::PxPlaneGeometry* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxPlaneGeometry(); }

    __declspec(dllexport) physx::PxTriangleMeshGeometry* __InlineHelper96(physx::PxTriangleMeshGeometry* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTriangleMeshGeometry(); }

    __declspec(dllexport) physx::PxTriangleMeshGeometry* __InlineHelper97(physx::PxTriangleMeshGeometry* _this, physx::PxTriangleMesh *_0, const physx::PxMeshScale &_1, physx::PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char> _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTriangleMeshGeometry(_0, _1, _2); }

    __declspec(dllexport) physx::PxHeightFieldGeometry* __InlineHelper98(physx::PxHeightFieldGeometry* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxHeightFieldGeometry(); }

    __declspec(dllexport) physx::PxHeightFieldGeometry* __InlineHelper99(physx::PxHeightFieldGeometry* _this, physx::PxHeightField *_0, physx::PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char> _1, float _2, float _3, float _4)
    { return new (__BiohazrdNewHelper(), _this) physx::PxHeightFieldGeometry(_0, _1, _2, _3, _4); }

    __declspec(dllexport) physx::PxGeometryHolder* __InlineHelper100(physx::PxGeometryHolder* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxGeometryHolder(); }

    __declspec(dllexport) physx::PxGeometryHolder* __InlineHelper101(physx::PxGeometryHolder* _this, const physx::PxGeometry &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxGeometryHolder(_0); }

    __declspec(dllexport) physx::PxActorShape* __InlineHelper102(physx::PxActorShape* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxActorShape(); }

    __declspec(dllexport) physx::PxActorShape* __InlineHelper103(physx::PxActorShape* _this, physx::PxRigidActor *_0, physx::PxShape *_1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxActorShape(_0, _1); }

    __declspec(dllexport) physx::PxQueryHit* __InlineHelper104(physx::PxQueryHit* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQueryHit(); }

    __declspec(dllexport) physx::PxLocationHit* __InlineHelper105(physx::PxLocationHit* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxLocationHit(); }

    __declspec(dllexport) physx::PxRaycastHit* __InlineHelper106(physx::PxRaycastHit* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxRaycastHit(); }

    __declspec(dllexport) physx::PxSweepHit* __InlineHelper107(physx::PxSweepHit* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSweepHit(); }

    __declspec(dllexport) physx::PxHeightFieldDesc* __InlineHelper108(physx::PxHeightFieldDesc* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxHeightFieldDesc(); }

    __declspec(dllexport) physx::PxSimpleTriangleMesh* __InlineHelper109(physx::PxSimpleTriangleMesh* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSimpleTriangleMesh(); }

    __declspec(dllexport) physx::PxTriangle* __InlineHelper110(physx::PxTriangle* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTriangle(); }

    __declspec(dllexport) physx::PxTriangle* __InlineHelper111(physx::PxTriangle* _this, const physx::PxVec3 &_0, const physx::PxVec3 &_1, const physx::PxVec3 &_2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTriangle(_0, _1, _2); }

    __declspec(dllexport) physx::PxTriangle* __InlineHelper112(physx::PxTriangle* _this, const physx::PxTriangle &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTriangle(_0); }

    __declspec(dllexport) void __InlineHelper113(physx::PxTriangle* _this)
    { _this->~PxTriangle(); }

    __declspec(dllexport) physx::PxFilterData* __InlineHelper114(physx::PxFilterData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxFilterData(_0); }

    __declspec(dllexport) physx::PxFilterData* __InlineHelper115(physx::PxFilterData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxFilterData(); }

    __declspec(dllexport) physx::PxFilterData* __InlineHelper116(physx::PxFilterData* _this, const physx::PxFilterData &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxFilterData(_0); }

    __declspec(dllexport) physx::PxFilterData* __InlineHelper117(physx::PxFilterData* _this, unsigned int _0, unsigned int _1, unsigned int _2, unsigned int _3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxFilterData(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxQueryFilterData* __InlineHelper118(physx::PxQueryFilterData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQueryFilterData(); }

    __declspec(dllexport) physx::PxQueryFilterData* __InlineHelper119(physx::PxQueryFilterData* _this, const physx::PxFilterData &_0, physx::PxFlags<physx::PxQueryFlag::Enum, unsigned short> _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQueryFilterData(_0, _1); }

    __declspec(dllexport) physx::PxQueryFilterData* __InlineHelper120(physx::PxQueryFilterData* _this, physx::PxFlags<physx::PxQueryFlag::Enum, unsigned short> _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQueryFilterData(_0); }

    __declspec(dllexport) physx::PxBatchQueryMemory* __InlineHelper121(physx::PxBatchQueryMemory* _this, unsigned int _0, unsigned int _1, unsigned int _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBatchQueryMemory(_0, _1, _2); }

    __declspec(dllexport) physx::PxBatchQueryDesc* __InlineHelper122(physx::PxBatchQueryDesc* _this, unsigned int _0, unsigned int _1, unsigned int _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBatchQueryDesc(_0, _1, _2); }

    __declspec(dllexport) physx::PxSceneLimits* __InlineHelper123(physx::PxSceneLimits* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSceneLimits(); }

    __declspec(dllexport) physx::PxgDynamicsMemoryConfig* __InlineHelper124(physx::PxgDynamicsMemoryConfig* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxgDynamicsMemoryConfig(); }

    __declspec(dllexport) physx::PxSceneDesc* __InlineHelper125(physx::PxSceneDesc* _this, const physx::PxTolerancesScale &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSceneDesc(_0); }

    __declspec(dllexport) physx::PxSimulationStatistics* __InlineHelper126(physx::PxSimulationStatistics* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSimulationStatistics(); }

    __declspec(dllexport) physx::PxDominanceGroupPair* __InlineHelper127(physx::PxDominanceGroupPair* _this, unsigned char _0, unsigned char _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxDominanceGroupPair(_0, _1); }

    __declspec(dllexport) physx::PxQueryCache* __InlineHelper128(physx::PxQueryCache* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQueryCache(); }

    __declspec(dllexport) physx::PxQueryCache* __InlineHelper129(physx::PxQueryCache* _this, physx::PxShape *_0, unsigned int _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxQueryCache(_0, _1); }

    __declspec(dllexport) physx::PxSceneReadLock* __InlineHelper130(physx::PxSceneReadLock* _this, physx::PxScene &_0, const char *_1, unsigned int _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSceneReadLock(_0, _1, _2); }

    __declspec(dllexport) void __InlineHelper131(physx::PxSceneReadLock* _this)
    { _this->~PxSceneReadLock(); }

    __declspec(dllexport) physx::PxSceneWriteLock* __InlineHelper132(physx::PxSceneWriteLock* _this, physx::PxScene &_0, const char *_1, unsigned int _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSceneWriteLock(_0, _1, _2); }

    __declspec(dllexport) void __InlineHelper133(physx::PxSceneWriteLock* _this)
    { _this->~PxSceneWriteLock(); }

    __declspec(dllexport) physx::PxContactPairExtraDataItem* __InlineHelper134(physx::PxContactPairExtraDataItem* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxContactPairExtraDataItem(); }

    __declspec(dllexport) physx::PxContactPairVelocity* __InlineHelper135(physx::PxContactPairVelocity* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxContactPairVelocity(); }

    __declspec(dllexport) physx::PxContactPairPose* __InlineHelper136(physx::PxContactPairPose* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxContactPairPose(); }

    __declspec(dllexport) physx::PxContactPairIndex* __InlineHelper137(physx::PxContactPairIndex* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxContactPairIndex(); }

    __declspec(dllexport) physx::PxContactPairExtraDataIterator* __InlineHelper138(physx::PxContactPairExtraDataIterator* _this, const unsigned char *_0, unsigned int _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxContactPairExtraDataIterator(_0, _1); }

    __declspec(dllexport) physx::PxContactPairHeader* __InlineHelper139(physx::PxContactPairHeader* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxContactPairHeader(); }

    __declspec(dllexport) physx::PxContactPair* __InlineHelper140(physx::PxContactPair* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxContactPair(); }

    __declspec(dllexport) physx::PxTriggerPair* __InlineHelper141(physx::PxTriggerPair* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTriggerPair(); }

    __declspec(dllexport) physx::PxConstraintInfo* __InlineHelper142(physx::PxConstraintInfo* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxConstraintInfo(); }

    __declspec(dllexport) physx::PxConstraintInfo* __InlineHelper143(physx::PxConstraintInfo* _this, physx::PxConstraint *_0, void *_1, unsigned int _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxConstraintInfo(_0, _1, _2); }

    __declspec(dllexport) physx::PxExtendedVec3* __InlineHelper144(physx::PxExtendedVec3* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxExtendedVec3(); }

    __declspec(dllexport) physx::PxExtendedVec3* __InlineHelper145(physx::PxExtendedVec3* _this, double _0, double _1, double _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxExtendedVec3(_0, _1, _2); }

    __declspec(dllexport) physx::PxBoxObstacle* __InlineHelper146(physx::PxBoxObstacle* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBoxObstacle(); }

    __declspec(dllexport) physx::PxCapsuleObstacle* __InlineHelper147(physx::PxCapsuleObstacle* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxCapsuleObstacle(); }

    __declspec(dllexport) physx::PxControllerFilters* __InlineHelper148(physx::PxControllerFilters* _this, const physx::PxFilterData *_0, physx::PxQueryFilterCallback *_1, physx::PxControllerFilterCallback *_2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxControllerFilters(_0, _1, _2); }

    __declspec(dllexport) physx::PxBoxControllerDesc* __InlineHelper149(physx::PxBoxControllerDesc* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBoxControllerDesc(); }

    __declspec(dllexport) physx::PxBoxControllerDesc* __InlineHelper150(physx::PxBoxControllerDesc* _this, const physx::PxBoxControllerDesc &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBoxControllerDesc(_0); }

    __declspec(dllexport) physx::PxCapsuleControllerDesc* __InlineHelper151(physx::PxCapsuleControllerDesc* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxCapsuleControllerDesc(); }

    __declspec(dllexport) physx::PxCapsuleControllerDesc* __InlineHelper152(physx::PxCapsuleControllerDesc* _this, const physx::PxCapsuleControllerDesc &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxCapsuleControllerDesc(_0); }

    __declspec(dllexport) physx::PxConvexMeshDesc* __InlineHelper153(physx::PxConvexMeshDesc* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxConvexMeshDesc(); }

    __declspec(dllexport) physx::PxTriangleMeshDesc* __InlineHelper154(physx::PxTriangleMeshDesc* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxTriangleMeshDesc(); }

    __declspec(dllexport) physx::PxMidphaseDesc* __InlineHelper155(physx::PxMidphaseDesc* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMidphaseDesc(); }

    __declspec(dllexport) physx::PxBVHStructureDesc* __InlineHelper156(physx::PxBVHStructureDesc* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxBVHStructureDesc(); }

    __declspec(dllexport) physx::PxCookingParams* __InlineHelper157(physx::PxCookingParams* _this, const physx::PxTolerancesScale &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxCookingParams(_0); }

    __declspec(dllexport) physx::PxSpring* __InlineHelper158(physx::PxSpring* _this, float _0, float _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSpring(_0, _1); }

    __declspec(dllexport) physx::PxJacobianRow* __InlineHelper159(physx::PxJacobianRow* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJacobianRow(); }

    __declspec(dllexport) physx::PxJacobianRow* __InlineHelper160(physx::PxJacobianRow* _this, const physx::PxVec3 &_0, const physx::PxVec3 &_1, const physx::PxVec3 &_2, const physx::PxVec3 &_3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJacobianRow(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxJointLimitParameters* __InlineHelper161(physx::PxJointLimitParameters* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointLimitParameters(); }

    __declspec(dllexport) physx::PxJointLimitParameters* __InlineHelper162(physx::PxJointLimitParameters* _this, const physx::PxJointLimitParameters &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointLimitParameters(_0); }

    __declspec(dllexport) physx::PxJointLinearLimit* __InlineHelper163(physx::PxJointLinearLimit* _this, const physx::PxTolerancesScale &_0, float _1, float _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointLinearLimit(_0, _1, _2); }

    __declspec(dllexport) physx::PxJointLinearLimit* __InlineHelper164(physx::PxJointLinearLimit* _this, float _0, const physx::PxSpring &_1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointLinearLimit(_0, _1); }

    __declspec(dllexport) physx::PxJointLinearLimitPair* __InlineHelper165(physx::PxJointLinearLimitPair* _this, const physx::PxTolerancesScale &_0, float _1, float _2, float _3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointLinearLimitPair(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxJointLinearLimitPair* __InlineHelper166(physx::PxJointLinearLimitPair* _this, float _0, float _1, const physx::PxSpring &_2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointLinearLimitPair(_0, _1, _2); }

    __declspec(dllexport) physx::PxJointAngularLimitPair* __InlineHelper167(physx::PxJointAngularLimitPair* _this, float _0, float _1, float _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointAngularLimitPair(_0, _1, _2); }

    __declspec(dllexport) physx::PxJointAngularLimitPair* __InlineHelper168(physx::PxJointAngularLimitPair* _this, float _0, float _1, const physx::PxSpring &_2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointAngularLimitPair(_0, _1, _2); }

    __declspec(dllexport) physx::PxJointLimitCone* __InlineHelper169(physx::PxJointLimitCone* _this, float _0, float _1, float _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointLimitCone(_0, _1, _2); }

    __declspec(dllexport) physx::PxJointLimitCone* __InlineHelper170(physx::PxJointLimitCone* _this, float _0, float _1, const physx::PxSpring &_2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointLimitCone(_0, _1, _2); }

    __declspec(dllexport) physx::PxJointLimitPyramid* __InlineHelper171(physx::PxJointLimitPyramid* _this, float _0, float _1, float _2, float _3, float _4)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointLimitPyramid(_0, _1, _2, _3, _4); }

    __declspec(dllexport) physx::PxJointLimitPyramid* __InlineHelper172(physx::PxJointLimitPyramid* _this, float _0, float _1, float _2, float _3, const physx::PxSpring &_4)
    { return new (__BiohazrdNewHelper(), _this) physx::PxJointLimitPyramid(_0, _1, _2, _3, _4); }

    __declspec(dllexport) physx::PxD6JointDrive* __InlineHelper173(physx::PxD6JointDrive* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxD6JointDrive(); }

    __declspec(dllexport) physx::PxD6JointDrive* __InlineHelper174(physx::PxD6JointDrive* _this, float _0, float _1, float _2, bool _3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxD6JointDrive(_0, _1, _2, _3); }

    __declspec(dllexport) physx::PxGroupsMask* __InlineHelper175(physx::PxGroupsMask* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxGroupsMask(); }

    __declspec(dllexport) void __InlineHelper176(physx::PxGroupsMask* _this)
    { _this->~PxGroupsMask(); }

    __declspec(dllexport) physx::PxMassProperties* __InlineHelper177(physx::PxMassProperties* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMassProperties(); }

    __declspec(dllexport) physx::PxMassProperties* __InlineHelper178(physx::PxMassProperties* _this, const float _0, const physx::PxMat33 &_1, const physx::PxVec3 &_2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMassProperties(_0, _1, _2); }

    __declspec(dllexport) physx::PxMassProperties* __InlineHelper179(physx::PxMassProperties* _this, const physx::PxGeometry &_0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxMassProperties(_0); }

    __declspec(dllexport) physx::PxSerialization::PxXmlMiscParameter* __InlineHelper180(physx::PxSerialization::PxXmlMiscParameter* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSerialization::PxXmlMiscParameter(); }

    __declspec(dllexport) physx::PxSerialization::PxXmlMiscParameter* __InlineHelper181(physx::PxSerialization::PxXmlMiscParameter* _this, physx::PxVec3 &_0, physx::PxTolerancesScale _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxSerialization::PxXmlMiscParameter(_0, _1); }

    __declspec(dllexport) physx::PxRepXObject* __InlineHelper182(physx::PxRepXObject* _this, const char *_0, const void *_1, const unsigned long long _2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxRepXObject(_0, _1, _2); }

    __declspec(dllexport) physx::PxRepXInstantiationArgs* __InlineHelper183(physx::PxRepXInstantiationArgs* _this, physx::PxPhysics &_0, physx::PxCooking *_1, physx::PxStringTable *_2)
    { return new (__BiohazrdNewHelper(), _this) physx::PxRepXInstantiationArgs(_0, _1, _2); }

    __declspec(dllexport) physx::PxVehicleChassisData* __InlineHelper184(physx::PxVehicleChassisData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleChassisData(); }

    __declspec(dllexport) physx::PxVehicleEngineData* __InlineHelper185(physx::PxVehicleEngineData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleEngineData(); }

    __declspec(dllexport) physx::PxVehicleEngineData* __InlineHelper186(physx::PxVehicleEngineData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleEngineData(_0); }

    __declspec(dllexport) physx::PxVehicleGearsData* __InlineHelper187(physx::PxVehicleGearsData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleGearsData(); }

    __declspec(dllexport) physx::PxVehicleGearsData* __InlineHelper188(physx::PxVehicleGearsData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleGearsData(_0); }

    __declspec(dllexport) physx::PxVehicleAutoBoxData* __InlineHelper189(physx::PxVehicleAutoBoxData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleAutoBoxData(); }

    __declspec(dllexport) physx::PxVehicleAutoBoxData* __InlineHelper190(physx::PxVehicleAutoBoxData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleAutoBoxData(_0); }

    __declspec(dllexport) physx::PxVehicleDifferential4WData* __InlineHelper191(physx::PxVehicleDifferential4WData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDifferential4WData(); }

    __declspec(dllexport) physx::PxVehicleDifferential4WData* __InlineHelper192(physx::PxVehicleDifferential4WData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDifferential4WData(_0); }

    __declspec(dllexport) physx::PxVehicleDifferentialNWData* __InlineHelper193(physx::PxVehicleDifferentialNWData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDifferentialNWData(); }

    __declspec(dllexport) physx::PxVehicleDifferentialNWData* __InlineHelper194(physx::PxVehicleDifferentialNWData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDifferentialNWData(_0); }

    __declspec(dllexport) physx::PxVehicleAckermannGeometryData* __InlineHelper195(physx::PxVehicleAckermannGeometryData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleAckermannGeometryData(); }

    __declspec(dllexport) physx::PxVehicleAckermannGeometryData* __InlineHelper196(physx::PxVehicleAckermannGeometryData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleAckermannGeometryData(_0); }

    __declspec(dllexport) physx::PxVehicleClutchData* __InlineHelper197(physx::PxVehicleClutchData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleClutchData(); }

    __declspec(dllexport) physx::PxVehicleClutchData* __InlineHelper198(physx::PxVehicleClutchData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleClutchData(_0); }

    __declspec(dllexport) physx::PxVehicleTireLoadFilterData* __InlineHelper199(physx::PxVehicleTireLoadFilterData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleTireLoadFilterData(); }

    __declspec(dllexport) physx::PxVehicleTireLoadFilterData* __InlineHelper200(physx::PxVehicleTireLoadFilterData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleTireLoadFilterData(_0); }

    __declspec(dllexport) physx::PxVehicleWheelData* __InlineHelper201(physx::PxVehicleWheelData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleWheelData(); }

    __declspec(dllexport) physx::PxVehicleSuspensionData* __InlineHelper202(physx::PxVehicleSuspensionData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleSuspensionData(); }

    __declspec(dllexport) physx::PxVehicleAntiRollBarData* __InlineHelper203(physx::PxVehicleAntiRollBarData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleAntiRollBarData(); }

    __declspec(dllexport) physx::PxVehicleTireData* __InlineHelper204(physx::PxVehicleTireData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleTireData(); }

    __declspec(dllexport) physx::PxVehicleWheelsSimData* __InlineHelper205(physx::PxVehicleWheelsSimData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleWheelsSimData(_0); }

    __declspec(dllexport) physx::PxVehicleWheelsSimData* __InlineHelper206(physx::PxVehicleWheelsSimData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleWheelsSimData(); }

    __declspec(dllexport) void __InlineHelper207(physx::PxVehicleWheelsSimData* _this)
    { _this->~PxVehicleWheelsSimData(); }

    __declspec(dllexport) physx::PxVehicleWheelsDynData* __InlineHelper208(physx::PxVehicleWheelsDynData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleWheelsDynData(); }

    __declspec(dllexport) void __InlineHelper209(physx::PxVehicleWheelsDynData* _this)
    { _this->~PxVehicleWheelsDynData(); }

    __declspec(dllexport) physx::PxVehicleWheels* __InlineHelper210(physx::PxVehicleWheels* _this, unsigned short _0, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _1)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleWheels(_0, _1); }

    __declspec(dllexport) physx::PxVehicleWheels* __InlineHelper211(physx::PxVehicleWheels* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleWheels(_0); }

    __declspec(dllexport) physx::PxVehicleDriveSimData* __InlineHelper212(physx::PxVehicleDriveSimData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveSimData(); }

    __declspec(dllexport) physx::PxVehicleDriveSimData* __InlineHelper213(physx::PxVehicleDriveSimData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveSimData(_0); }

    __declspec(dllexport) physx::PxVehicleDriveDynData* __InlineHelper214(physx::PxVehicleDriveDynData* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveDynData(_0); }

    __declspec(dllexport) physx::PxVehicleDrive* __InlineHelper215(physx::PxVehicleDrive* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDrive(_0); }

    __declspec(dllexport) physx::PxVehicleDriveSimData4W* __InlineHelper216(physx::PxVehicleDriveSimData4W* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveSimData4W(); }

    __declspec(dllexport) physx::PxVehicleDriveSimData4W* __InlineHelper217(physx::PxVehicleDriveSimData4W* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveSimData4W(_0); }

    __declspec(dllexport) physx::PxVehicleDrive4W* __InlineHelper218(physx::PxVehicleDrive4W* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDrive4W(_0); }

    __declspec(dllexport) physx::PxVehicleDriveTank* __InlineHelper219(physx::PxVehicleDriveTank* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveTank(_0); }

    __declspec(dllexport) physx::PxWheelQueryResult* __InlineHelper220(physx::PxWheelQueryResult* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxWheelQueryResult(); }

    __declspec(dllexport) physx::PxVehicleWheelConcurrentUpdateData* __InlineHelper221(physx::PxVehicleWheelConcurrentUpdateData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleWheelConcurrentUpdateData(); }

    __declspec(dllexport) physx::PxVehicleConcurrentUpdateData* __InlineHelper222(physx::PxVehicleConcurrentUpdateData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleConcurrentUpdateData(); }

    __declspec(dllexport) physx::PxVehicleDriveSimDataNW* __InlineHelper223(physx::PxVehicleDriveSimDataNW* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveSimDataNW(); }

    __declspec(dllexport) physx::PxVehicleDriveSimDataNW* __InlineHelper224(physx::PxVehicleDriveSimDataNW* _this, const physx::PxEMPTY _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveSimDataNW(_0); }

    __declspec(dllexport) physx::PxVehicleDriveNW* __InlineHelper225(physx::PxVehicleDriveNW* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveNW(_0); }

    __declspec(dllexport) physx::PxVehicleDrive4WRawInputData* __InlineHelper226(physx::PxVehicleDrive4WRawInputData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDrive4WRawInputData(); }

    __declspec(dllexport) physx::PxVehicleDriveNWRawInputData* __InlineHelper227(physx::PxVehicleDriveNWRawInputData* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveNWRawInputData(); }

    __declspec(dllexport) physx::PxVehicleDriveTankRawInputData* __InlineHelper228(physx::PxVehicleDriveTankRawInputData* _this, const physx::PxVehicleDriveTankControlModel::Enum _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleDriveTankRawInputData(_0); }

    __declspec(dllexport) void __InlineHelper229(physx::PxVehicleDriveTankRawInputData* _this)
    { _this->~PxVehicleDriveTankRawInputData(); }

    __declspec(dllexport) physx::PxVehicleCopyDynamicsMap* __InlineHelper230(physx::PxVehicleCopyDynamicsMap* _this)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleCopyDynamicsMap(); }

    __declspec(dllexport) physx::PxVehicleNoDrive* __InlineHelper231(physx::PxVehicleNoDrive* _this, physx::PxFlags<physx::PxBaseFlag::Enum, unsigned short> _0)
    { return new (__BiohazrdNewHelper(), _this) physx::PxVehicleNoDrive(_0); }

    __declspec(dllexport) physx::PxProfileScoped* __InlineHelper232(physx::PxProfileScoped* _this, physx::PxProfilerCallback *_0, const char *_1, bool _2, unsigned long long _3)
    { return new (__BiohazrdNewHelper(), _this) physx::PxProfileScoped(_0, _1, _2, _3); }

    __declspec(dllexport) void __InlineHelper233(physx::PxProfileScoped* _this)
    { _this->~PxProfileScoped(); }

    __declspec(dllexport) physx::PxVec3 __InlineHelper234(float _0, const physx::PxVec3 &_1)
    { return operator*(_0, _1); }

    __declspec(dllexport) physx::PxVec4 __InlineHelper235(float _0, const physx::PxVec4 &_1)
    { return operator*(_0, _1); }

    __declspec(dllexport) physx::PxVec2 __InlineHelper236(float _0, const physx::PxVec2 &_1)
    { return operator*(_0, _1); }
}
