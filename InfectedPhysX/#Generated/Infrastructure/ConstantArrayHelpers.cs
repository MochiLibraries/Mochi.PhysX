// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Gu;
using System;
using System.Runtime.InteropServices;

namespace Mochi.PhysX.Infrastructure
{
    public unsafe ref struct ConstantArrayEnumerator<T>
        where T : unmanaged
    {
        private readonly T* Element0;
        private readonly int Count;
        private int Index;

        public T Current => (uint)Index < Count ? Element0[Index] : default;

        internal ConstantArrayEnumerator(T* element0, int count)
        {
            Element0 = element0;
            Count = count;
            Index = -1;
        }

        public bool MoveNext()
        {
            int index = Index + 1;
            if (index < Count)
            {
                Index = index;
                return true;
            }

            return false;
        }
    }

    public unsafe ref struct ConstantArrayOfPointersEnumerator<T>
        where T : unmanaged
    {
        private readonly T** Element0;
        private readonly int Count;
        private int Index;

        public T* Current => (uint)Index < Count ? Element0[Index] : default;

        internal ConstantArrayOfPointersEnumerator(T** element0, int count)
        {
            Element0 = element0;
            Count = count;
            Index = -1;
        }

        public bool MoveNext()
        {
            int index = Index + 1;
            if (index < Count)
            {
                Index = index;
                return true;
            }

            return false;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 5)]
    public unsafe partial struct ConstantArray_bool_5
    {
        [FieldOffset(0)] private bool Element0;

        private bool* Element0Pointer
        {
            get
            {
                fixed (bool* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref bool this[int index]
        {
            get
            {
                if ((uint)index < 5)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 5;

        public override string ToString()
            => $"{typeof(bool)}[5]";

        public bool[] ToArray()
        {
            bool[] result = new bool[5];

            for (int i = 0; i < 5; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<bool> AsSpan()
            => new Span<bool>(Element0Pointer, 5);

        public ConstantArrayEnumerator<bool> GetEnumerator()
            => new ConstantArrayEnumerator<bool>(Element0Pointer, 5);
    }

    [StructLayout(LayoutKind.Explicit, Size = 3072)]
    public unsafe partial struct ConstantArray_char__UNICODE_0020____UNICODE_005B__256__UNICODE_005D___12
    {
        [FieldOffset(0)] private ConstantArray_char_256 Element0;

        private ConstantArray_char_256* Element0Pointer
        {
            get
            {
                fixed (ConstantArray_char_256* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref ConstantArray_char_256 this[int index]
        {
            get
            {
                if ((uint)index < 12)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 12;

        public override string ToString()
            => $"{typeof(ConstantArray_char_256)}[12]";

        public ConstantArray_char_256[] ToArray()
        {
            ConstantArray_char_256[] result = new ConstantArray_char_256[12];

            for (int i = 0; i < 12; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<ConstantArray_char_256> AsSpan()
            => new Span<ConstantArray_char_256>(Element0Pointer, 12);

        public ConstantArrayEnumerator<ConstantArray_char_256> GetEnumerator()
            => new ConstantArrayEnumerator<ConstantArray_char_256>(Element0Pointer, 12);
    }

    [StructLayout(LayoutKind.Explicit, Size = 1)]
    public unsafe partial struct ConstantArray_char_1
    {
        [FieldOffset(0)] private byte Element0;

        private byte* Element0Pointer
        {
            get
            {
                fixed (byte* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref byte this[int index]
        {
            get
            {
                if ((uint)index < 1)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 1;

        public override string ToString()
            => $"{typeof(byte)}[1]";

        public byte[] ToArray()
        {
            byte[] result = new byte[1];

            for (int i = 0; i < 1; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<byte> AsSpan()
            => new Span<byte>(Element0Pointer, 1);

        public ConstantArrayEnumerator<byte> GetEnumerator()
            => new ConstantArrayEnumerator<byte>(Element0Pointer, 1);
    }

    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct ConstantArray_const__UNICODE_0020__physx__UNICODE_003A____UNICODE_003A__PxRigidActor__UNICODE_0020____UNICODE_002A___2
    {
        [FieldOffset(0)] private PxRigidActor* Element0;

        private PxRigidActor** Element0Pointer
        {
            get
            {
                fixed (PxRigidActor** pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxRigidActor* this[int index]
        {
            get
            {
                if ((uint)index < 2)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 2;

        public override string ToString()
            => $"{typeof(PxRigidActor*)}[2]";

        public PxRigidActor*[] ToArray()
        {
            PxRigidActor*[] result = new PxRigidActor*[2];

            for (int i = 0; i < 2; i++)
            { result[i] = this[i]; }

            return result;
        }

        public ConstantArrayOfPointersEnumerator<PxRigidActor> GetEnumerator()
            => new ConstantArrayOfPointersEnumerator<PxRigidActor>(Element0Pointer, 2);
    }

    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct ConstantArray_const__UNICODE_0020__physx__UNICODE_003A____UNICODE_003A__PxShape__UNICODE_0020____UNICODE_002A___2
    {
        [FieldOffset(0)] private PxShape* Element0;

        private PxShape** Element0Pointer
        {
            get
            {
                fixed (PxShape** pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxShape* this[int index]
        {
            get
            {
                if ((uint)index < 2)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 2;

        public override string ToString()
            => $"{typeof(PxShape*)}[2]";

        public PxShape*[] ToArray()
        {
            PxShape*[] result = new PxShape*[2];

            for (int i = 0; i < 2; i++)
            { result[i] = this[i]; }

            return result;
        }

        public ConstantArrayOfPointersEnumerator<PxShape> GetEnumerator()
            => new ConstantArrayOfPointersEnumerator<PxShape>(Element0Pointer, 2);
    }

    [StructLayout(LayoutKind.Explicit, Size = 4096)]
    public unsafe partial struct ConstantArray_Gu__UNICODE_003A____UNICODE_003A__ContactPoint_64
    {
        [FieldOffset(0)] private ContactPoint Element0;

        private ContactPoint* Element0Pointer
        {
            get
            {
                fixed (ContactPoint* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref ContactPoint this[int index]
        {
            get
            {
                if ((uint)index < 64)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 64;

        public override string ToString()
            => $"{typeof(ContactPoint)}[64]";

        public ContactPoint[] ToArray()
        {
            ContactPoint[] result = new ContactPoint[64];

            for (int i = 0; i < 64; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<ContactPoint> AsSpan()
            => new Span<ContactPoint>(Element0Pointer, 64);

        public ConstantArrayEnumerator<ContactPoint> GetEnumerator()
            => new ConstantArrayEnumerator<ContactPoint>(Element0Pointer, 64);
    }

    [StructLayout(LayoutKind.Explicit, Size = 160)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxAllocIdStats_5
    {
        [FieldOffset(0)] private PxAllocIdStats Element0;

        private PxAllocIdStats* Element0Pointer
        {
            get
            {
                fixed (PxAllocIdStats* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxAllocIdStats this[int index]
        {
            get
            {
                if ((uint)index < 5)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 5;

        public override string ToString()
            => $"{typeof(PxAllocIdStats)}[5]";

        public PxAllocIdStats[] ToArray()
        {
            PxAllocIdStats[] result = new PxAllocIdStats[5];

            for (int i = 0; i < 5; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<PxAllocIdStats> AsSpan()
            => new Span<PxAllocIdStats>(Element0Pointer, 5);

        public ConstantArrayEnumerator<PxAllocIdStats> GetEnumerator()
            => new ConstantArrayEnumerator<PxAllocIdStats>(Element0Pointer, 5);
    }

    [StructLayout(LayoutKind.Explicit, Size = 96)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxArticulationDrive_6
    {
        [FieldOffset(0)] private PxArticulationDrive Element0;

        private PxArticulationDrive* Element0Pointer
        {
            get
            {
                fixed (PxArticulationDrive* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxArticulationDrive this[int index]
        {
            get
            {
                if ((uint)index < 6)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 6;

        public override string ToString()
            => $"{typeof(PxArticulationDrive)}[6]";

        public PxArticulationDrive[] ToArray()
        {
            PxArticulationDrive[] result = new PxArticulationDrive[6];

            for (int i = 0; i < 6; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<PxArticulationDrive> AsSpan()
            => new Span<PxArticulationDrive>(Element0Pointer, 6);

        public ConstantArrayEnumerator<PxArticulationDrive> GetEnumerator()
            => new ConstantArrayEnumerator<PxArticulationDrive>(Element0Pointer, 6);
    }

    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxArticulationLimit_6
    {
        [FieldOffset(0)] private PxArticulationLimit Element0;

        private PxArticulationLimit* Element0Pointer
        {
            get
            {
                fixed (PxArticulationLimit* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxArticulationLimit this[int index]
        {
            get
            {
                if ((uint)index < 6)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 6;

        public override string ToString()
            => $"{typeof(PxArticulationLimit)}[6]";

        public PxArticulationLimit[] ToArray()
        {
            PxArticulationLimit[] result = new PxArticulationLimit[6];

            for (int i = 0; i < 6; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<PxArticulationLimit> AsSpan()
            => new Span<PxArticulationLimit>(Element0Pointer, 6);

        public ConstantArrayEnumerator<PxArticulationLimit> GetEnumerator()
            => new ConstantArrayEnumerator<PxArticulationLimit>(Element0Pointer, 6);
    }

    [StructLayout(LayoutKind.Explicit, Size = 4)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxF32_1
    {
        [FieldOffset(0)] private float Element0;

        private float* Element0Pointer
        {
            get
            {
                fixed (float* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref float this[int index]
        {
            get
            {
                if ((uint)index < 1)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 1;

        public override string ToString()
            => $"{typeof(float)}[1]";

        public float[] ToArray()
        {
            float[] result = new float[1];

            for (int i = 0; i < 1; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<float> AsSpan()
            => new Span<float>(Element0Pointer, 1);

        public ConstantArrayEnumerator<float> GetEnumerator()
            => new ConstantArrayEnumerator<float>(Element0Pointer, 1);
    }

    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal__UNICODE_0020____UNICODE_005B__2__UNICODE_005D___3
    {
        [FieldOffset(0)] private ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2 Element0;

        private ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2* Element0Pointer
        {
            get
            {
                fixed (ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2 this[int index]
        {
            get
            {
                if ((uint)index < 3)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 3;

        public override string ToString()
            => $"{typeof(ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2)}[3]";

        public ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2[] ToArray()
        {
            ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2[] result = new ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2[3];

            for (int i = 0; i < 3; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2> AsSpan()
            => new Span<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2>(Element0Pointer, 3);

        public ConstantArrayEnumerator<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2> GetEnumerator()
            => new ConstantArrayEnumerator<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2>(Element0Pointer, 3);
    }

    [StructLayout(LayoutKind.Explicit, Size = 12288)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal__UNICODE_0020____UNICODE_005B__256__UNICODE_005D___12
    {
        [FieldOffset(0)] private ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256 Element0;

        private ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256* Element0Pointer
        {
            get
            {
                fixed (ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256 this[int index]
        {
            get
            {
                if ((uint)index < 12)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 12;

        public override string ToString()
            => $"{typeof(ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256)}[12]";

        public ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256[] ToArray()
        {
            ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256[] result = new ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256[12];

            for (int i = 0; i < 12; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256> AsSpan()
            => new Span<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256>(Element0Pointer, 12);

        public ConstantArrayEnumerator<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256> GetEnumerator()
            => new ConstantArrayEnumerator<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256>(Element0Pointer, 12);
    }

    [StructLayout(LayoutKind.Explicit, Size = 4)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_1
    {
        [FieldOffset(0)] private float Element0;

        private float* Element0Pointer
        {
            get
            {
                fixed (float* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref float this[int index]
        {
            get
            {
                if ((uint)index < 1)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 1;

        public override string ToString()
            => $"{typeof(float)}[1]";

        public float[] ToArray()
        {
            float[] result = new float[1];

            for (int i = 0; i < 1; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<float> AsSpan()
            => new Span<float>(Element0Pointer, 1);

        public ConstantArrayEnumerator<float> GetEnumerator()
            => new ConstantArrayEnumerator<float>(Element0Pointer, 1);
    }

    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_12
    {
        [FieldOffset(0)] private float Element0;

        private float* Element0Pointer
        {
            get
            {
                fixed (float* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref float this[int index]
        {
            get
            {
                if ((uint)index < 12)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 12;

        public override string ToString()
            => $"{typeof(float)}[12]";

        public float[] ToArray()
        {
            float[] result = new float[12];

            for (int i = 0; i < 12; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<float> AsSpan()
            => new Span<float>(Element0Pointer, 12);

        public ConstantArrayEnumerator<float> GetEnumerator()
            => new ConstantArrayEnumerator<float>(Element0Pointer, 12);
    }

    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_16
    {
        [FieldOffset(0)] private float Element0;

        private float* Element0Pointer
        {
            get
            {
                fixed (float* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref float this[int index]
        {
            get
            {
                if ((uint)index < 16)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 16;

        public override string ToString()
            => $"{typeof(float)}[16]";

        public float[] ToArray()
        {
            float[] result = new float[16];

            for (int i = 0; i < 16; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<float> AsSpan()
            => new Span<float>(Element0Pointer, 16);

        public ConstantArrayEnumerator<float> GetEnumerator()
            => new ConstantArrayEnumerator<float>(Element0Pointer, 16);
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_2
    {
        [FieldOffset(0)] private float Element0;

        private float* Element0Pointer
        {
            get
            {
                fixed (float* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref float this[int index]
        {
            get
            {
                if ((uint)index < 2)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 2;

        public override string ToString()
            => $"{typeof(float)}[2]";

        public float[] ToArray()
        {
            float[] result = new float[2];

            for (int i = 0; i < 2; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<float> AsSpan()
            => new Span<float>(Element0Pointer, 2);

        public ConstantArrayEnumerator<float> GetEnumerator()
            => new ConstantArrayEnumerator<float>(Element0Pointer, 2);
    }

    [StructLayout(LayoutKind.Explicit, Size = 128)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_32
    {
        [FieldOffset(0)] private float Element0;

        private float* Element0Pointer
        {
            get
            {
                fixed (float* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref float this[int index]
        {
            get
            {
                if ((uint)index < 32)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 32;

        public override string ToString()
            => $"{typeof(float)}[32]";

        public float[] ToArray()
        {
            float[] result = new float[32];

            for (int i = 0; i < 32; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<float> AsSpan()
            => new Span<float>(Element0Pointer, 32);

        public ConstantArrayEnumerator<float> GetEnumerator()
            => new ConstantArrayEnumerator<float>(Element0Pointer, 32);
    }

    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_4
    {
        [FieldOffset(0)] private float Element0;

        private float* Element0Pointer
        {
            get
            {
                fixed (float* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref float this[int index]
        {
            get
            {
                if ((uint)index < 4)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 4;

        public override string ToString()
            => $"{typeof(float)}[4]";

        public float[] ToArray()
        {
            float[] result = new float[4];

            for (int i = 0; i < 4; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<float> AsSpan()
            => new Span<float>(Element0Pointer, 4);

        public ConstantArrayEnumerator<float> GetEnumerator()
            => new ConstantArrayEnumerator<float>(Element0Pointer, 4);
    }

    [StructLayout(LayoutKind.Explicit, Size = 20)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_5
    {
        [FieldOffset(0)] private float Element0;

        private float* Element0Pointer
        {
            get
            {
                fixed (float* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref float this[int index]
        {
            get
            {
                if ((uint)index < 5)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 5;

        public override string ToString()
            => $"{typeof(float)}[5]";

        public float[] ToArray()
        {
            float[] result = new float[5];

            for (int i = 0; i < 5; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<float> AsSpan()
            => new Span<float>(Element0Pointer, 5);

        public ConstantArrayEnumerator<float> GetEnumerator()
            => new ConstantArrayEnumerator<float>(Element0Pointer, 5);
    }

    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_6
    {
        [FieldOffset(0)] private float Element0;

        private float* Element0Pointer
        {
            get
            {
                fixed (float* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref float this[int index]
        {
            get
            {
                if ((uint)index < 6)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 6;

        public override string ToString()
            => $"{typeof(float)}[6]";

        public float[] ToArray()
        {
            float[] result = new float[6];

            for (int i = 0; i < 6; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<float> AsSpan()
            => new Span<float>(Element0Pointer, 6);

        public ConstantArrayEnumerator<float> GetEnumerator()
            => new ConstantArrayEnumerator<float>(Element0Pointer, 6);
    }

    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxRigidActor__UNICODE_0020____UNICODE_002A___2
    {
        [FieldOffset(0)] private PxRigidActor* Element0;

        private PxRigidActor** Element0Pointer
        {
            get
            {
                fixed (PxRigidActor** pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxRigidActor* this[int index]
        {
            get
            {
                if ((uint)index < 2)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 2;

        public override string ToString()
            => $"{typeof(PxRigidActor*)}[2]";

        public PxRigidActor*[] ToArray()
        {
            PxRigidActor*[] result = new PxRigidActor*[2];

            for (int i = 0; i < 2; i++)
            { result[i] = this[i]; }

            return result;
        }

        public ConstantArrayOfPointersEnumerator<PxRigidActor> GetEnumerator()
            => new ConstantArrayOfPointersEnumerator<PxRigidActor>(Element0Pointer, 2);
    }

    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxShape__UNICODE_0020____UNICODE_002A___2
    {
        [FieldOffset(0)] private PxShape* Element0;

        private PxShape** Element0Pointer
        {
            get
            {
                fixed (PxShape** pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxShape* this[int index]
        {
            get
            {
                if ((uint)index < 2)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 2;

        public override string ToString()
            => $"{typeof(PxShape*)}[2]";

        public PxShape*[] ToArray()
        {
            PxShape*[] result = new PxShape*[2];

            for (int i = 0; i < 2; i++)
            { result[i] = this[i]; }

            return result;
        }

        public ConstantArrayOfPointersEnumerator<PxShape> GetEnumerator()
            => new ConstantArrayOfPointersEnumerator<PxShape>(Element0Pointer, 2);
    }

    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxTransform_2
    {
        [FieldOffset(0)] private PxTransform Element0;

        private PxTransform* Element0Pointer
        {
            get
            {
                fixed (PxTransform* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxTransform this[int index]
        {
            get
            {
                if ((uint)index < 2)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 2;

        public override string ToString()
            => $"{typeof(PxTransform)}[2]";

        public PxTransform[] ToArray()
        {
            PxTransform[] result = new PxTransform[2];

            for (int i = 0; i < 2; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<PxTransform> AsSpan()
            => new Span<PxTransform>(Element0Pointer, 2);

        public ConstantArrayEnumerator<PxTransform> GetEnumerator()
            => new ConstantArrayEnumerator<PxTransform>(Element0Pointer, 2);
    }

    [StructLayout(LayoutKind.Explicit, Size = 196)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32__UNICODE_0020____UNICODE_005B__7__UNICODE_005D___7
    {
        [FieldOffset(0)] private ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7 Element0;

        private ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7* Element0Pointer
        {
            get
            {
                fixed (ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7 this[int index]
        {
            get
            {
                if ((uint)index < 7)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 7;

        public override string ToString()
            => $"{typeof(ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7)}[7]";

        public ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7[] ToArray()
        {
            ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7[] result = new ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7[7];

            for (int i = 0; i < 7; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7> AsSpan()
            => new Span<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7>(Element0Pointer, 7);

        public ConstantArrayEnumerator<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7> GetEnumerator()
            => new ConstantArrayEnumerator<ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7>(Element0Pointer, 7);
    }

    [StructLayout(LayoutKind.Explicit, Size = 4)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_1
    {
        [FieldOffset(0)] private uint Element0;

        private uint* Element0Pointer
        {
            get
            {
                fixed (uint* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref uint this[int index]
        {
            get
            {
                if ((uint)index < 1)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 1;

        public override string ToString()
            => $"{typeof(uint)}[1]";

        public uint[] ToArray()
        {
            uint[] result = new uint[1];

            for (int i = 0; i < 1; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<uint> AsSpan()
            => new Span<uint>(Element0Pointer, 1);

        public ConstantArrayEnumerator<uint> GetEnumerator()
            => new ConstantArrayEnumerator<uint>(Element0Pointer, 1);
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_2
    {
        [FieldOffset(0)] private uint Element0;

        private uint* Element0Pointer
        {
            get
            {
                fixed (uint* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref uint this[int index]
        {
            get
            {
                if ((uint)index < 2)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 2;

        public override string ToString()
            => $"{typeof(uint)}[2]";

        public uint[] ToArray()
        {
            uint[] result = new uint[2];

            for (int i = 0; i < 2; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<uint> AsSpan()
            => new Span<uint>(Element0Pointer, 2);

        public ConstantArrayEnumerator<uint> GetEnumerator()
            => new ConstantArrayEnumerator<uint>(Element0Pointer, 2);
    }

    [StructLayout(LayoutKind.Explicit, Size = 1024)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_256
    {
        [FieldOffset(0)] private uint Element0;

        private uint* Element0Pointer
        {
            get
            {
                fixed (uint* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref uint this[int index]
        {
            get
            {
                if ((uint)index < 256)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 256;

        public override string ToString()
            => $"{typeof(uint)}[256]";

        public uint[] ToArray()
        {
            uint[] result = new uint[256];

            for (int i = 0; i < 256; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<uint> AsSpan()
            => new Span<uint>(Element0Pointer, 256);

        public ConstantArrayEnumerator<uint> GetEnumerator()
            => new ConstantArrayEnumerator<uint>(Element0Pointer, 256);
    }

    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_3
    {
        [FieldOffset(0)] private uint Element0;

        private uint* Element0Pointer
        {
            get
            {
                fixed (uint* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref uint this[int index]
        {
            get
            {
                if ((uint)index < 3)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 3;

        public override string ToString()
            => $"{typeof(uint)}[3]";

        public uint[] ToArray()
        {
            uint[] result = new uint[3];

            for (int i = 0; i < 3; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<uint> AsSpan()
            => new Span<uint>(Element0Pointer, 3);

        public ConstantArrayEnumerator<uint> GetEnumerator()
            => new ConstantArrayEnumerator<uint>(Element0Pointer, 3);
    }

    [StructLayout(LayoutKind.Explicit, Size = 28)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_7
    {
        [FieldOffset(0)] private uint Element0;

        private uint* Element0Pointer
        {
            get
            {
                fixed (uint* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref uint this[int index]
        {
            get
            {
                if ((uint)index < 7)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 7;

        public override string ToString()
            => $"{typeof(uint)}[7]";

        public uint[] ToArray()
        {
            uint[] result = new uint[7];

            for (int i = 0; i < 7; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<uint> AsSpan()
            => new Span<uint>(Element0Pointer, 7);

        public ConstantArrayEnumerator<uint> GetEnumerator()
            => new ConstantArrayEnumerator<uint>(Element0Pointer, 7);
    }

    [StructLayout(LayoutKind.Explicit, Size = 14)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU8_14
    {
        [FieldOffset(0)] private byte Element0;

        private byte* Element0Pointer
        {
            get
            {
                fixed (byte* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref byte this[int index]
        {
            get
            {
                if ((uint)index < 14)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 14;

        public override string ToString()
            => $"{typeof(byte)}[14]";

        public byte[] ToArray()
        {
            byte[] result = new byte[14];

            for (int i = 0; i < 14; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<byte> AsSpan()
            => new Span<byte>(Element0Pointer, 14);

        public ConstantArrayEnumerator<byte> GetEnumerator()
            => new ConstantArrayEnumerator<byte>(Element0Pointer, 14);
    }

    [StructLayout(LayoutKind.Explicit, Size = 20)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU8_20
    {
        [FieldOffset(0)] private byte Element0;

        private byte* Element0Pointer
        {
            get
            {
                fixed (byte* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref byte this[int index]
        {
            get
            {
                if ((uint)index < 20)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 20;

        public override string ToString()
            => $"{typeof(byte)}[20]";

        public byte[] ToArray()
        {
            byte[] result = new byte[20];

            for (int i = 0; i < 20; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<byte> AsSpan()
            => new Span<byte>(Element0Pointer, 20);

        public ConstantArrayEnumerator<byte> GetEnumerator()
            => new ConstantArrayEnumerator<byte>(Element0Pointer, 20);
    }

    [StructLayout(LayoutKind.Explicit, Size = 4)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU8_4
    {
        [FieldOffset(0)] private byte Element0;

        private byte* Element0Pointer
        {
            get
            {
                fixed (byte* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref byte this[int index]
        {
            get
            {
                if ((uint)index < 4)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 4;

        public override string ToString()
            => $"{typeof(byte)}[4]";

        public byte[] ToArray()
        {
            byte[] result = new byte[4];

            for (int i = 0; i < 4; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<byte> AsSpan()
            => new Span<byte>(Element0Pointer, 4);

        public ConstantArrayEnumerator<byte> GetEnumerator()
            => new ConstantArrayEnumerator<byte>(Element0Pointer, 4);
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU8_8
    {
        [FieldOffset(0)] private byte Element0;

        private byte* Element0Pointer
        {
            get
            {
                fixed (byte* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref byte this[int index]
        {
            get
            {
                if ((uint)index < 8)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 8;

        public override string ToString()
            => $"{typeof(byte)}[8]";

        public byte[] ToArray()
        {
            byte[] result = new byte[8];

            for (int i = 0; i < 8; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<byte> AsSpan()
            => new Span<byte>(Element0Pointer, 8);

        public ConstantArrayEnumerator<byte> GetEnumerator()
            => new ConstantArrayEnumerator<byte>(Element0Pointer, 8);
    }

    [StructLayout(LayoutKind.Explicit, Size = 144)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxVec3_12
    {
        [FieldOffset(0)] private PxVec3 Element0;

        private PxVec3* Element0Pointer
        {
            get
            {
                fixed (PxVec3* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxVec3 this[int index]
        {
            get
            {
                if ((uint)index < 12)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 12;

        public override string ToString()
            => $"{typeof(PxVec3)}[12]";

        public PxVec3[] ToArray()
        {
            PxVec3[] result = new PxVec3[12];

            for (int i = 0; i < 12; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<PxVec3> AsSpan()
            => new Span<PxVec3>(Element0Pointer, 12);

        public ConstantArrayEnumerator<PxVec3> GetEnumerator()
            => new ConstantArrayEnumerator<PxVec3>(Element0Pointer, 12);
    }

    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxVec3_2
    {
        [FieldOffset(0)] private PxVec3 Element0;

        private PxVec3* Element0Pointer
        {
            get
            {
                fixed (PxVec3* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxVec3 this[int index]
        {
            get
            {
                if ((uint)index < 2)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 2;

        public override string ToString()
            => $"{typeof(PxVec3)}[2]";

        public PxVec3[] ToArray()
        {
            PxVec3[] result = new PxVec3[2];

            for (int i = 0; i < 2; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<PxVec3> AsSpan()
            => new Span<PxVec3>(Element0Pointer, 2);

        public ConstantArrayEnumerator<PxVec3> GetEnumerator()
            => new ConstantArrayEnumerator<PxVec3>(Element0Pointer, 2);
    }

    [StructLayout(LayoutKind.Explicit, Size = 36)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxVec3_3
    {
        [FieldOffset(0)] private PxVec3 Element0;

        private PxVec3* Element0Pointer
        {
            get
            {
                fixed (PxVec3* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxVec3 this[int index]
        {
            get
            {
                if ((uint)index < 3)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 3;

        public override string ToString()
            => $"{typeof(PxVec3)}[3]";

        public PxVec3[] ToArray()
        {
            PxVec3[] result = new PxVec3[3];

            for (int i = 0; i < 3; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<PxVec3> AsSpan()
            => new Span<PxVec3>(Element0Pointer, 3);

        public ConstantArrayEnumerator<PxVec3> GetEnumerator()
            => new ConstantArrayEnumerator<PxVec3>(Element0Pointer, 3);
    }

    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public unsafe partial struct ConstantArray_PxArticulationMotion__UNICODE_003A____UNICODE_003A__Enum_6
    {
        [FieldOffset(0)] private PxArticulationMotions Element0;

        private PxArticulationMotions* Element0Pointer
        {
            get
            {
                fixed (PxArticulationMotions* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref PxArticulationMotions this[int index]
        {
            get
            {
                if ((uint)index < 6)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 6;

        public override string ToString()
            => $"{typeof(PxArticulationMotions)}[6]";

        public PxArticulationMotions[] ToArray()
        {
            PxArticulationMotions[] result = new PxArticulationMotions[6];

            for (int i = 0; i < 6; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<PxArticulationMotions> AsSpan()
            => new Span<PxArticulationMotions>(Element0Pointer, 6);

        public ConstantArrayEnumerator<PxArticulationMotions> GetEnumerator()
            => new ConstantArrayEnumerator<PxArticulationMotions>(Element0Pointer, 6);
    }

    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct ConstantArray_uint32_t_4
    {
        [FieldOffset(0)] private uint Element0;

        private uint* Element0Pointer
        {
            get
            {
                fixed (uint* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref uint this[int index]
        {
            get
            {
                if ((uint)index < 4)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 4;

        public override string ToString()
            => $"{typeof(uint)}[4]";

        public uint[] ToArray()
        {
            uint[] result = new uint[4];

            for (int i = 0; i < 4; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<uint> AsSpan()
            => new Span<uint>(Element0Pointer, 4);

        public ConstantArrayEnumerator<uint> GetEnumerator()
            => new ConstantArrayEnumerator<uint>(Element0Pointer, 4);
    }

    [StructLayout(LayoutKind.Explicit, Size = 256)]
    public unsafe partial struct ConstantArray_char_256
    {
        [FieldOffset(0)] private byte Element0;

        private byte* Element0Pointer
        {
            get
            {
                fixed (byte* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref byte this[int index]
        {
            get
            {
                if ((uint)index < 256)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 256;

        public override string ToString()
            => $"{typeof(byte)}[256]";

        public byte[] ToArray()
        {
            byte[] result = new byte[256];

            for (int i = 0; i < 256; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<byte> AsSpan()
            => new Span<byte>(Element0Pointer, 256);

        public ConstantArrayEnumerator<byte> GetEnumerator()
            => new ConstantArrayEnumerator<byte>(Element0Pointer, 256);
    }

    [StructLayout(LayoutKind.Explicit, Size = 1024)]
    public unsafe partial struct ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxReal_256
    {
        [FieldOffset(0)] private float Element0;

        private float* Element0Pointer
        {
            get
            {
                fixed (float* pElement0 = &Element0)
                { return pElement0; }
            }
        }

        public ref float this[int index]
        {
            get
            {
                if ((uint)index < 256)
                { return ref Element0Pointer[index]; }
                else
                { throw new IndexOutOfRangeException(); }
            }
        }

        public const int Length = 256;

        public override string ToString()
            => $"{typeof(float)}[256]";

        public float[] ToArray()
        {
            float[] result = new float[256];

            for (int i = 0; i < 256; i++)
            { result[i] = this[i]; }

            return result;
        }

        public Span<float> AsSpan()
            => new Span<float>(Element0Pointer, 256);

        public ConstantArrayEnumerator<float> GetEnumerator()
            => new ConstantArrayEnumerator<float>(Element0Pointer, 256);
    }
}
