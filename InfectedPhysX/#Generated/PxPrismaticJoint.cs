// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public unsafe partial struct PxPrismaticJoint
    {
        [FieldOffset(0)] public PxJoint Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getPosition()
        {
            fixed (PxPrismaticJoint* @this = &this)
            { return VirtualMethodTablePointer->getPosition(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getVelocity()
        {
            fixed (PxPrismaticJoint* @this = &this)
            { return VirtualMethodTablePointer->getVelocity(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setLimit(PxJointLinearLimitPair* arg0)
        {
            fixed (PxPrismaticJoint* @this = &this)
            { VirtualMethodTablePointer->setLimit(@this, arg0); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxJointLinearLimitPair getLimit()
        {
            fixed (PxPrismaticJoint* @this = &this)
            {
                PxJointLinearLimitPair __returnBuffer;
                VirtualMethodTablePointer->getLimit(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setPrismaticJointFlags(PxPrismaticJointFlags* flags)
        {
            fixed (PxPrismaticJoint* @this = &this)
            { VirtualMethodTablePointer->setPrismaticJointFlags(@this, flags); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setPrismaticJointFlag(PxPrismaticJointFlags flag, bool value)
        {
            fixed (PxPrismaticJoint* @this = &this)
            { VirtualMethodTablePointer->setPrismaticJointFlag(@this, flag, value); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxPrismaticJointFlags getPrismaticJointFlags()
        {
            fixed (PxPrismaticJoint* @this = &this)
            {
                PxPrismaticJointFlags __returnBuffer;
                VirtualMethodTablePointer->getPrismaticJointFlags(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setProjectionLinearTolerance(float tolerance)
        {
            fixed (PxPrismaticJoint* @this = &this)
            { VirtualMethodTablePointer->setProjectionLinearTolerance(@this, tolerance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getProjectionLinearTolerance()
        {
            fixed (PxPrismaticJoint* @this = &this)
            { return VirtualMethodTablePointer->getProjectionLinearTolerance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setProjectionAngularTolerance(float tolerance)
        {
            fixed (PxPrismaticJoint* @this = &this)
            { VirtualMethodTablePointer->setProjectionAngularTolerance(@this, tolerance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getProjectionAngularTolerance()
        {
            fixed (PxPrismaticJoint* @this = &this)
            { return VirtualMethodTablePointer->getProjectionAngularTolerance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte* getConcreteTypeName()
        {
            fixed (PxPrismaticJoint* @this = &this)
            { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, void> release;
            /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, byte*> getConcreteTypeName;
            /// <summary>Virtual method pointer for `isReleasable`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, NativeBoolean> isReleasable;
            /// <summary>Virtual method pointer for `~PxPrismaticJoint`</summary>
            public void* __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `isKindOf`</summary>
            public void* isKindOf;
            /// <summary>Virtual method pointer for `setActors`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxRigidActor*, PxRigidActor*, void> setActors;
            /// <summary>Virtual method pointer for `getActors`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxRigidActor**, PxRigidActor**, void> getActors;
            /// <summary>Virtual method pointer for `setLocalPose`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxJointActorIndex, PxTransform*, void> setLocalPose;
            /// <summary>Virtual method pointer for `getLocalPose`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxTransform*, PxJointActorIndex, PxTransform*> getLocalPose;
            /// <summary>Virtual method pointer for `getRelativeTransform`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxTransform*, PxTransform*> getRelativeTransform;
            /// <summary>Virtual method pointer for `getRelativeLinearVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxVec3*, PxVec3*> getRelativeLinearVelocity;
            /// <summary>Virtual method pointer for `getRelativeAngularVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxVec3*, PxVec3*> getRelativeAngularVelocity;
            /// <summary>Virtual method pointer for `setBreakForce`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float, float, void> setBreakForce;
            /// <summary>Virtual method pointer for `getBreakForce`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float*, float*, void> getBreakForce;
            /// <summary>Virtual method pointer for `setConstraintFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxConstraintFlags*, void> setConstraintFlags;
            /// <summary>Virtual method pointer for `setConstraintFlag`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxConstraintFlags, NativeBoolean, void> setConstraintFlag;
            /// <summary>Virtual method pointer for `getConstraintFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxConstraintFlags*, PxConstraintFlags*> getConstraintFlags;
            /// <summary>Virtual method pointer for `setInvMassScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float, void> setInvMassScale0;
            /// <summary>Virtual method pointer for `getInvMassScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float> getInvMassScale0;
            /// <summary>Virtual method pointer for `setInvInertiaScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float, void> setInvInertiaScale0;
            /// <summary>Virtual method pointer for `getInvInertiaScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float> getInvInertiaScale0;
            /// <summary>Virtual method pointer for `setInvMassScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float, void> setInvMassScale1;
            /// <summary>Virtual method pointer for `getInvMassScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float> getInvMassScale1;
            /// <summary>Virtual method pointer for `setInvInertiaScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float, void> setInvInertiaScale1;
            /// <summary>Virtual method pointer for `getInvInertiaScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float> getInvInertiaScale1;
            /// <summary>Virtual method pointer for `getConstraint`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxConstraint*> getConstraint;
            /// <summary>Virtual method pointer for `setName`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, byte*, void> setName;
            /// <summary>Virtual method pointer for `getName`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, byte*> getName;
            /// <summary>Virtual method pointer for `getScene`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxScene*> getScene;
            /// <summary>Virtual method pointer for `getPosition`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float> getPosition;
            /// <summary>Virtual method pointer for `getVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float> getVelocity;
            /// <summary>Virtual method pointer for `setLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxJointLinearLimitPair*, void> setLimit;
            /// <summary>Virtual method pointer for `getLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxJointLinearLimitPair*, PxJointLinearLimitPair*> getLimit;
            /// <summary>Virtual method pointer for `setPrismaticJointFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxPrismaticJointFlags*, void> setPrismaticJointFlags;
            /// <summary>Virtual method pointer for `setPrismaticJointFlag`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxPrismaticJointFlags, NativeBoolean, void> setPrismaticJointFlag;
            /// <summary>Virtual method pointer for `getPrismaticJointFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, PxPrismaticJointFlags*, PxPrismaticJointFlags*> getPrismaticJointFlags;
            /// <summary>Virtual method pointer for `setProjectionLinearTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float, void> setProjectionLinearTolerance;
            /// <summary>Virtual method pointer for `getProjectionLinearTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float> getProjectionLinearTolerance;
            /// <summary>Virtual method pointer for `setProjectionAngularTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float, void> setProjectionAngularTolerance;
            /// <summary>Virtual method pointer for `getProjectionAngularTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxPrismaticJoint*, float> getProjectionAngularTolerance;
        }
    }
}
