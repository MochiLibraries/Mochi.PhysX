// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public unsafe partial struct PxTaskManager
    {
        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setCpuDispatcher(PxCpuDispatcher* @ref)
        {
            fixed (PxTaskManager* @this = &this)
            { VirtualMethodTablePointer->setCpuDispatcher(@this, @ref); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxCpuDispatcher* getCpuDispatcher()
        {
            fixed (PxTaskManager* @this = &this)
            { return VirtualMethodTablePointer->getCpuDispatcher(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void resetDependencies()
        {
            fixed (PxTaskManager* @this = &this)
            { VirtualMethodTablePointer->resetDependencies(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void startSimulation()
        {
            fixed (PxTaskManager* @this = &this)
            { VirtualMethodTablePointer->startSimulation(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void stopSimulation()
        {
            fixed (PxTaskManager* @this = &this)
            { VirtualMethodTablePointer->stopSimulation(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void taskCompleted(PxTask* task)
        {
            fixed (PxTaskManager* @this = &this)
            { VirtualMethodTablePointer->taskCompleted(@this, task); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNamedTask(byte* name)
        {
            fixed (PxTaskManager* @this = &this)
            { return VirtualMethodTablePointer->getNamedTask(@this, name); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint submitNamedTask(PxTask* task, byte* name, PxTaskType type = PxTaskType.TT_CPU)
        {
            fixed (PxTaskManager* @this = &this)
            { return VirtualMethodTablePointer->submitNamedTask(@this, task, name, type); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint submitUnnamedTask(PxTask* task, PxTaskType type = PxTaskType.TT_CPU)
        {
            fixed (PxTaskManager* @this = &this)
            { return VirtualMethodTablePointer->submitUnnamedTask(@this, task, type); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTask* getTaskFromID(uint id)
        {
            fixed (PxTaskManager* @this = &this)
            { return VirtualMethodTablePointer->getTaskFromID(@this, id); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxTaskManager* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?createTaskManager@PxTaskManager@physx@@SAPEAV12@AEAVPxErrorCallback@2@PEAVPxCpuDispatcher@2@@Z", ExactSpelling = true)]
        public static extern PxTaskManager* createTaskManager(PxErrorCallback* errorCallback, PxCpuDispatcher* arg1 = null);

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `setCpuDispatcher`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, PxCpuDispatcher*, void> setCpuDispatcher;
            /// <summary>Virtual method pointer for `getCpuDispatcher`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, PxCpuDispatcher*> getCpuDispatcher;
            /// <summary>Virtual method pointer for `resetDependencies`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, void> resetDependencies;
            /// <summary>Virtual method pointer for `startSimulation`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, void> startSimulation;
            /// <summary>Virtual method pointer for `stopSimulation`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, void> stopSimulation;
            /// <summary>Virtual method pointer for `taskCompleted`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, PxTask*, void> taskCompleted;
            /// <summary>Virtual method pointer for `getNamedTask`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, byte*, uint> getNamedTask;
            /// <summary>Virtual method pointer for `submitNamedTask`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, PxTask*, byte*, PxTaskType, uint> submitNamedTask;
            /// <summary>Virtual method pointer for `submitUnnamedTask`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, PxTask*, PxTaskType, uint> submitUnnamedTask;
            /// <summary>Virtual method pointer for `getTaskFromID`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, uint, PxTask*> getTaskFromID;
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxTaskManager*, void> release;
            /// <summary>Virtual method pointer for `~PxTaskManager`</summary>
            public void* __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `finishBefore`</summary>
            public void* finishBefore;
            /// <summary>Virtual method pointer for `startAfter`</summary>
            public void* startAfter;
            /// <summary>Virtual method pointer for `addReference`</summary>
            public void* addReference_0;
            /// <summary>Virtual method pointer for `addReference`</summary>
            public void* addReference_1;
            /// <summary>Virtual method pointer for `decrReference`</summary>
            public void* decrReference_0;
            /// <summary>Virtual method pointer for `decrReference`</summary>
            public void* decrReference_1;
            /// <summary>Virtual method pointer for `getReference`</summary>
            public void* getReference;
        }
    }
}
