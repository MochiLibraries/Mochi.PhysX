// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public unsafe partial struct PxController
    {
        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxControllerShapeType getType()
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->getType(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxControllerCollisionFlags move(PxVec3* disp, float minDist, float elapsedTime, PxControllerFilters* filters, PxObstacleContext* obstacles = null)
        {
            fixed (PxController* @this = &this)
            {
                PxControllerCollisionFlags __returnBuffer;
                VirtualMethodTablePointer->move(@this, &__returnBuffer, disp, minDist, elapsedTime, filters, obstacles);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool setPosition(PxExtendedVec3* position)
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->setPosition(@this, position); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxExtendedVec3* getPosition()
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->getPosition(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool setFootPosition(PxExtendedVec3* position)
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->setFootPosition(@this, position); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxExtendedVec3 getFootPosition()
        {
            fixed (PxController* @this = &this)
            {
                PxExtendedVec3 __returnBuffer;
                VirtualMethodTablePointer->getFootPosition(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxRigidDynamic* getActor()
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->getActor(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setStepOffset(float offset)
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->setStepOffset(@this, offset); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getStepOffset()
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->getStepOffset(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setNonWalkableMode(PxControllerNonWalkableMode flag)
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->setNonWalkableMode(@this, flag); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxControllerNonWalkableMode getNonWalkableMode()
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->getNonWalkableMode(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getContactOffset()
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->getContactOffset(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setContactOffset(float offset)
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->setContactOffset(@this, offset); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3 getUpDirection()
        {
            fixed (PxController* @this = &this)
            {
                PxVec3 __returnBuffer;
                VirtualMethodTablePointer->getUpDirection(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setUpDirection(PxVec3* up)
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->setUpDirection(@this, up); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getSlopeLimit()
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->getSlopeLimit(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSlopeLimit(float slopeLimit)
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->setSlopeLimit(@this, slopeLimit); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void invalidateCache()
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->invalidateCache(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxScene* getScene()
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->getScene(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void* getUserData()
        {
            fixed (PxController* @this = &this)
            { return VirtualMethodTablePointer->getUserData(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setUserData(void* userData)
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->setUserData(@this, userData); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void getState(PxControllerState* state)
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->getState(@this, state); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void getStats(PxControllerStats* stats)
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->getStats(@this, stats); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void resize(float height)
        {
            fixed (PxController* @this = &this)
            { VirtualMethodTablePointer->resize(@this, height); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `getType`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxControllerShapeType> getType;
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, void> release;
            /// <summary>Virtual method pointer for `move`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxControllerCollisionFlags*, PxVec3*, float, float, PxControllerFilters*, PxObstacleContext*, PxControllerCollisionFlags*> move;
            /// <summary>Virtual method pointer for `setPosition`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxExtendedVec3*, NativeBoolean> setPosition;
            /// <summary>Virtual method pointer for `getPosition`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxExtendedVec3*> getPosition;
            /// <summary>Virtual method pointer for `setFootPosition`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxExtendedVec3*, NativeBoolean> setFootPosition;
            /// <summary>Virtual method pointer for `getFootPosition`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxExtendedVec3*, PxExtendedVec3*> getFootPosition;
            /// <summary>Virtual method pointer for `getActor`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxRigidDynamic*> getActor;
            /// <summary>Virtual method pointer for `setStepOffset`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, float, void> setStepOffset;
            /// <summary>Virtual method pointer for `getStepOffset`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, float> getStepOffset;
            /// <summary>Virtual method pointer for `setNonWalkableMode`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxControllerNonWalkableMode, void> setNonWalkableMode;
            /// <summary>Virtual method pointer for `getNonWalkableMode`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxControllerNonWalkableMode> getNonWalkableMode;
            /// <summary>Virtual method pointer for `getContactOffset`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, float> getContactOffset;
            /// <summary>Virtual method pointer for `setContactOffset`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, float, void> setContactOffset;
            /// <summary>Virtual method pointer for `getUpDirection`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxVec3*, PxVec3*> getUpDirection;
            /// <summary>Virtual method pointer for `setUpDirection`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxVec3*, void> setUpDirection;
            /// <summary>Virtual method pointer for `getSlopeLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, float> getSlopeLimit;
            /// <summary>Virtual method pointer for `setSlopeLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, float, void> setSlopeLimit;
            /// <summary>Virtual method pointer for `invalidateCache`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, void> invalidateCache;
            /// <summary>Virtual method pointer for `getScene`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxScene*> getScene;
            /// <summary>Virtual method pointer for `getUserData`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, void*> getUserData;
            /// <summary>Virtual method pointer for `setUserData`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, void*, void> setUserData;
            /// <summary>Virtual method pointer for `getState`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxControllerState*, void> getState;
            /// <summary>Virtual method pointer for `getStats`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, PxControllerStats*, void> getStats;
            /// <summary>Virtual method pointer for `resize`</summary>
            public delegate* unmanaged[Cdecl]<PxController*, float, void> resize;
            /// <summary>Virtual method pointer for `~PxController`</summary>
            public void* __DeletingDestructorPointer;
        }
    }
}
