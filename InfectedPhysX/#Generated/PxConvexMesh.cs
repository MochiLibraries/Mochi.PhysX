// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct PxConvexMesh
    {
        [FieldOffset(0)] public PxBase Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbVertices()
        {
            fixed (PxConvexMesh* @this = &this)
            { return VirtualMethodTablePointer->getNbVertices(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3* getVertices()
        {
            fixed (PxConvexMesh* @this = &this)
            { return VirtualMethodTablePointer->getVertices(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte* getIndexBuffer()
        {
            fixed (PxConvexMesh* @this = &this)
            { return VirtualMethodTablePointer->getIndexBuffer(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbPolygons()
        {
            fixed (PxConvexMesh* @this = &this)
            { return VirtualMethodTablePointer->getNbPolygons(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool getPolygonData(uint index, PxHullPolygon* data)
        {
            fixed (PxConvexMesh* @this = &this)
            { return VirtualMethodTablePointer->getPolygonData(@this, index, data); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxConvexMesh* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getReferenceCount()
        {
            fixed (PxConvexMesh* @this = &this)
            { return VirtualMethodTablePointer->getReferenceCount(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void acquireReference()
        {
            fixed (PxConvexMesh* @this = &this)
            { VirtualMethodTablePointer->acquireReference(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void getMassInformation(float* mass, PxMat33* localInertia, PxVec3* localCenterOfMass)
        {
            fixed (PxConvexMesh* @this = &this)
            { VirtualMethodTablePointer->getMassInformation(@this, mass, localInertia, localCenterOfMass); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxBounds3 getLocalBounds()
        {
            fixed (PxConvexMesh* @this = &this)
            {
                PxBounds3 __returnBuffer;
                VirtualMethodTablePointer->getLocalBounds(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte* getConcreteTypeName()
        {
            fixed (PxConvexMesh* @this = &this)
            { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool isGpuCompatible()
        {
            fixed (PxConvexMesh* @this = &this)
            { return VirtualMethodTablePointer->isGpuCompatible(@this); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, void> release;
            /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, byte*> getConcreteTypeName;
            /// <summary>Virtual method pointer for `isReleasable`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, NativeBoolean> isReleasable;
            /// <summary>Virtual method pointer for `~PxConvexMesh`</summary>
            public void* __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `isKindOf`</summary>
            public void* isKindOf;
            /// <summary>Virtual method pointer for `getNbVertices`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, uint> getNbVertices;
            /// <summary>Virtual method pointer for `getVertices`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, PxVec3*> getVertices;
            /// <summary>Virtual method pointer for `getIndexBuffer`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, byte*> getIndexBuffer;
            /// <summary>Virtual method pointer for `getNbPolygons`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, uint> getNbPolygons;
            /// <summary>Virtual method pointer for `getPolygonData`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, uint, PxHullPolygon*, NativeBoolean> getPolygonData;
            /// <summary>Virtual method pointer for `getReferenceCount`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, uint> getReferenceCount;
            /// <summary>Virtual method pointer for `acquireReference`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, void> acquireReference;
            /// <summary>Virtual method pointer for `getMassInformation`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, float*, PxMat33*, PxVec3*, void> getMassInformation;
            /// <summary>Virtual method pointer for `getLocalBounds`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, PxBounds3*, PxBounds3*> getLocalBounds;
            /// <summary>Virtual method pointer for `isGpuCompatible`</summary>
            public delegate* unmanaged[Cdecl]<PxConvexMesh*, NativeBoolean> isGpuCompatible;
        }
    }
}
