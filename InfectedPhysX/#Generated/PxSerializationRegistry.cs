// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public unsafe partial struct PxSerializationRegistry
    {
        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void registerSerializer(ushort type, PxSerializer* serializer)
        {
            fixed (PxSerializationRegistry* @this = &this)
            { VirtualMethodTablePointer->registerSerializer(@this, type, serializer); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxSerializer* unregisterSerializer(ushort type)
        {
            fixed (PxSerializationRegistry* @this = &this)
            { return VirtualMethodTablePointer->unregisterSerializer(@this, type); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void registerBinaryMetaDataCallback(delegate* unmanaged[Cdecl]<PxOutputStream*, void> callback)
        {
            fixed (PxSerializationRegistry* @this = &this)
            { VirtualMethodTablePointer->registerBinaryMetaDataCallback(@this, callback); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxSerializer* getSerializer(ushort type)
        {
            fixed (PxSerializationRegistry* @this = &this)
            { return VirtualMethodTablePointer->getSerializer(@this, type); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void registerRepXSerializer(ushort type, PxRepXSerializer* serializer)
        {
            fixed (PxSerializationRegistry* @this = &this)
            { VirtualMethodTablePointer->registerRepXSerializer(@this, type, serializer); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxRepXSerializer* unregisterRepXSerializer(ushort type)
        {
            fixed (PxSerializationRegistry* @this = &this)
            { return VirtualMethodTablePointer->unregisterRepXSerializer(@this, type); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxRepXSerializer* getRepXSerializer(byte* typeName)
        {
            fixed (PxSerializationRegistry* @this = &this)
            { return VirtualMethodTablePointer->getRepXSerializer(@this, typeName); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxSerializationRegistry* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `registerSerializer`</summary>
            public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, ushort, PxSerializer*, void> registerSerializer;
            /// <summary>Virtual method pointer for `unregisterSerializer`</summary>
            public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, ushort, PxSerializer*> unregisterSerializer;
            /// <summary>Virtual method pointer for `registerBinaryMetaDataCallback`</summary>
            public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, delegate* unmanaged[Cdecl]<PxOutputStream*, void>, void> registerBinaryMetaDataCallback;
            /// <summary>Virtual method pointer for `getSerializer`</summary>
            public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, ushort, PxSerializer*> getSerializer;
            /// <summary>Virtual method pointer for `registerRepXSerializer`</summary>
            public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, ushort, PxRepXSerializer*, void> registerRepXSerializer;
            /// <summary>Virtual method pointer for `unregisterRepXSerializer`</summary>
            public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, ushort, PxRepXSerializer*> unregisterRepXSerializer;
            /// <summary>Virtual method pointer for `getRepXSerializer`</summary>
            public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, byte*, PxRepXSerializer*> getRepXSerializer;
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxSerializationRegistry*, void> release;
            /// <summary>Virtual method pointer for `~PxSerializationRegistry`</summary>
            public void* __DeletingDestructorPointer;
        }
    }
}
