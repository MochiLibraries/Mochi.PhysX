// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public unsafe partial struct PxLightCpuTask
    {
        [FieldOffset(0)] public PxBaseTask Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Destructor()
        {
            fixed (PxLightCpuTask* @this = &this)
            { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setContinuation@PxLightCpuTask@physx@@QEAAXAEAVPxTaskManager@2@PEAVPxBaseTask@2@@Z", ExactSpelling = true)]
        private static extern void setContinuation_PInvoke(PxLightCpuTask* @this, PxTaskManager* tm, PxBaseTask* c);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setContinuation(PxTaskManager* tm, PxBaseTask* c)
        {
            fixed (PxLightCpuTask* @this = &this)
            { setContinuation_PInvoke(@this, tm, c); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setContinuation@PxLightCpuTask@physx@@QEAAXPEAVPxBaseTask@2@@Z", ExactSpelling = true)]
        private static extern void setContinuation_PInvoke(PxLightCpuTask* @this, PxBaseTask* c);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setContinuation(PxBaseTask* c)
        {
            fixed (PxLightCpuTask* @this = &this)
            { setContinuation_PInvoke(@this, c); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getContinuation@PxLightCpuTask@physx@@QEBAPEAVPxBaseTask@2@XZ", ExactSpelling = true)]
        private static extern PxBaseTask* getContinuation_PInvoke(PxLightCpuTask* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxBaseTask* getContinuation()
        {
            fixed (PxLightCpuTask* @this = &this)
            { return getContinuation_PInvoke(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void removeReference()
        {
            fixed (PxLightCpuTask* @this = &this)
            { VirtualMethodTablePointer->removeReference(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int getReference()
        {
            fixed (PxLightCpuTask* @this = &this)
            { return VirtualMethodTablePointer->getReference(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void addReference()
        {
            fixed (PxLightCpuTask* @this = &this)
            { VirtualMethodTablePointer->addReference(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxLightCpuTask* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [FieldOffset(24)] public PxBaseTask* mCont;

        [FieldOffset(32)] public int mRefCount;

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `~PxLightCpuTask`</summary>
            public delegate* unmanaged[Cdecl]<PxLightCpuTask*, void> __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `run`</summary>
            public delegate* unmanaged[Cdecl]<PxLightCpuTask*, void> run;
            /// <summary>Virtual method pointer for `getName`</summary>
            public delegate* unmanaged[Cdecl]<PxLightCpuTask*, byte*> getName;
            /// <summary>Virtual method pointer for `addReference`</summary>
            public delegate* unmanaged[Cdecl]<PxLightCpuTask*, void> addReference;
            /// <summary>Virtual method pointer for `removeReference`</summary>
            public delegate* unmanaged[Cdecl]<PxLightCpuTask*, void> removeReference;
            /// <summary>Virtual method pointer for `getReference`</summary>
            public delegate* unmanaged[Cdecl]<PxLightCpuTask*, int> getReference;
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxLightCpuTask*, void> release;
        }
    }
}
