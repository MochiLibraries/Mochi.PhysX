// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct PxScene
    {
        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setFlag(PxSceneFlags flag, bool value)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setFlag(@this, flag, value); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxSceneFlags getFlags()
        {
            fixed (PxScene* @this = &this)
            {
                PxSceneFlags __returnBuffer;
                VirtualMethodTablePointer->getFlags(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setLimits(PxSceneLimits* limits)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setLimits(@this, limits); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxSceneLimits getLimits()
        {
            fixed (PxScene* @this = &this)
            {
                PxSceneLimits __returnBuffer;
                VirtualMethodTablePointer->getLimits(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxPhysics* getPhysics()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getPhysics(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getTimestamp()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getTimestamp(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void addArticulation(PxArticulationBase* articulation)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->addArticulation(@this, articulation); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void removeArticulation(PxArticulationBase* articulation, bool wakeOnLostTouch = true)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->removeArticulation(@this, articulation, wakeOnLostTouch); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void addActor(PxActor* actor, PxBVHStructure* bvhStructure = null)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->addActor(@this, actor, bvhStructure); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void addActors(PxActor** actors, uint nbActors)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->addActors_1(@this, actors, nbActors); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void addActors(PxPruningStructure* pruningStructure)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->addActors_0(@this, pruningStructure); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void removeActor(PxActor* actor, bool wakeOnLostTouch = true)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->removeActor(@this, actor, wakeOnLostTouch); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void removeActors(PxActor** actors, uint nbActors, bool wakeOnLostTouch = true)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->removeActors(@this, actors, nbActors, wakeOnLostTouch); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void addAggregate(PxAggregate* aggregate)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->addAggregate(@this, aggregate); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void removeAggregate(PxAggregate* aggregate, bool wakeOnLostTouch = true)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->removeAggregate(@this, aggregate, wakeOnLostTouch); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void addCollection(PxCollection* collection)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->addCollection(@this, collection); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbActors(PxActorTypeFlags* types)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getNbActors(@this, types); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getActors(PxActorTypeFlags* types, PxActor** userBuffer, uint bufferSize, uint startIndex = 0)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getActors(@this, types, userBuffer, bufferSize, startIndex); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxActor** getActiveActors(uint* nbActorsOut)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getActiveActors(@this, nbActorsOut); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbArticulations()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getNbArticulations(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getArticulations(PxArticulationBase** userBuffer, uint bufferSize, uint startIndex = 0)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getArticulations(@this, userBuffer, bufferSize, startIndex); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbConstraints()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getNbConstraints(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getConstraints(PxConstraint** userBuffer, uint bufferSize, uint startIndex = 0)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getConstraints(@this, userBuffer, bufferSize, startIndex); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbAggregates()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getNbAggregates(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getAggregates(PxAggregate** userBuffer, uint bufferSize, uint startIndex = 0)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getAggregates(@this, userBuffer, bufferSize, startIndex); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setDominanceGroupPair(byte group1, byte group2, PxDominanceGroupPair* dominance)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setDominanceGroupPair(@this, group1, group2, dominance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxDominanceGroupPair getDominanceGroupPair(byte group1, byte group2)
        {
            fixed (PxScene* @this = &this)
            {
                PxDominanceGroupPair __returnBuffer;
                VirtualMethodTablePointer->getDominanceGroupPair(@this, &__returnBuffer, group1, group2);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxCpuDispatcher* getCpuDispatcher()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getCpuDispatcher(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxCudaContextManager* getCudaContextManager()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getCudaContextManager(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte createClient()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->createClient(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSimulationEventCallback(PxSimulationEventCallback* callback)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setSimulationEventCallback(@this, callback); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxSimulationEventCallback* getSimulationEventCallback()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getSimulationEventCallback(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setContactModifyCallback(PxContactModifyCallback* callback)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setContactModifyCallback(@this, callback); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setCCDContactModifyCallback(PxCCDContactModifyCallback* callback)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setCCDContactModifyCallback(@this, callback); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxContactModifyCallback* getContactModifyCallback()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getContactModifyCallback(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxCCDContactModifyCallback* getCCDContactModifyCallback()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getCCDContactModifyCallback(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setBroadPhaseCallback(PxBroadPhaseCallback* callback)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setBroadPhaseCallback(@this, callback); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxBroadPhaseCallback* getBroadPhaseCallback()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getBroadPhaseCallback(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setFilterShaderData(void* data, uint dataSize)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setFilterShaderData(@this, data, dataSize); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void* getFilterShaderData()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getFilterShaderData(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getFilterShaderDataSize()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getFilterShaderDataSize(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public delegate* unmanaged[Cdecl]<PxFilterFlags*, uint, PxFilterData*, uint, PxFilterData*, PxPairFlags*, void*, uint, PxFilterFlags*> getFilterShader()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getFilterShader(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxSimulationFilterCallback* getFilterCallback()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getFilterCallback(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void resetFiltering(PxActor* actor)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->resetFiltering_1(@this, actor); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void resetFiltering(PxRigidActor* actor, PxShape** shapes, uint shapeCount)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->resetFiltering_0(@this, actor, shapes, shapeCount); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxPairFilteringMode getKinematicKinematicFilteringMode()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getKinematicKinematicFilteringMode(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxPairFilteringMode getStaticKinematicFilteringMode()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getStaticKinematicFilteringMode(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void simulate(float elapsedTime, PxBaseTask* completionTask = null, void* scratchMemBlock = null, uint scratchMemBlockSize = 0, bool controlSimulation = true)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->simulate(@this, elapsedTime, completionTask, scratchMemBlock, scratchMemBlockSize, controlSimulation); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void advance(PxBaseTask* completionTask = null)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->advance(@this, completionTask); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void collide(float elapsedTime, PxBaseTask* completionTask = null, void* scratchMemBlock = null, uint scratchMemBlockSize = 0, bool controlSimulation = true)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->collide(@this, elapsedTime, completionTask, scratchMemBlock, scratchMemBlockSize, controlSimulation); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool checkResults(bool block = false)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->checkResults(@this, block); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool fetchCollision(bool block = false)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->fetchCollision(@this, block); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool fetchResults(bool block = false, uint* errorState = null)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->fetchResults(@this, block, errorState); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool fetchResultsStart(PxContactPairHeader** contactPairs, uint* nbContactPairs, bool block = false)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->fetchResultsStart(@this, contactPairs, nbContactPairs, block); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void processCallbacks(PxBaseTask* continuation)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->processCallbacks(@this, continuation); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void fetchResultsFinish(uint* errorState = null)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->fetchResultsFinish(@this, errorState); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void flushSimulation(bool sendPendingReports = false)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->flushSimulation(@this, sendPendingReports); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setGravity(PxVec3* vec)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setGravity(@this, vec); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3 getGravity()
        {
            fixed (PxScene* @this = &this)
            {
                PxVec3 __returnBuffer;
                VirtualMethodTablePointer->getGravity(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setBounceThresholdVelocity(float t)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setBounceThresholdVelocity(@this, t); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getBounceThresholdVelocity()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getBounceThresholdVelocity(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setCCDMaxPasses(uint ccdMaxPasses)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setCCDMaxPasses(@this, ccdMaxPasses); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getCCDMaxPasses()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getCCDMaxPasses(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getFrictionOffsetThreshold()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getFrictionOffsetThreshold(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setFrictionType(PxFrictionType frictionType)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setFrictionType(@this, frictionType); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxFrictionType getFrictionType()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getFrictionType(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool setVisualizationParameter(PxVisualizationParameter param, float value)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->setVisualizationParameter(@this, param, value); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getVisualizationParameter(PxVisualizationParameter paramEnum)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getVisualizationParameter(@this, paramEnum); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setVisualizationCullingBox(PxBounds3* box)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setVisualizationCullingBox(@this, box); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxBounds3 getVisualizationCullingBox()
        {
            fixed (PxScene* @this = &this)
            {
                PxBounds3 __returnBuffer;
                VirtualMethodTablePointer->getVisualizationCullingBox(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxRenderBuffer* getRenderBuffer()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getRenderBuffer(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void getSimulationStatistics(PxSimulationStatistics* stats)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->getSimulationStatistics(@this, stats); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxPruningStructureType getStaticStructure()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getStaticStructure(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxPruningStructureType getDynamicStructure()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getDynamicStructure(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void flushQueryUpdates()
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->flushQueryUpdates(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxBatchQuery* createBatchQuery(PxBatchQueryDesc* desc)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->createBatchQuery(@this, desc); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setDynamicTreeRebuildRateHint(uint dynamicTreeRebuildRateHint)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setDynamicTreeRebuildRateHint(@this, dynamicTreeRebuildRateHint); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getDynamicTreeRebuildRateHint()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getDynamicTreeRebuildRateHint(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void forceDynamicTreeRebuild(bool rebuildStaticStructure, bool rebuildDynamicStructure)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->forceDynamicTreeRebuild(@this, rebuildStaticStructure, rebuildDynamicStructure); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSceneQueryUpdateMode(PxSceneQueryUpdateMode updateMode)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setSceneQueryUpdateMode(@this, updateMode); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxSceneQueryUpdateMode getSceneQueryUpdateMode()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getSceneQueryUpdateMode(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void sceneQueriesUpdate(PxBaseTask* completionTask = null, bool controlSimulation = true)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->sceneQueriesUpdate(@this, completionTask, controlSimulation); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool checkQueries(bool block = false)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->checkQueries(@this, block); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool fetchQueries(bool block = false)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->fetchQueries(@this, block); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool raycast(PxVec3* origin, PxVec3* unitDir, float distance, /* Failed to emit TranslatedParameter hitCall: Failed to resolve `Ref resolved by PxHitCallback` during emit time. */
        int* hitCall, PxHitFlags* hitFlags, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall = null, PxQueryCache* cache = null)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->raycast(@this, origin, unitDir, distance, hitCall, hitFlags, filterData, filterCall, cache); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool sweep(PxGeometry* geometry, PxTransform* pose, PxVec3* unitDir, float distance, /* Failed to emit TranslatedParameter hitCall: Failed to resolve `Ref resolved by PxHitCallback` during emit time. */
        int* hitCall, PxHitFlags* hitFlags, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall = null, PxQueryCache* cache = null, float inflation = 0f)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->sweep(@this, geometry, pose, unitDir, distance, hitCall, hitFlags, filterData, filterCall, cache, inflation); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool overlap(PxGeometry* geometry, PxTransform* pose, /* Failed to emit TranslatedParameter hitCall: Failed to resolve `Ref resolved by PxHitCallback` during emit time. */
        int* hitCall, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall = null)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->overlap(@this, geometry, pose, hitCall, filterData, filterCall); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getSceneQueryStaticTimestamp()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getSceneQueryStaticTimestamp(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxBroadPhaseType getBroadPhaseType()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getBroadPhaseType(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool getBroadPhaseCaps(PxBroadPhaseCaps* caps)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getBroadPhaseCaps(@this, caps); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbBroadPhaseRegions()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getNbBroadPhaseRegions(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getBroadPhaseRegions(PxBroadPhaseRegionInfo* userBuffer, uint bufferSize, uint startIndex = 0)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getBroadPhaseRegions(@this, userBuffer, bufferSize, startIndex); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint addBroadPhaseRegion(PxBroadPhaseRegion* region, bool populateRegion = false)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->addBroadPhaseRegion(@this, region, populateRegion); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool removeBroadPhaseRegion(uint handle)
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->removeBroadPhaseRegion(@this, handle); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTaskManager* getTaskManager()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getTaskManager(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void lockRead(byte* file = null, uint line = 0)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->lockRead(@this, file, line); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void unlockRead()
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->unlockRead(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void lockWrite(byte* file = null, uint line = 0)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->lockWrite(@this, file, line); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void unlockWrite()
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->unlockWrite(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setNbContactDataBlocks(uint numBlocks)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setNbContactDataBlocks(@this, numBlocks); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbContactDataBlocksUsed()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getNbContactDataBlocksUsed(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getMaxNbContactDataBlocksUsed()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getMaxNbContactDataBlocksUsed(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getContactReportStreamBufferSize()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getContactReportStreamBufferSize(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSolverBatchSize(uint solverBatchSize)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setSolverBatchSize(@this, solverBatchSize); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getSolverBatchSize()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getSolverBatchSize(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSolverArticulationBatchSize(uint solverBatchSize)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->setSolverArticulationBatchSize(@this, solverBatchSize); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getSolverArticulationBatchSize()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getSolverArticulationBatchSize(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getWakeCounterResetValue()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getWakeCounterResetValue(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void shiftOrigin(PxVec3* shift)
        {
            fixed (PxScene* @this = &this)
            { VirtualMethodTablePointer->shiftOrigin(@this, shift); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxPvdSceneClient* getScenePvdClient()
        {
            fixed (PxScene* @this = &this)
            { return VirtualMethodTablePointer->getScenePvdClient(@this); }
        }

        [FieldOffset(8)] public void* userData;

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `~PxScene`</summary>
            public void* __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, void> release;
            /// <summary>Virtual method pointer for `setFlag`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxSceneFlags, NativeBoolean, void> setFlag;
            /// <summary>Virtual method pointer for `getFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxSceneFlags*, PxSceneFlags*> getFlags;
            /// <summary>Virtual method pointer for `setLimits`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxSceneLimits*, void> setLimits;
            /// <summary>Virtual method pointer for `getLimits`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxSceneLimits*, PxSceneLimits*> getLimits;
            /// <summary>Virtual method pointer for `getPhysics`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxPhysics*> getPhysics;
            /// <summary>Virtual method pointer for `getTimestamp`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getTimestamp;
            /// <summary>Virtual method pointer for `addArticulation`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxArticulationBase*, void> addArticulation;
            /// <summary>Virtual method pointer for `removeArticulation`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxArticulationBase*, NativeBoolean, void> removeArticulation;
            /// <summary>Virtual method pointer for `addActor`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxActor*, PxBVHStructure*, void> addActor;
            /// <summary>Virtual method pointer for `addActors`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxPruningStructure*, void> addActors_0;
            /// <summary>Virtual method pointer for `addActors`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxActor**, uint, void> addActors_1;
            /// <summary>Virtual method pointer for `removeActor`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxActor*, NativeBoolean, void> removeActor;
            /// <summary>Virtual method pointer for `removeActors`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxActor**, uint, NativeBoolean, void> removeActors;
            /// <summary>Virtual method pointer for `addAggregate`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxAggregate*, void> addAggregate;
            /// <summary>Virtual method pointer for `removeAggregate`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxAggregate*, NativeBoolean, void> removeAggregate;
            /// <summary>Virtual method pointer for `addCollection`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxCollection*, void> addCollection;
            /// <summary>Virtual method pointer for `getNbActors`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxActorTypeFlags*, uint> getNbActors;
            /// <summary>Virtual method pointer for `getActors`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxActorTypeFlags*, PxActor**, uint, uint, uint> getActors;
            /// <summary>Virtual method pointer for `getActiveActors`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint*, PxActor**> getActiveActors;
            /// <summary>Virtual method pointer for `getNbArticulations`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getNbArticulations;
            /// <summary>Virtual method pointer for `getArticulations`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxArticulationBase**, uint, uint, uint> getArticulations;
            /// <summary>Virtual method pointer for `getNbConstraints`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getNbConstraints;
            /// <summary>Virtual method pointer for `getConstraints`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxConstraint**, uint, uint, uint> getConstraints;
            /// <summary>Virtual method pointer for `getNbAggregates`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getNbAggregates;
            /// <summary>Virtual method pointer for `getAggregates`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxAggregate**, uint, uint, uint> getAggregates;
            /// <summary>Virtual method pointer for `setDominanceGroupPair`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, byte, byte, PxDominanceGroupPair*, void> setDominanceGroupPair;
            /// <summary>Virtual method pointer for `getDominanceGroupPair`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxDominanceGroupPair*, byte, byte, PxDominanceGroupPair*> getDominanceGroupPair;
            /// <summary>Virtual method pointer for `getCpuDispatcher`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxCpuDispatcher*> getCpuDispatcher;
            /// <summary>Virtual method pointer for `getCudaContextManager`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxCudaContextManager*> getCudaContextManager;
            /// <summary>Virtual method pointer for `createClient`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, byte> createClient;
            /// <summary>Virtual method pointer for `setSimulationEventCallback`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxSimulationEventCallback*, void> setSimulationEventCallback;
            /// <summary>Virtual method pointer for `getSimulationEventCallback`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxSimulationEventCallback*> getSimulationEventCallback;
            /// <summary>Virtual method pointer for `setContactModifyCallback`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxContactModifyCallback*, void> setContactModifyCallback;
            /// <summary>Virtual method pointer for `setCCDContactModifyCallback`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxCCDContactModifyCallback*, void> setCCDContactModifyCallback;
            /// <summary>Virtual method pointer for `getContactModifyCallback`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxContactModifyCallback*> getContactModifyCallback;
            /// <summary>Virtual method pointer for `getCCDContactModifyCallback`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxCCDContactModifyCallback*> getCCDContactModifyCallback;
            /// <summary>Virtual method pointer for `setBroadPhaseCallback`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBroadPhaseCallback*, void> setBroadPhaseCallback;
            /// <summary>Virtual method pointer for `getBroadPhaseCallback`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBroadPhaseCallback*> getBroadPhaseCallback;
            /// <summary>Virtual method pointer for `setFilterShaderData`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, void*, uint, void> setFilterShaderData;
            /// <summary>Virtual method pointer for `getFilterShaderData`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, void*> getFilterShaderData;
            /// <summary>Virtual method pointer for `getFilterShaderDataSize`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getFilterShaderDataSize;
            /// <summary>Virtual method pointer for `getFilterShader`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, delegate* unmanaged[Cdecl]<PxFilterFlags*, uint, PxFilterData*, uint, PxFilterData*, PxPairFlags*, void*, uint, PxFilterFlags*>> getFilterShader;
            /// <summary>Virtual method pointer for `getFilterCallback`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxSimulationFilterCallback*> getFilterCallback;
            /// <summary>Virtual method pointer for `resetFiltering`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxRigidActor*, PxShape**, uint, void> resetFiltering_0;
            /// <summary>Virtual method pointer for `resetFiltering`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxActor*, void> resetFiltering_1;
            /// <summary>Virtual method pointer for `getKinematicKinematicFilteringMode`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxPairFilteringMode> getKinematicKinematicFilteringMode;
            /// <summary>Virtual method pointer for `getStaticKinematicFilteringMode`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxPairFilteringMode> getStaticKinematicFilteringMode;
            /// <summary>Virtual method pointer for `simulate`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, float, PxBaseTask*, void*, uint, NativeBoolean, void> simulate;
            /// <summary>Virtual method pointer for `advance`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBaseTask*, void> advance;
            /// <summary>Virtual method pointer for `collide`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, float, PxBaseTask*, void*, uint, NativeBoolean, void> collide;
            /// <summary>Virtual method pointer for `checkResults`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, NativeBoolean, NativeBoolean> checkResults;
            /// <summary>Virtual method pointer for `fetchCollision`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, NativeBoolean, NativeBoolean> fetchCollision;
            /// <summary>Virtual method pointer for `fetchResults`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, NativeBoolean, uint*, NativeBoolean> fetchResults;
            /// <summary>Virtual method pointer for `fetchResultsStart`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxContactPairHeader**, uint*, NativeBoolean, NativeBoolean> fetchResultsStart;
            /// <summary>Virtual method pointer for `processCallbacks`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBaseTask*, void> processCallbacks;
            /// <summary>Virtual method pointer for `fetchResultsFinish`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint*, void> fetchResultsFinish;
            /// <summary>Virtual method pointer for `flushSimulation`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, NativeBoolean, void> flushSimulation;
            /// <summary>Virtual method pointer for `setGravity`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxVec3*, void> setGravity;
            /// <summary>Virtual method pointer for `getGravity`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxVec3*, PxVec3*> getGravity;
            /// <summary>Virtual method pointer for `setBounceThresholdVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, float, void> setBounceThresholdVelocity;
            /// <summary>Virtual method pointer for `getBounceThresholdVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, float> getBounceThresholdVelocity;
            /// <summary>Virtual method pointer for `setCCDMaxPasses`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint, void> setCCDMaxPasses;
            /// <summary>Virtual method pointer for `getCCDMaxPasses`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getCCDMaxPasses;
            /// <summary>Virtual method pointer for `getFrictionOffsetThreshold`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, float> getFrictionOffsetThreshold;
            /// <summary>Virtual method pointer for `setFrictionType`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxFrictionType, void> setFrictionType;
            /// <summary>Virtual method pointer for `getFrictionType`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxFrictionType> getFrictionType;
            /// <summary>Virtual method pointer for `setVisualizationParameter`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxVisualizationParameter, float, NativeBoolean> setVisualizationParameter;
            /// <summary>Virtual method pointer for `getVisualizationParameter`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxVisualizationParameter, float> getVisualizationParameter;
            /// <summary>Virtual method pointer for `setVisualizationCullingBox`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBounds3*, void> setVisualizationCullingBox;
            /// <summary>Virtual method pointer for `getVisualizationCullingBox`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBounds3*, PxBounds3*> getVisualizationCullingBox;
            /// <summary>Virtual method pointer for `getRenderBuffer`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxRenderBuffer*> getRenderBuffer;
            /// <summary>Virtual method pointer for `getSimulationStatistics`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxSimulationStatistics*, void> getSimulationStatistics;
            /// <summary>Virtual method pointer for `getStaticStructure`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxPruningStructureType> getStaticStructure;
            /// <summary>Virtual method pointer for `getDynamicStructure`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxPruningStructureType> getDynamicStructure;
            /// <summary>Virtual method pointer for `flushQueryUpdates`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, void> flushQueryUpdates;
            /// <summary>Virtual method pointer for `createBatchQuery`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBatchQueryDesc*, PxBatchQuery*> createBatchQuery;
            /// <summary>Virtual method pointer for `setDynamicTreeRebuildRateHint`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint, void> setDynamicTreeRebuildRateHint;
            /// <summary>Virtual method pointer for `getDynamicTreeRebuildRateHint`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getDynamicTreeRebuildRateHint;
            /// <summary>Virtual method pointer for `forceDynamicTreeRebuild`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, NativeBoolean, NativeBoolean, void> forceDynamicTreeRebuild;
            /// <summary>Virtual method pointer for `setSceneQueryUpdateMode`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxSceneQueryUpdateMode, void> setSceneQueryUpdateMode;
            /// <summary>Virtual method pointer for `getSceneQueryUpdateMode`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxSceneQueryUpdateMode> getSceneQueryUpdateMode;
            /// <summary>Virtual method pointer for `sceneQueriesUpdate`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBaseTask*, NativeBoolean, void> sceneQueriesUpdate;
            /// <summary>Virtual method pointer for `checkQueries`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, NativeBoolean, NativeBoolean> checkQueries;
            /// <summary>Virtual method pointer for `fetchQueries`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, NativeBoolean, NativeBoolean> fetchQueries;
            /// <summary>Virtual method pointer for `raycast`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxVec3*, PxVec3*, float, /* Failed to emit TranslatedParameter hitCall: Failed to resolve `Ref resolved by PxHitCallback` during emit time. */
            int*, PxHitFlags*, PxQueryFilterData*, PxQueryFilterCallback*, PxQueryCache*, NativeBoolean> raycast;
            /// <summary>Virtual method pointer for `sweep`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxGeometry*, PxTransform*, PxVec3*, float, /* Failed to emit TranslatedParameter hitCall: Failed to resolve `Ref resolved by PxHitCallback` during emit time. */
            int*, PxHitFlags*, PxQueryFilterData*, PxQueryFilterCallback*, PxQueryCache*, float, NativeBoolean> sweep;
            /// <summary>Virtual method pointer for `overlap`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxGeometry*, PxTransform*, /* Failed to emit TranslatedParameter hitCall: Failed to resolve `Ref resolved by PxHitCallback` during emit time. */
            int*, PxQueryFilterData*, PxQueryFilterCallback*, NativeBoolean> overlap;
            /// <summary>Virtual method pointer for `getSceneQueryStaticTimestamp`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getSceneQueryStaticTimestamp;
            /// <summary>Virtual method pointer for `getBroadPhaseType`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBroadPhaseType> getBroadPhaseType;
            /// <summary>Virtual method pointer for `getBroadPhaseCaps`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBroadPhaseCaps*, NativeBoolean> getBroadPhaseCaps;
            /// <summary>Virtual method pointer for `getNbBroadPhaseRegions`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getNbBroadPhaseRegions;
            /// <summary>Virtual method pointer for `getBroadPhaseRegions`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBroadPhaseRegionInfo*, uint, uint, uint> getBroadPhaseRegions;
            /// <summary>Virtual method pointer for `addBroadPhaseRegion`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxBroadPhaseRegion*, NativeBoolean, uint> addBroadPhaseRegion;
            /// <summary>Virtual method pointer for `removeBroadPhaseRegion`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint, NativeBoolean> removeBroadPhaseRegion;
            /// <summary>Virtual method pointer for `getTaskManager`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxTaskManager*> getTaskManager;
            /// <summary>Virtual method pointer for `lockRead`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, byte*, uint, void> lockRead;
            /// <summary>Virtual method pointer for `unlockRead`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, void> unlockRead;
            /// <summary>Virtual method pointer for `lockWrite`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, byte*, uint, void> lockWrite;
            /// <summary>Virtual method pointer for `unlockWrite`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, void> unlockWrite;
            /// <summary>Virtual method pointer for `setNbContactDataBlocks`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint, void> setNbContactDataBlocks;
            /// <summary>Virtual method pointer for `getNbContactDataBlocksUsed`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getNbContactDataBlocksUsed;
            /// <summary>Virtual method pointer for `getMaxNbContactDataBlocksUsed`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getMaxNbContactDataBlocksUsed;
            /// <summary>Virtual method pointer for `getContactReportStreamBufferSize`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getContactReportStreamBufferSize;
            /// <summary>Virtual method pointer for `setSolverBatchSize`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint, void> setSolverBatchSize;
            /// <summary>Virtual method pointer for `getSolverBatchSize`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getSolverBatchSize;
            /// <summary>Virtual method pointer for `setSolverArticulationBatchSize`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint, void> setSolverArticulationBatchSize;
            /// <summary>Virtual method pointer for `getSolverArticulationBatchSize`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, uint> getSolverArticulationBatchSize;
            /// <summary>Virtual method pointer for `getWakeCounterResetValue`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, float> getWakeCounterResetValue;
            /// <summary>Virtual method pointer for `shiftOrigin`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxVec3*, void> shiftOrigin;
            /// <summary>Virtual method pointer for `getScenePvdClient`</summary>
            public delegate* unmanaged[Cdecl]<PxScene*, PxPvdSceneClient*> getScenePvdClient;
        }
    }
}
