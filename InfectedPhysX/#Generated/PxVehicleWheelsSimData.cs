// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 96)]
    public unsafe partial struct PxVehicleWheelsSimData
    {
        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?allocate@PxVehicleWheelsSimData@physx@@SAPEAV12@I@Z", ExactSpelling = true)]
        public static extern PxVehicleWheelsSimData* allocate(uint nbWheels);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setChassisMass@PxVehicleWheelsSimData@physx@@QEAAXM@Z", ExactSpelling = true)]
        private static extern void setChassisMass_PInvoke(PxVehicleWheelsSimData* @this, float chassisMass);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setChassisMass(float chassisMass)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setChassisMass_PInvoke(@this, chassisMass); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?free@PxVehicleWheelsSimData@physx@@QEAAXXZ", ExactSpelling = true)]
        private static extern void free_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void free()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { free_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??4PxVehicleWheelsSimData@physx@@QEAAAEAV01@AEBV01@@Z", ExactSpelling = true)]
        private static extern PxVehicleWheelsSimData* operator_Equal_PInvoke(PxVehicleWheelsSimData* @this, PxVehicleWheelsSimData* src);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVehicleWheelsSimData* operator_Equal(PxVehicleWheelsSimData* src)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return operator_Equal_PInvoke(@this, src); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?copy@PxVehicleWheelsSimData@physx@@QEAAXAEBV12@II@Z", ExactSpelling = true)]
        private static extern void copy_PInvoke(PxVehicleWheelsSimData* @this, PxVehicleWheelsSimData* src, uint srcWheel, uint trgWheel);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void copy(PxVehicleWheelsSimData* src, uint srcWheel, uint trgWheel)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { copy_PInvoke(@this, src, srcWheel, trgWheel); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbWheels@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbWheels_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbWheels()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbWheels_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getSuspensionData@PxVehicleWheelsSimData@physx@@QEBAAEBVPxVehicleSuspensionData@2@I@Z", ExactSpelling = true)]
        private static extern PxVehicleSuspensionData* getSuspensionData_PInvoke(PxVehicleWheelsSimData* @this, uint id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVehicleSuspensionData* getSuspensionData(uint id)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getSuspensionData_PInvoke(@this, id); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getWheelData@PxVehicleWheelsSimData@physx@@QEBAAEBVPxVehicleWheelData@2@I@Z", ExactSpelling = true)]
        private static extern PxVehicleWheelData* getWheelData_PInvoke(PxVehicleWheelsSimData* @this, uint id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVehicleWheelData* getWheelData(uint id)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getWheelData_PInvoke(@this, id); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getTireData@PxVehicleWheelsSimData@physx@@QEBAAEBVPxVehicleTireData@2@I@Z", ExactSpelling = true)]
        private static extern PxVehicleTireData* getTireData_PInvoke(PxVehicleWheelsSimData* @this, uint id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVehicleTireData* getTireData(uint id)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getTireData_PInvoke(@this, id); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getSuspTravelDirection@PxVehicleWheelsSimData@physx@@QEBAAEBVPxVec3@2@I@Z", ExactSpelling = true)]
        private static extern PxVec3* getSuspTravelDirection_PInvoke(PxVehicleWheelsSimData* @this, uint id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3* getSuspTravelDirection(uint id)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getSuspTravelDirection_PInvoke(@this, id); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getSuspForceAppPointOffset@PxVehicleWheelsSimData@physx@@QEBAAEBVPxVec3@2@I@Z", ExactSpelling = true)]
        private static extern PxVec3* getSuspForceAppPointOffset_PInvoke(PxVehicleWheelsSimData* @this, uint id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3* getSuspForceAppPointOffset(uint id)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getSuspForceAppPointOffset_PInvoke(@this, id); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getTireForceAppPointOffset@PxVehicleWheelsSimData@physx@@QEBAAEBVPxVec3@2@I@Z", ExactSpelling = true)]
        private static extern PxVec3* getTireForceAppPointOffset_PInvoke(PxVehicleWheelsSimData* @this, uint id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3* getTireForceAppPointOffset(uint id)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getTireForceAppPointOffset_PInvoke(@this, id); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getWheelCentreOffset@PxVehicleWheelsSimData@physx@@QEBAAEBVPxVec3@2@I@Z", ExactSpelling = true)]
        private static extern PxVec3* getWheelCentreOffset_PInvoke(PxVehicleWheelsSimData* @this, uint id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3* getWheelCentreOffset(uint id)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getWheelCentreOffset_PInvoke(@this, id); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getWheelShapeMapping@PxVehicleWheelsSimData@physx@@QEBAHI@Z", ExactSpelling = true)]
        private static extern int getWheelShapeMapping_PInvoke(PxVehicleWheelsSimData* @this, uint wheelId);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int getWheelShapeMapping(uint wheelId)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getWheelShapeMapping_PInvoke(@this, wheelId); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getSceneQueryFilterData@PxVehicleWheelsSimData@physx@@QEBAAEBUPxFilterData@2@I@Z", ExactSpelling = true)]
        private static extern PxFilterData* getSceneQueryFilterData_PInvoke(PxVehicleWheelsSimData* @this, uint suspId);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxFilterData* getSceneQueryFilterData(uint suspId)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getSceneQueryFilterData_PInvoke(@this, suspId); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbAntiRollBars@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbAntiRollBars_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbAntiRollBars()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbAntiRollBars_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getAntiRollBarData@PxVehicleWheelsSimData@physx@@QEBAAEBVPxVehicleAntiRollBarData@2@I@Z", ExactSpelling = true)]
        private static extern PxVehicleAntiRollBarData* getAntiRollBarData_PInvoke(PxVehicleWheelsSimData* @this, uint antiRollId);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVehicleAntiRollBarData* getAntiRollBarData(uint antiRollId)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getAntiRollBarData_PInvoke(@this, antiRollId); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getTireLoadFilterData@PxVehicleWheelsSimData@physx@@QEBAAEBVPxVehicleTireLoadFilterData@2@XZ", ExactSpelling = true)]
        private static extern PxVehicleTireLoadFilterData* getTireLoadFilterData_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVehicleTireLoadFilterData* getTireLoadFilterData()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getTireLoadFilterData_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setSuspensionData@PxVehicleWheelsSimData@physx@@QEAAXIAEBVPxVehicleSuspensionData@2@@Z", ExactSpelling = true)]
        private static extern void setSuspensionData_PInvoke(PxVehicleWheelsSimData* @this, uint id, PxVehicleSuspensionData* susp);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSuspensionData(uint id, PxVehicleSuspensionData* susp)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setSuspensionData_PInvoke(@this, id, susp); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setWheelData@PxVehicleWheelsSimData@physx@@QEAAXIAEBVPxVehicleWheelData@2@@Z", ExactSpelling = true)]
        private static extern void setWheelData_PInvoke(PxVehicleWheelsSimData* @this, uint id, PxVehicleWheelData* wheel);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setWheelData(uint id, PxVehicleWheelData* wheel)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setWheelData_PInvoke(@this, id, wheel); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setTireData@PxVehicleWheelsSimData@physx@@QEAAXIAEBVPxVehicleTireData@2@@Z", ExactSpelling = true)]
        private static extern void setTireData_PInvoke(PxVehicleWheelsSimData* @this, uint id, PxVehicleTireData* tire);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setTireData(uint id, PxVehicleTireData* tire)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setTireData_PInvoke(@this, id, tire); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setSuspTravelDirection@PxVehicleWheelsSimData@physx@@QEAAXIAEBVPxVec3@2@@Z", ExactSpelling = true)]
        private static extern void setSuspTravelDirection_PInvoke(PxVehicleWheelsSimData* @this, uint id, PxVec3* dir);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSuspTravelDirection(uint id, PxVec3* dir)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setSuspTravelDirection_PInvoke(@this, id, dir); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setSuspForceAppPointOffset@PxVehicleWheelsSimData@physx@@QEAAXIAEBVPxVec3@2@@Z", ExactSpelling = true)]
        private static extern void setSuspForceAppPointOffset_PInvoke(PxVehicleWheelsSimData* @this, uint id, PxVec3* offset);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSuspForceAppPointOffset(uint id, PxVec3* offset)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setSuspForceAppPointOffset_PInvoke(@this, id, offset); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setTireForceAppPointOffset@PxVehicleWheelsSimData@physx@@QEAAXIAEBVPxVec3@2@@Z", ExactSpelling = true)]
        private static extern void setTireForceAppPointOffset_PInvoke(PxVehicleWheelsSimData* @this, uint id, PxVec3* offset);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setTireForceAppPointOffset(uint id, PxVec3* offset)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setTireForceAppPointOffset_PInvoke(@this, id, offset); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setWheelCentreOffset@PxVehicleWheelsSimData@physx@@QEAAXIAEBVPxVec3@2@@Z", ExactSpelling = true)]
        private static extern void setWheelCentreOffset_PInvoke(PxVehicleWheelsSimData* @this, uint id, PxVec3* offset);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setWheelCentreOffset(uint id, PxVec3* offset)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setWheelCentreOffset_PInvoke(@this, id, offset); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setWheelShapeMapping@PxVehicleWheelsSimData@physx@@QEAAXIH@Z", ExactSpelling = true)]
        private static extern void setWheelShapeMapping_PInvoke(PxVehicleWheelsSimData* @this, uint wheelId, int shapeId);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setWheelShapeMapping(uint wheelId, int shapeId)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setWheelShapeMapping_PInvoke(@this, wheelId, shapeId); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setSceneQueryFilterData@PxVehicleWheelsSimData@physx@@QEAAXIAEBUPxFilterData@2@@Z", ExactSpelling = true)]
        private static extern void setSceneQueryFilterData_PInvoke(PxVehicleWheelsSimData* @this, uint suspId, PxFilterData* sqFilterData);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSceneQueryFilterData(uint suspId, PxFilterData* sqFilterData)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setSceneQueryFilterData_PInvoke(@this, suspId, sqFilterData); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setTireLoadFilterData@PxVehicleWheelsSimData@physx@@QEAAXAEBVPxVehicleTireLoadFilterData@2@@Z", ExactSpelling = true)]
        private static extern void setTireLoadFilterData_PInvoke(PxVehicleWheelsSimData* @this, PxVehicleTireLoadFilterData* tireLoadFilter);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setTireLoadFilterData(PxVehicleTireLoadFilterData* tireLoadFilter)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setTireLoadFilterData_PInvoke(@this, tireLoadFilter); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?addAntiRollBarData@PxVehicleWheelsSimData@physx@@QEAAIAEBVPxVehicleAntiRollBarData@2@@Z", ExactSpelling = true)]
        private static extern uint addAntiRollBarData_PInvoke(PxVehicleWheelsSimData* @this, PxVehicleAntiRollBarData* antiRoll);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint addAntiRollBarData(PxVehicleAntiRollBarData* antiRoll)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return addAntiRollBarData_PInvoke(@this, antiRoll); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?disableWheel@PxVehicleWheelsSimData@physx@@QEAAXI@Z", ExactSpelling = true)]
        private static extern void disableWheel_PInvoke(PxVehicleWheelsSimData* @this, uint wheel);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void disableWheel(uint wheel)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { disableWheel_PInvoke(@this, wheel); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?enableWheel@PxVehicleWheelsSimData@physx@@QEAAXI@Z", ExactSpelling = true)]
        private static extern void enableWheel_PInvoke(PxVehicleWheelsSimData* @this, uint wheel);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void enableWheel(uint wheel)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { enableWheel_PInvoke(@this, wheel); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getIsWheelDisabled@PxVehicleWheelsSimData@physx@@QEBA_NI@Z", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool getIsWheelDisabled_PInvoke(PxVehicleWheelsSimData* @this, uint wheel);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool getIsWheelDisabled(uint wheel)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getIsWheelDisabled_PInvoke(@this, wheel); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setSubStepCount@PxVehicleWheelsSimData@physx@@QEAAXMII@Z", ExactSpelling = true)]
        private static extern void setSubStepCount_PInvoke(PxVehicleWheelsSimData* @this, float thresholdLongitudinalSpeed, uint lowForwardSpeedSubStepCount, uint highForwardSpeedSubStepCount);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSubStepCount(float thresholdLongitudinalSpeed, uint lowForwardSpeedSubStepCount, uint highForwardSpeedSubStepCount)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setSubStepCount_PInvoke(@this, thresholdLongitudinalSpeed, lowForwardSpeedSubStepCount, highForwardSpeedSubStepCount); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setMinLongSlipDenominator@PxVehicleWheelsSimData@physx@@QEAAXM@Z", ExactSpelling = true)]
        private static extern void setMinLongSlipDenominator_PInvoke(PxVehicleWheelsSimData* @this, float minLongSlipDenominator);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setMinLongSlipDenominator(float minLongSlipDenominator)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setMinLongSlipDenominator_PInvoke(@this, minLongSlipDenominator); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setFlags@PxVehicleWheelsSimData@physx@@QEAAXV?$PxFlags@W4Enum@PxVehicleWheelsSimFlag@physx@@I@2@@Z", ExactSpelling = true)]
        private static extern void setFlags_PInvoke(PxVehicleWheelsSimData* @this, PxVehicleWheelsSimFlags* flags);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setFlags(PxVehicleWheelsSimFlags* flags)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setFlags_PInvoke(@this, flags); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getFlags@PxVehicleWheelsSimData@physx@@QEBA?AV?$PxFlags@W4Enum@PxVehicleWheelsSimFlag@physx@@I@2@XZ", ExactSpelling = true)]
        private static extern PxVehicleWheelsSimFlags* getFlags_PInvoke(PxVehicleWheelsSimData* @this, out PxVehicleWheelsSimFlags __returnBuffer);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVehicleWheelsSimFlags getFlags()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            {
                PxVehicleWheelsSimFlags __returnBuffer;
                getFlags_PInvoke(@this, out __returnBuffer);
                return __returnBuffer;
            }
        }

        [FieldOffset(0)] public PxVehicleTireLoadFilterData mNormalisedLoadFilter;

        [FieldOffset(32)] public /* Failed to emit TranslatedNormalField mWheels4SimData: Failed to resolve `Ref resolved by PxVehicleWheels4SimData` during emit time. */
        int* mWheels4SimData;

        [FieldOffset(40)] public uint mNbWheels4;

        [FieldOffset(44)] public uint mNbActiveWheels;

        [FieldOffset(48)] public PxVehicleAntiRollBarData* mAntiRollBars;

        [FieldOffset(56)] public uint mNbAntiRollBars4;

        [FieldOffset(60)] public uint mNbActiveAntiRollBars;

        [FieldOffset(64)] public ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_1 mActiveWheelsBitmapBuffer;

        [FieldOffset(68)] public float mThresholdLongitudinalSpeed;

        [FieldOffset(72)] public uint mLowForwardSpeedSubStepCount;

        [FieldOffset(76)] public uint mHighForwardSpeedSubStepCount;

        [FieldOffset(80)] public float mMinLongSlipDenominator;

        [FieldOffset(84)] public uint mFlags;

        [FieldOffset(88)] public ConstantArray_physx__UNICODE_003A____UNICODE_003A__PxU32_1 mPad;

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper205", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxVehicleWheelsSimData* @this, PxEMPTY arg0);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Constructor(PxEMPTY arg0)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { Constructor_PInvoke(@this, arg0); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getBinaryMetaData@PxVehicleWheelsSimData@physx@@SAXAEAVPxOutputStream@2@@Z", ExactSpelling = true)]
        public static extern void getBinaryMetaData(PxOutputStream* stream);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbWheels4@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbWheels4_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbWheels4()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbWheels4_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbSuspensionData@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbSuspensionData_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbSuspensionData()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbSuspensionData_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbWheelData@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbWheelData_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbWheelData()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbWheelData_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbSuspTravelDirection@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbSuspTravelDirection_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbSuspTravelDirection()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbSuspTravelDirection_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbTireData@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbTireData_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbTireData()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbTireData_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbSuspForceAppPointOffset@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbSuspForceAppPointOffset_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbSuspForceAppPointOffset()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbSuspForceAppPointOffset_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbTireForceAppPointOffset@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbTireForceAppPointOffset_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbTireForceAppPointOffset()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbTireForceAppPointOffset_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbWheelCentreOffset@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbWheelCentreOffset_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbWheelCentreOffset()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbWheelCentreOffset_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbWheelShapeMapping@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbWheelShapeMapping_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbWheelShapeMapping()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbWheelShapeMapping_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbSceneQueryFilterData@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbSceneQueryFilterData_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbSceneQueryFilterData()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbSceneQueryFilterData_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getMinLongSlipDenominator@PxVehicleWheelsSimData@physx@@QEBAMXZ", ExactSpelling = true)]
        private static extern float getMinLongSlipDenominator_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getMinLongSlipDenominator()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getMinLongSlipDenominator_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setThresholdLongSpeed@PxVehicleWheelsSimData@physx@@QEAAXM@Z", ExactSpelling = true)]
        private static extern void setThresholdLongSpeed_PInvoke(PxVehicleWheelsSimData* @this, float f);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setThresholdLongSpeed(float f)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setThresholdLongSpeed_PInvoke(@this, f); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getThresholdLongSpeed@PxVehicleWheelsSimData@physx@@QEBAMXZ", ExactSpelling = true)]
        private static extern float getThresholdLongSpeed_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getThresholdLongSpeed()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getThresholdLongSpeed_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setLowForwardSpeedSubStepCount@PxVehicleWheelsSimData@physx@@QEAAXI@Z", ExactSpelling = true)]
        private static extern void setLowForwardSpeedSubStepCount_PInvoke(PxVehicleWheelsSimData* @this, uint f);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setLowForwardSpeedSubStepCount(uint f)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setLowForwardSpeedSubStepCount_PInvoke(@this, f); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getLowForwardSpeedSubStepCount@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getLowForwardSpeedSubStepCount_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getLowForwardSpeedSubStepCount()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getLowForwardSpeedSubStepCount_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setHighForwardSpeedSubStepCount@PxVehicleWheelsSimData@physx@@QEAAXI@Z", ExactSpelling = true)]
        private static extern void setHighForwardSpeedSubStepCount_PInvoke(PxVehicleWheelsSimData* @this, uint f);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setHighForwardSpeedSubStepCount(uint f)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setHighForwardSpeedSubStepCount_PInvoke(@this, f); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getHighForwardSpeedSubStepCount@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getHighForwardSpeedSubStepCount_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getHighForwardSpeedSubStepCount()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getHighForwardSpeedSubStepCount_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setWheelEnabledState@PxVehicleWheelsSimData@physx@@QEAAXI_N@Z", ExactSpelling = true)]
        private static extern void setWheelEnabledState_PInvoke(PxVehicleWheelsSimData* @this, uint wheel, [MarshalAs(UnmanagedType.I1)] bool state);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setWheelEnabledState(uint wheel, bool state)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setWheelEnabledState_PInvoke(@this, wheel, state); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getWheelEnabledState@PxVehicleWheelsSimData@physx@@QEBA_NI@Z", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool getWheelEnabledState_PInvoke(PxVehicleWheelsSimData* @this, uint wheel);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool getWheelEnabledState(uint wheel)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getWheelEnabledState_PInvoke(@this, wheel); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbWheelEnabledState@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbWheelEnabledState_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbWheelEnabledState()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbWheelEnabledState_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbAntiRollBars4@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbAntiRollBars4_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbAntiRollBars4()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbAntiRollBars4_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNbAntiRollBarData@PxVehicleWheelsSimData@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getNbAntiRollBarData_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbAntiRollBarData()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { return getNbAntiRollBarData_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setAntiRollBarData@PxVehicleWheelsSimData@physx@@QEAAXIAEBVPxVehicleAntiRollBarData@2@@Z", ExactSpelling = true)]
        private static extern void setAntiRollBarData_PInvoke(PxVehicleWheelsSimData* @this, uint id, PxVehicleAntiRollBarData* antiRoll);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setAntiRollBarData(uint id, PxVehicleAntiRollBarData* antiRoll)
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { setAntiRollBarData_PInvoke(@this, id, antiRoll); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper206", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Constructor()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { Constructor_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper207", ExactSpelling = true)]
        private static extern void Destructor_PInvoke(PxVehicleWheelsSimData* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Destructor()
        {
            fixed (PxVehicleWheelsSimData* @this = &this)
            { Destructor_PInvoke(@this); }
        }
    }
}
