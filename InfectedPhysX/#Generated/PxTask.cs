// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public unsafe partial struct PxTask
    {
        [FieldOffset(0)] public PxBaseTask Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Destructor()
        {
            fixed (PxTask* @this = &this)
            { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxTask* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?finishBefore@PxTask@physx@@QEAAXI@Z", ExactSpelling = true)]
        private static extern void finishBefore_PInvoke(PxTask* @this, uint taskID);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void finishBefore(uint taskID)
        {
            fixed (PxTask* @this = &this)
            { finishBefore_PInvoke(@this, taskID); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?startAfter@PxTask@physx@@QEAAXI@Z", ExactSpelling = true)]
        private static extern void startAfter_PInvoke(PxTask* @this, uint taskID);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void startAfter(uint taskID)
        {
            fixed (PxTask* @this = &this)
            { startAfter_PInvoke(@this, taskID); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void addReference()
        {
            fixed (PxTask* @this = &this)
            { VirtualMethodTablePointer->addReference(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void removeReference()
        {
            fixed (PxTask* @this = &this)
            { VirtualMethodTablePointer->removeReference(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int getReference()
        {
            fixed (PxTask* @this = &this)
            { return VirtualMethodTablePointer->getReference(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getTaskID@PxTask@physx@@QEBAIXZ", ExactSpelling = true)]
        private static extern uint getTaskID_PInvoke(PxTask* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getTaskID()
        {
            fixed (PxTask* @this = &this)
            { return getTaskID_PInvoke(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void submitted()
        {
            fixed (PxTask* @this = &this)
            { VirtualMethodTablePointer->submitted(@this); }
        }

        [FieldOffset(24)] public uint mTaskID;

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `~PxTask`</summary>
            public delegate* unmanaged[Cdecl]<PxTask*, void> __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `run`</summary>
            public delegate* unmanaged[Cdecl]<PxTask*, void> run;
            /// <summary>Virtual method pointer for `getName`</summary>
            public delegate* unmanaged[Cdecl]<PxTask*, byte*> getName;
            /// <summary>Virtual method pointer for `addReference`</summary>
            public delegate* unmanaged[Cdecl]<PxTask*, void> addReference;
            /// <summary>Virtual method pointer for `removeReference`</summary>
            public delegate* unmanaged[Cdecl]<PxTask*, void> removeReference;
            /// <summary>Virtual method pointer for `getReference`</summary>
            public delegate* unmanaged[Cdecl]<PxTask*, int> getReference;
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxTask*, void> release;
            /// <summary>Virtual method pointer for `submitted`</summary>
            public delegate* unmanaged[Cdecl]<PxTask*, void> submitted;
        }
    }
}
