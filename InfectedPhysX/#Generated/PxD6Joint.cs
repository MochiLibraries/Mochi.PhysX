// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public unsafe partial struct PxD6Joint
    {
        [FieldOffset(0)] public PxJoint Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setMotion(PxD6Axis axis, PxD6Motion type)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setMotion(@this, axis, type); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxD6Motion getMotion(PxD6Axis axis)
        {
            fixed (PxD6Joint* @this = &this)
            { return VirtualMethodTablePointer->getMotion(@this, axis); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getTwistAngle()
        {
            fixed (PxD6Joint* @this = &this)
            { return VirtualMethodTablePointer->getTwistAngle(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getTwist@PxD6Joint@physx@@QEBAMXZ", ExactSpelling = true)]
        private static extern float getTwist_PInvoke(PxD6Joint* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getTwist()
        {
            fixed (PxD6Joint* @this = &this)
            { return getTwist_PInvoke(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getSwingYAngle()
        {
            fixed (PxD6Joint* @this = &this)
            { return VirtualMethodTablePointer->getSwingYAngle(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getSwingZAngle()
        {
            fixed (PxD6Joint* @this = &this)
            { return VirtualMethodTablePointer->getSwingZAngle(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setDistanceLimit(PxJointLinearLimit* limit)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setDistanceLimit(@this, limit); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxJointLinearLimit getDistanceLimit()
        {
            fixed (PxD6Joint* @this = &this)
            {
                PxJointLinearLimit __returnBuffer;
                VirtualMethodTablePointer->getDistanceLimit(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setLinearLimit@PxD6Joint@physx@@QEAAXAEBVPxJointLinearLimit@2@@Z", ExactSpelling = true)]
        private static extern void setLinearLimit_PInvoke(PxD6Joint* @this, PxJointLinearLimit* limit);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setLinearLimit(PxJointLinearLimit* limit)
        {
            fixed (PxD6Joint* @this = &this)
            { setLinearLimit_PInvoke(@this, limit); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getLinearLimit@PxD6Joint@physx@@QEBA?AVPxJointLinearLimit@2@XZ", ExactSpelling = true)]
        private static extern PxJointLinearLimit* getLinearLimit_PInvoke(PxD6Joint* @this, out PxJointLinearLimit __returnBuffer);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxJointLinearLimit getLinearLimit()
        {
            fixed (PxD6Joint* @this = &this)
            {
                PxJointLinearLimit __returnBuffer;
                getLinearLimit_PInvoke(@this, out __returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setLinearLimit(PxD6Axis axis, PxJointLinearLimitPair* limit)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setLinearLimit(@this, axis, limit); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxJointLinearLimitPair getLinearLimit(PxD6Axis axis)
        {
            fixed (PxD6Joint* @this = &this)
            {
                PxJointLinearLimitPair __returnBuffer;
                VirtualMethodTablePointer->getLinearLimit(@this, &__returnBuffer, axis);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setTwistLimit(PxJointAngularLimitPair* limit)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setTwistLimit(@this, limit); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxJointAngularLimitPair getTwistLimit()
        {
            fixed (PxD6Joint* @this = &this)
            {
                PxJointAngularLimitPair __returnBuffer;
                VirtualMethodTablePointer->getTwistLimit(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSwingLimit(PxJointLimitCone* limit)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setSwingLimit(@this, limit); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxJointLimitCone getSwingLimit()
        {
            fixed (PxD6Joint* @this = &this)
            {
                PxJointLimitCone __returnBuffer;
                VirtualMethodTablePointer->getSwingLimit(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setPyramidSwingLimit(PxJointLimitPyramid* limit)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setPyramidSwingLimit(@this, limit); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxJointLimitPyramid getPyramidSwingLimit()
        {
            fixed (PxD6Joint* @this = &this)
            {
                PxJointLimitPyramid __returnBuffer;
                VirtualMethodTablePointer->getPyramidSwingLimit(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setDrive(PxD6Drive index, PxD6JointDrive* drive)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setDrive(@this, index, drive); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxD6JointDrive getDrive(PxD6Drive index)
        {
            fixed (PxD6Joint* @this = &this)
            {
                PxD6JointDrive __returnBuffer;
                VirtualMethodTablePointer->getDrive(@this, &__returnBuffer, index);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setDrivePosition(PxTransform* pose, bool autowake = true)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setDrivePosition(@this, pose, autowake); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform getDrivePosition()
        {
            fixed (PxD6Joint* @this = &this)
            {
                PxTransform __returnBuffer;
                VirtualMethodTablePointer->getDrivePosition(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setDriveVelocity(PxVec3* linear, PxVec3* angular, bool autowake = true)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setDriveVelocity(@this, linear, angular, autowake); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void getDriveVelocity(PxVec3* linear, PxVec3* angular)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->getDriveVelocity(@this, linear, angular); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setProjectionLinearTolerance(float tolerance)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setProjectionLinearTolerance(@this, tolerance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getProjectionLinearTolerance()
        {
            fixed (PxD6Joint* @this = &this)
            { return VirtualMethodTablePointer->getProjectionLinearTolerance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setProjectionAngularTolerance(float tolerance)
        {
            fixed (PxD6Joint* @this = &this)
            { VirtualMethodTablePointer->setProjectionAngularTolerance(@this, tolerance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getProjectionAngularTolerance()
        {
            fixed (PxD6Joint* @this = &this)
            { return VirtualMethodTablePointer->getProjectionAngularTolerance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte* getConcreteTypeName()
        {
            fixed (PxD6Joint* @this = &this)
            { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, void> release;
            /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, byte*> getConcreteTypeName;
            /// <summary>Virtual method pointer for `isReleasable`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, NativeBoolean> isReleasable;
            /// <summary>Virtual method pointer for `~PxD6Joint`</summary>
            public void* __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `isKindOf`</summary>
            public void* isKindOf;
            /// <summary>Virtual method pointer for `setActors`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxRigidActor*, PxRigidActor*, void> setActors;
            /// <summary>Virtual method pointer for `getActors`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxRigidActor**, PxRigidActor**, void> getActors;
            /// <summary>Virtual method pointer for `setLocalPose`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointActorIndex, PxTransform*, void> setLocalPose;
            /// <summary>Virtual method pointer for `getLocalPose`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxTransform*, PxJointActorIndex, PxTransform*> getLocalPose;
            /// <summary>Virtual method pointer for `getRelativeTransform`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxTransform*, PxTransform*> getRelativeTransform;
            /// <summary>Virtual method pointer for `getRelativeLinearVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxVec3*, PxVec3*> getRelativeLinearVelocity;
            /// <summary>Virtual method pointer for `getRelativeAngularVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxVec3*, PxVec3*> getRelativeAngularVelocity;
            /// <summary>Virtual method pointer for `setBreakForce`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float, float, void> setBreakForce;
            /// <summary>Virtual method pointer for `getBreakForce`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float*, float*, void> getBreakForce;
            /// <summary>Virtual method pointer for `setConstraintFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxConstraintFlags*, void> setConstraintFlags;
            /// <summary>Virtual method pointer for `setConstraintFlag`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxConstraintFlags, NativeBoolean, void> setConstraintFlag;
            /// <summary>Virtual method pointer for `getConstraintFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxConstraintFlags*, PxConstraintFlags*> getConstraintFlags;
            /// <summary>Virtual method pointer for `setInvMassScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float, void> setInvMassScale0;
            /// <summary>Virtual method pointer for `getInvMassScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getInvMassScale0;
            /// <summary>Virtual method pointer for `setInvInertiaScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float, void> setInvInertiaScale0;
            /// <summary>Virtual method pointer for `getInvInertiaScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getInvInertiaScale0;
            /// <summary>Virtual method pointer for `setInvMassScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float, void> setInvMassScale1;
            /// <summary>Virtual method pointer for `getInvMassScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getInvMassScale1;
            /// <summary>Virtual method pointer for `setInvInertiaScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float, void> setInvInertiaScale1;
            /// <summary>Virtual method pointer for `getInvInertiaScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getInvInertiaScale1;
            /// <summary>Virtual method pointer for `getConstraint`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxConstraint*> getConstraint;
            /// <summary>Virtual method pointer for `setName`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, byte*, void> setName;
            /// <summary>Virtual method pointer for `getName`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, byte*> getName;
            /// <summary>Virtual method pointer for `getScene`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxScene*> getScene;
            /// <summary>Virtual method pointer for `setMotion`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxD6Axis, PxD6Motion, void> setMotion;
            /// <summary>Virtual method pointer for `getMotion`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxD6Axis, PxD6Motion> getMotion;
            /// <summary>Virtual method pointer for `getTwistAngle`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getTwistAngle;
            /// <summary>Virtual method pointer for `getSwingYAngle`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getSwingYAngle;
            /// <summary>Virtual method pointer for `getSwingZAngle`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getSwingZAngle;
            /// <summary>Virtual method pointer for `setDistanceLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointLinearLimit*, void> setDistanceLimit;
            /// <summary>Virtual method pointer for `getDistanceLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointLinearLimit*, PxJointLinearLimit*> getDistanceLimit;
            /// <summary>Virtual method pointer for `setLinearLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxD6Axis, PxJointLinearLimitPair*, void> setLinearLimit;
            /// <summary>Virtual method pointer for `getLinearLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointLinearLimitPair*, PxD6Axis, PxJointLinearLimitPair*> getLinearLimit;
            /// <summary>Virtual method pointer for `setTwistLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointAngularLimitPair*, void> setTwistLimit;
            /// <summary>Virtual method pointer for `getTwistLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointAngularLimitPair*, PxJointAngularLimitPair*> getTwistLimit;
            /// <summary>Virtual method pointer for `setSwingLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointLimitCone*, void> setSwingLimit;
            /// <summary>Virtual method pointer for `getSwingLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointLimitCone*, PxJointLimitCone*> getSwingLimit;
            /// <summary>Virtual method pointer for `setPyramidSwingLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointLimitPyramid*, void> setPyramidSwingLimit;
            /// <summary>Virtual method pointer for `getPyramidSwingLimit`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxJointLimitPyramid*, PxJointLimitPyramid*> getPyramidSwingLimit;
            /// <summary>Virtual method pointer for `setDrive`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxD6Drive, PxD6JointDrive*, void> setDrive;
            /// <summary>Virtual method pointer for `getDrive`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxD6JointDrive*, PxD6Drive, PxD6JointDrive*> getDrive;
            /// <summary>Virtual method pointer for `setDrivePosition`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxTransform*, NativeBoolean, void> setDrivePosition;
            /// <summary>Virtual method pointer for `getDrivePosition`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxTransform*, PxTransform*> getDrivePosition;
            /// <summary>Virtual method pointer for `setDriveVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxVec3*, PxVec3*, NativeBoolean, void> setDriveVelocity;
            /// <summary>Virtual method pointer for `getDriveVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, PxVec3*, PxVec3*, void> getDriveVelocity;
            /// <summary>Virtual method pointer for `setProjectionLinearTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float, void> setProjectionLinearTolerance;
            /// <summary>Virtual method pointer for `getProjectionLinearTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getProjectionLinearTolerance;
            /// <summary>Virtual method pointer for `setProjectionAngularTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float, void> setProjectionAngularTolerance;
            /// <summary>Virtual method pointer for `getProjectionAngularTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxD6Joint*, float> getProjectionAngularTolerance;
        }
    }
}
