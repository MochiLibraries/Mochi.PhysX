// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public unsafe partial struct PxArticulation
    {
        [FieldOffset(0)] public PxArticulationBase Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxArticulation* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setMaxProjectionIterations(uint iterations)
        {
            fixed (PxArticulation* @this = &this)
            { VirtualMethodTablePointer->setMaxProjectionIterations(@this, iterations); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getMaxProjectionIterations()
        {
            fixed (PxArticulation* @this = &this)
            { return VirtualMethodTablePointer->getMaxProjectionIterations(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setSeparationTolerance(float tolerance)
        {
            fixed (PxArticulation* @this = &this)
            { VirtualMethodTablePointer->setSeparationTolerance(@this, tolerance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getSeparationTolerance()
        {
            fixed (PxArticulation* @this = &this)
            { return VirtualMethodTablePointer->getSeparationTolerance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setInternalDriveIterations(uint iterations)
        {
            fixed (PxArticulation* @this = &this)
            { VirtualMethodTablePointer->setInternalDriveIterations(@this, iterations); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getInternalDriveIterations()
        {
            fixed (PxArticulation* @this = &this)
            { return VirtualMethodTablePointer->getInternalDriveIterations(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setExternalDriveIterations(uint iterations)
        {
            fixed (PxArticulation* @this = &this)
            { VirtualMethodTablePointer->setExternalDriveIterations(@this, iterations); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getExternalDriveIterations()
        {
            fixed (PxArticulation* @this = &this)
            { return VirtualMethodTablePointer->getExternalDriveIterations(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxArticulationDriveCache* createDriveCache(float compliance, uint driveIterations)
        {
            fixed (PxArticulation* @this = &this)
            { return VirtualMethodTablePointer->createDriveCache(@this, compliance, driveIterations); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void updateDriveCache(PxArticulationDriveCache* driveCache, float compliance, uint driveIterations)
        {
            fixed (PxArticulation* @this = &this)
            { VirtualMethodTablePointer->updateDriveCache(@this, driveCache, compliance, driveIterations); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void releaseDriveCache(PxArticulationDriveCache* driveCache)
        {
            fixed (PxArticulation* @this = &this)
            { VirtualMethodTablePointer->releaseDriveCache(@this, driveCache); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void applyImpulse(PxArticulationLink* link, PxArticulationDriveCache* driveCache, PxVec3* linearImpulse, PxVec3* angularImpulse)
        {
            fixed (PxArticulation* @this = &this)
            { VirtualMethodTablePointer->applyImpulse(@this, link, driveCache, linearImpulse, angularImpulse); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void computeImpulseResponse(PxArticulationLink* link, PxVec3* linearResponse, PxVec3* angularResponse, PxArticulationDriveCache* driveCache, PxVec3* linearImpulse, PxVec3* angularImpulse)
        {
            fixed (PxArticulation* @this = &this)
            { VirtualMethodTablePointer->computeImpulseResponse(@this, link, linearResponse, angularResponse, driveCache, linearImpulse, angularImpulse); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, void> release;
            /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, byte*> getConcreteTypeName;
            /// <summary>Virtual method pointer for `isReleasable`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, NativeBoolean> isReleasable;
            /// <summary>Virtual method pointer for `~PxArticulation`</summary>
            public void* __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `isKindOf`</summary>
            public void* isKindOf;
            /// <summary>Virtual method pointer for `getScene`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxScene*> getScene;
            /// <summary>Virtual method pointer for `setSolverIterationCounts`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, uint, uint, void> setSolverIterationCounts;
            /// <summary>Virtual method pointer for `getSolverIterationCounts`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, uint*, uint*, void> getSolverIterationCounts;
            /// <summary>Virtual method pointer for `isSleeping`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, NativeBoolean> isSleeping;
            /// <summary>Virtual method pointer for `setSleepThreshold`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, float, void> setSleepThreshold;
            /// <summary>Virtual method pointer for `getSleepThreshold`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, float> getSleepThreshold;
            /// <summary>Virtual method pointer for `setStabilizationThreshold`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, float, void> setStabilizationThreshold;
            /// <summary>Virtual method pointer for `getStabilizationThreshold`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, float> getStabilizationThreshold;
            /// <summary>Virtual method pointer for `setWakeCounter`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, float, void> setWakeCounter;
            /// <summary>Virtual method pointer for `getWakeCounter`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, float> getWakeCounter;
            /// <summary>Virtual method pointer for `wakeUp`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, void> wakeUp;
            /// <summary>Virtual method pointer for `putToSleep`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, void> putToSleep;
            /// <summary>Virtual method pointer for `createLink`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationLink*, PxTransform*, PxArticulationLink*> createLink;
            /// <summary>Virtual method pointer for `getNbLinks`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, uint> getNbLinks;
            /// <summary>Virtual method pointer for `getLinks`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationLink**, uint, uint, uint> getLinks;
            /// <summary>Virtual method pointer for `setName`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, byte*, void> setName;
            /// <summary>Virtual method pointer for `getName`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, byte*> getName;
            /// <summary>Virtual method pointer for `getWorldBounds`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxBounds3*, float, PxBounds3*> getWorldBounds;
            /// <summary>Virtual method pointer for `getAggregate`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxAggregate*> getAggregate;
            /// <summary>Virtual method pointer for `getImpl`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationImpl*> getImpl_0;
            /// <summary>Virtual method pointer for `getImpl`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationImpl*> getImpl_1;
            /// <summary>Virtual method pointer for `createArticulationJoint`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationLink*, PxTransform*, PxArticulationLink*, PxTransform*, PxArticulationJointBase*> createArticulationJoint;
            /// <summary>Virtual method pointer for `releaseArticulationJoint`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationJointBase*, void> releaseArticulationJoint;
            /// <summary>Virtual method pointer for `setMaxProjectionIterations`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, uint, void> setMaxProjectionIterations;
            /// <summary>Virtual method pointer for `getMaxProjectionIterations`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, uint> getMaxProjectionIterations;
            /// <summary>Virtual method pointer for `setSeparationTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, float, void> setSeparationTolerance;
            /// <summary>Virtual method pointer for `getSeparationTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, float> getSeparationTolerance;
            /// <summary>Virtual method pointer for `setInternalDriveIterations`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, uint, void> setInternalDriveIterations;
            /// <summary>Virtual method pointer for `getInternalDriveIterations`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, uint> getInternalDriveIterations;
            /// <summary>Virtual method pointer for `setExternalDriveIterations`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, uint, void> setExternalDriveIterations;
            /// <summary>Virtual method pointer for `getExternalDriveIterations`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, uint> getExternalDriveIterations;
            /// <summary>Virtual method pointer for `createDriveCache`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, float, uint, PxArticulationDriveCache*> createDriveCache;
            /// <summary>Virtual method pointer for `updateDriveCache`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationDriveCache*, float, uint, void> updateDriveCache;
            /// <summary>Virtual method pointer for `releaseDriveCache`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationDriveCache*, void> releaseDriveCache;
            /// <summary>Virtual method pointer for `applyImpulse`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationLink*, PxArticulationDriveCache*, PxVec3*, PxVec3*, void> applyImpulse;
            /// <summary>Virtual method pointer for `computeImpulseResponse`</summary>
            public delegate* unmanaged[Cdecl]<PxArticulation*, PxArticulationLink*, PxVec3*, PxVec3*, PxArticulationDriveCache*, PxVec3*, PxVec3*, void> computeImpulseResponse;
        }
    }
}
