// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public unsafe partial struct PxCudaContextManager
    {
        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void acquireContext()
        {
            fixed (PxCudaContextManager* @this = &this)
            { VirtualMethodTablePointer->acquireContext(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void releaseContext()
        {
            fixed (PxCudaContextManager* @this = &this)
            { VirtualMethodTablePointer->releaseContext(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CUctx_st* getContext()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getContext(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxCudaMemoryManager* getMemoryManager()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getMemoryManager(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool contextIsValid()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->contextIsValid(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool supportsArchSM10()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->supportsArchSM10(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool supportsArchSM11()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->supportsArchSM11(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool supportsArchSM12()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->supportsArchSM12(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool supportsArchSM13()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->supportsArchSM13(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool supportsArchSM20()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->supportsArchSM20(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool supportsArchSM30()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->supportsArchSM30(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool supportsArchSM35()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->supportsArchSM35(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool supportsArchSM50()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->supportsArchSM50(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool supportsArchSM52()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->supportsArchSM52(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool supportsArchSM60()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->supportsArchSM60(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool isIntegrated()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->isIntegrated(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool canMapHostMemory()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->canMapHostMemory(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int getDriverVersion()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getDriverVersion(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ulong getDeviceTotalMemBytes()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getDeviceTotalMemBytes(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int getMultiprocessorCount()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getMultiprocessorCount(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getClockRate()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getClockRate(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int getSharedMemPerBlock()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getSharedMemPerBlock(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int getSharedMemPerMultiprocessor()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getSharedMemPerMultiprocessor(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getMaxThreadsPerBlock()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getMaxThreadsPerBlock(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte* getDeviceName()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getDeviceName(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int getDevice()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getDevice(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxCudaInteropMode getInteropMode()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getInteropMode(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setUsingConcurrentStreams(bool arg0)
        {
            fixed (PxCudaContextManager* @this = &this)
            { VirtualMethodTablePointer->setUsingConcurrentStreams(@this, arg0); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool getUsingConcurrentStreams()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->getUsingConcurrentStreams(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool registerResourceInCudaGL(CUgraphicsResource_st** resource, uint buffer, PxCudaInteropRegisterFlags* flags)
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->registerResourceInCudaGL(@this, resource, buffer, flags); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool registerResourceInCudaD3D(CUgraphicsResource_st** resource, void* resourcePointer, PxCudaInteropRegisterFlags* flags)
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->registerResourceInCudaD3D(@this, resource, resourcePointer, flags); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool unregisterResourceInCuda(CUgraphicsResource_st* resource)
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->unregisterResourceInCuda(@this, resource); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int usingDedicatedGPU()
        {
            fixed (PxCudaContextManager* @this = &this)
            { return VirtualMethodTablePointer->usingDedicatedGPU(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxCudaContextManager* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `acquireContext`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, void> acquireContext;
            /// <summary>Virtual method pointer for `releaseContext`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, void> releaseContext;
            /// <summary>Virtual method pointer for `getContext`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, CUctx_st*> getContext;
            /// <summary>Virtual method pointer for `getMemoryManager`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, PxCudaMemoryManager*> getMemoryManager;
            /// <summary>Virtual method pointer for `contextIsValid`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> contextIsValid;
            /// <summary>Virtual method pointer for `supportsArchSM10`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> supportsArchSM10;
            /// <summary>Virtual method pointer for `supportsArchSM11`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> supportsArchSM11;
            /// <summary>Virtual method pointer for `supportsArchSM12`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> supportsArchSM12;
            /// <summary>Virtual method pointer for `supportsArchSM13`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> supportsArchSM13;
            /// <summary>Virtual method pointer for `supportsArchSM20`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> supportsArchSM20;
            /// <summary>Virtual method pointer for `supportsArchSM30`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> supportsArchSM30;
            /// <summary>Virtual method pointer for `supportsArchSM35`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> supportsArchSM35;
            /// <summary>Virtual method pointer for `supportsArchSM50`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> supportsArchSM50;
            /// <summary>Virtual method pointer for `supportsArchSM52`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> supportsArchSM52;
            /// <summary>Virtual method pointer for `supportsArchSM60`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> supportsArchSM60;
            /// <summary>Virtual method pointer for `isIntegrated`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> isIntegrated;
            /// <summary>Virtual method pointer for `canMapHostMemory`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> canMapHostMemory;
            /// <summary>Virtual method pointer for `getDriverVersion`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, int> getDriverVersion;
            /// <summary>Virtual method pointer for `getDeviceTotalMemBytes`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, ulong> getDeviceTotalMemBytes;
            /// <summary>Virtual method pointer for `getMultiprocessorCount`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, int> getMultiprocessorCount;
            /// <summary>Virtual method pointer for `getClockRate`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, uint> getClockRate;
            /// <summary>Virtual method pointer for `getSharedMemPerBlock`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, int> getSharedMemPerBlock;
            /// <summary>Virtual method pointer for `getSharedMemPerMultiprocessor`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, int> getSharedMemPerMultiprocessor;
            /// <summary>Virtual method pointer for `getMaxThreadsPerBlock`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, uint> getMaxThreadsPerBlock;
            /// <summary>Virtual method pointer for `getDeviceName`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, byte*> getDeviceName;
            /// <summary>Virtual method pointer for `getDevice`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, int> getDevice;
            /// <summary>Virtual method pointer for `getInteropMode`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, PxCudaInteropMode> getInteropMode;
            /// <summary>Virtual method pointer for `setUsingConcurrentStreams`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean, void> setUsingConcurrentStreams;
            /// <summary>Virtual method pointer for `getUsingConcurrentStreams`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, NativeBoolean> getUsingConcurrentStreams;
            /// <summary>Virtual method pointer for `registerResourceInCudaGL`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, CUgraphicsResource_st**, uint, PxCudaInteropRegisterFlags*, NativeBoolean> registerResourceInCudaGL;
            /// <summary>Virtual method pointer for `registerResourceInCudaD3D`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, CUgraphicsResource_st**, void*, PxCudaInteropRegisterFlags*, NativeBoolean> registerResourceInCudaD3D;
            /// <summary>Virtual method pointer for `unregisterResourceInCuda`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, CUgraphicsResource_st*, NativeBoolean> unregisterResourceInCuda;
            /// <summary>Virtual method pointer for `usingDedicatedGPU`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, int> usingDedicatedGPU;
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxCudaContextManager*, void> release;
            /// <summary>Virtual method pointer for `~PxCudaContextManager`</summary>
            public void* __DeletingDestructorPointer;
        }
    }
}
