// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public unsafe partial struct PxLockedData
    {
        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxDataAccessFlags getDataAccessFlags()
        {
            fixed (PxLockedData* @this = &this)
            {
                PxDataAccessFlags __returnBuffer;
                VirtualMethodTablePointer->getDataAccessFlags(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void unlock()
        {
            fixed (PxLockedData* @this = &this)
            { VirtualMethodTablePointer->unlock(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Destructor()
        {
            fixed (PxLockedData* @this = &this)
            { VirtualMethodTablePointer->__DeletingDestructorPointer(@this); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `getDataAccessFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxLockedData*, PxDataAccessFlags*, PxDataAccessFlags*> getDataAccessFlags;
            /// <summary>Virtual method pointer for `unlock`</summary>
            public delegate* unmanaged[Cdecl]<PxLockedData*, void> unlock;
            /// <summary>Virtual method pointer for `~PxLockedData`</summary>
            public delegate* unmanaged[Cdecl]<PxLockedData*, void> __DeletingDestructorPointer;
        }
    }
}
