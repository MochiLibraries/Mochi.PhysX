// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 1)]
    public unsafe partial struct PxRigidBodyExt
    {
        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?updateMassAndInertia@PxRigidBodyExt@physx@@SA_NAEAVPxRigidBody@2@PEBMIPEBVPxVec3@2@_N@Z", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool updateMassAndInertia(PxRigidBody* body, float* shapeDensities, uint shapeDensityCount, PxVec3* massLocalPose = null, [MarshalAs(UnmanagedType.I1)] bool includeNonSimShapes = false);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?updateMassAndInertia@PxRigidBodyExt@physx@@SA_NAEAVPxRigidBody@2@MPEBVPxVec3@2@_N@Z", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool updateMassAndInertia(PxRigidBody* body, float density, PxVec3* massLocalPose = null, [MarshalAs(UnmanagedType.I1)] bool includeNonSimShapes = false);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setMassAndUpdateInertia@PxRigidBodyExt@physx@@SA_NAEAVPxRigidBody@2@PEBMIPEBVPxVec3@2@_N@Z", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool setMassAndUpdateInertia(PxRigidBody* body, float* shapeMasses, uint shapeMassCount, PxVec3* massLocalPose = null, [MarshalAs(UnmanagedType.I1)] bool includeNonSimShapes = false);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?setMassAndUpdateInertia@PxRigidBodyExt@physx@@SA_NAEAVPxRigidBody@2@MPEBVPxVec3@2@_N@Z", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool setMassAndUpdateInertia(PxRigidBody* body, float mass, PxVec3* massLocalPose = null, [MarshalAs(UnmanagedType.I1)] bool includeNonSimShapes = false);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?computeMassPropertiesFromShapes@PxRigidBodyExt@physx@@SA?AVPxMassProperties@2@PEBQEBVPxShape@2@I@Z", ExactSpelling = true)]
        private static extern PxMassProperties* computeMassPropertiesFromShapes_PInvoke(out PxMassProperties __returnBuffer, PxShape** shapes, uint shapeCount);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static PxMassProperties computeMassPropertiesFromShapes(PxShape** shapes, uint shapeCount)
        {
            PxMassProperties __returnBuffer;
            computeMassPropertiesFromShapes_PInvoke(out __returnBuffer, shapes, shapeCount);
            return __returnBuffer;
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?addForceAtPos@PxRigidBodyExt@physx@@SAXAEAVPxRigidBody@2@AEBVPxVec3@2@1W4Enum@PxForceMode@2@_N@Z", ExactSpelling = true)]
        public static extern void addForceAtPos(PxRigidBody* body, PxVec3* force, PxVec3* pos, PxForceMode mode = PxForceMode.eFORCE, [MarshalAs(UnmanagedType.I1)] bool wakeup = true);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?addForceAtLocalPos@PxRigidBodyExt@physx@@SAXAEAVPxRigidBody@2@AEBVPxVec3@2@1W4Enum@PxForceMode@2@_N@Z", ExactSpelling = true)]
        public static extern void addForceAtLocalPos(PxRigidBody* body, PxVec3* force, PxVec3* pos, PxForceMode mode = PxForceMode.eFORCE, [MarshalAs(UnmanagedType.I1)] bool wakeup = true);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?addLocalForceAtPos@PxRigidBodyExt@physx@@SAXAEAVPxRigidBody@2@AEBVPxVec3@2@1W4Enum@PxForceMode@2@_N@Z", ExactSpelling = true)]
        public static extern void addLocalForceAtPos(PxRigidBody* body, PxVec3* force, PxVec3* pos, PxForceMode mode = PxForceMode.eFORCE, [MarshalAs(UnmanagedType.I1)] bool wakeup = true);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?addLocalForceAtLocalPos@PxRigidBodyExt@physx@@SAXAEAVPxRigidBody@2@AEBVPxVec3@2@1W4Enum@PxForceMode@2@_N@Z", ExactSpelling = true)]
        public static extern void addLocalForceAtLocalPos(PxRigidBody* body, PxVec3* force, PxVec3* pos, PxForceMode mode = PxForceMode.eFORCE, [MarshalAs(UnmanagedType.I1)] bool wakeup = true);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getVelocityAtPos@PxRigidBodyExt@physx@@SA?AVPxVec3@2@AEBVPxRigidBody@2@AEBV32@@Z", ExactSpelling = true)]
        private static extern PxVec3* getVelocityAtPos_PInvoke(out PxVec3 __returnBuffer, PxRigidBody* body, PxVec3* pos);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static PxVec3 getVelocityAtPos(PxRigidBody* body, PxVec3* pos)
        {
            PxVec3 __returnBuffer;
            getVelocityAtPos_PInvoke(out __returnBuffer, body, pos);
            return __returnBuffer;
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getLocalVelocityAtLocalPos@PxRigidBodyExt@physx@@SA?AVPxVec3@2@AEBVPxRigidBody@2@AEBV32@@Z", ExactSpelling = true)]
        private static extern PxVec3* getLocalVelocityAtLocalPos_PInvoke(out PxVec3 __returnBuffer, PxRigidBody* body, PxVec3* pos);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static PxVec3 getLocalVelocityAtLocalPos(PxRigidBody* body, PxVec3* pos)
        {
            PxVec3 __returnBuffer;
            getLocalVelocityAtLocalPos_PInvoke(out __returnBuffer, body, pos);
            return __returnBuffer;
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getVelocityAtOffset@PxRigidBodyExt@physx@@SA?AVPxVec3@2@AEBVPxRigidBody@2@AEBV32@@Z", ExactSpelling = true)]
        private static extern PxVec3* getVelocityAtOffset_PInvoke(out PxVec3 __returnBuffer, PxRigidBody* body, PxVec3* pos);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static PxVec3 getVelocityAtOffset(PxRigidBody* body, PxVec3* pos)
        {
            PxVec3 __returnBuffer;
            getVelocityAtOffset_PInvoke(out __returnBuffer, body, pos);
            return __returnBuffer;
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?linearSweepSingle@PxRigidBodyExt@physx@@SA_NAEAVPxRigidBody@2@AEAVPxScene@2@AEBVPxVec3@2@MV?$PxFlags@W4Enum@PxHitFlag@physx@@G@2@AEAUPxSweepHit@2@AEAIAEBUPxQueryFilterData@2@PEAVPxQueryFilterCallback@2@PEBUPxQueryCache@2@M@Z", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool linearSweepSingle(PxRigidBody* body, PxScene* scene, PxVec3* unitDir, float distance, PxHitFlags* outputFlags, PxSweepHit* closestHit, uint* shapeIndex, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall = null, PxQueryCache* cache = null, float inflation = 0f);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?linearSweepMultiple@PxRigidBodyExt@physx@@SAIAEAVPxRigidBody@2@AEAVPxScene@2@AEBVPxVec3@2@MV?$PxFlags@W4Enum@PxHitFlag@physx@@G@2@PEAUPxSweepHit@2@PEAIIAEAU72@AEAHAEA_NAEBUPxQueryFilterData@2@PEAVPxQueryFilterCallback@2@PEBUPxQueryCache@2@M@Z", ExactSpelling = true)]
        public static extern uint linearSweepMultiple(PxRigidBody* body, PxScene* scene, PxVec3* unitDir, float distance, PxHitFlags* outputFlags, PxSweepHit* touchHitBuffer, uint* touchHitShapeIndices, uint touchHitBufferSize, PxSweepHit* block, int* blockingShapeIndex, bool* overflow, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall = null, PxQueryCache* cache = null, float inflation = 0f);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?computeVelocityDeltaFromImpulse@PxRigidBodyExt@physx@@SAXAEBVPxRigidBody@2@AEBVPxVec3@2@1AEAV42@2@Z", ExactSpelling = true)]
        public static extern void computeVelocityDeltaFromImpulse(PxRigidBody* body, PxVec3* impulsiveForce, PxVec3* impulsiveTorque, PxVec3* deltaLinearVelocity, PxVec3* deltaAngularVelocity);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?computeVelocityDeltaFromImpulse@PxRigidBodyExt@physx@@SAXAEBVPxRigidBody@2@AEBVPxTransform@2@AEBVPxVec3@2@2MMAEAV52@3@Z", ExactSpelling = true)]
        public static extern void computeVelocityDeltaFromImpulse(PxRigidBody* body, PxTransform* globalPose, PxVec3* point, PxVec3* impulse, float invMassScale, float invInertiaScale, PxVec3* deltaLinearVelocity, PxVec3* deltaAngularVelocity);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?computeLinearAngularImpulse@PxRigidBodyExt@physx@@SAXAEBVPxRigidBody@2@AEBVPxTransform@2@AEBVPxVec3@2@2MMAEAV52@3@Z", ExactSpelling = true)]
        public static extern void computeLinearAngularImpulse(PxRigidBody* body, PxTransform* globalPose, PxVec3* point, PxVec3* impulse, float invMassScale, float invInertiaScale, PxVec3* linearImpulse, PxVec3* angularImpulse);
    }
}
