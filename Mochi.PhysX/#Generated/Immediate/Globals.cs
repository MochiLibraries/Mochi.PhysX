// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Dy;
using System.Runtime.InteropServices;

namespace Mochi.PhysX.Immediate
{
    public unsafe static partial class Globals
    {
        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxConstructSolverBodies(PxRigidBodyData* inRigidData, PxSolverBodyData* outSolverBodyData, uint nbBodies, PxVec3* gravity, float dt);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxConstructStaticSolverBody(PxTransform* globalPose, PxSolverBodyData* solverBodyData);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint PxBatchConstraints(PxSolverConstraintDesc* solverConstraintDescs, uint nbConstraints, PxSolverBody* solverBodies, uint nbBodies, PxConstraintBatchHeader* outBatchHeaders, PxSolverConstraintDesc* outOrderedConstraintDescs, ArticulationV** articulations = null, uint nbArticulations = 0);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxCreateContactConstraints(PxConstraintBatchHeader* batchHeaders, uint nbHeaders, PxSolverContactDesc* contactDescs, PxConstraintAllocator* allocator, float invDt, float bounceThreshold, float frictionOffsetThreshold, float correlationDistance);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxCreateJointConstraints(PxConstraintBatchHeader* batchHeaders, uint nbHeaders, PxSolverConstraintPrepDesc* jointDescs, PxConstraintAllocator* allocator, float dt, float invDt);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxCreateJointConstraintsWithShaders(PxConstraintBatchHeader* batchHeaders, uint nbBatchHeaders, PxConstraint** constraints, PxSolverConstraintPrepDesc* jointDescs, PxConstraintAllocator* allocator, float dt, float invDt);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxCreateJointConstraintsWithImmediateShaders(PxConstraintBatchHeader* batchHeaders, uint nbBatchHeaders, PxImmediateConstraint* constraints, PxSolverConstraintPrepDesc* jointDescs, PxConstraintAllocator* allocator, float dt, float invDt);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxSolveConstraints(PxConstraintBatchHeader* batchHeaders, uint nbBatchHeaders, PxSolverConstraintDesc* solverConstraintDescs, PxSolverBody* solverBodies, PxVec3* linearMotionVelocity, PxVec3* angularMotionVelocity, uint nbSolverBodies, uint nbPositionIterations, uint nbVelocityIterations, float dt = 0f, float invDt = 0f, uint nbSolverArticulations = 0, ArticulationV** solverArticulations = null);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxIntegrateSolverBodies(PxSolverBodyData* solverBodyData, PxSolverBody* solverBody, PxVec3* linearMotionVelocity, PxVec3* angularMotionState, uint nbBodiesToIntegrate, float dt);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxGenerateContacts(PxGeometry** geom0, PxGeometry** geom1, PxTransform* pose0, PxTransform* pose1, PxCache* contactCache, uint nbPairs, PxContactRecorder* contactRecorder, float contactDistance, float meshContactMargin, float toleranceLength, PxCacheAllocator* allocator);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxRegisterImmediateArticulations();

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ArticulationV* PxCreateFeatherstoneArticulation(PxFeatherstoneArticulationData* data);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxReleaseArticulation(ArticulationV* articulation);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern PxArticulationCache* PxCreateArticulationCache(ArticulationV* articulation);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxCopyInternalStateToArticulationCache(ArticulationV* articulation, PxArticulationCache* cache, PxArticulationCache.PxArticulationCacheFlags* flag);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxApplyArticulationCache(ArticulationV* articulation, PxArticulationCache* cache, PxArticulationCache.PxArticulationCacheFlags* flag);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxReleaseArticulationCache(PxArticulationCache* cache);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong PxAddArticulationLink(ArticulationV* articulation, PxFeatherstoneArticulationLinkData* data, [MarshalAs(UnmanagedType.I1)] bool isLastLink = false);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ArticulationV* PxGetLinkArticulation(ulong link);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint PxGetLinkIndex(ulong link);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxGetLinkData(ulong link, PxLinkData* data);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint PxGetAllLinkData(ArticulationV* articulation, PxLinkData* data);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxGetMutableLinkData(ulong link, PxMutableLinkData* data);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxSetMutableLinkData(ulong link, PxMutableLinkData* data);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxGetJointData(ulong link, PxFeatherstoneArticulationJointData* data);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxSetJointData(ulong link, PxFeatherstoneArticulationJointData* data);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxComputeUnconstrainedVelocities(ArticulationV* articulation, PxVec3* gravity, float dt);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxUpdateArticulationBodies(ArticulationV* articulation, float dt);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxComputeUnconstrainedVelocitiesTGS(ArticulationV* articulation, PxVec3* gravity, float dt, float totalDt, float invDt, float invTotalDt);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxUpdateArticulationBodiesTGS(ArticulationV* articulation, float dt);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxConstructSolverBodiesTGS(PxRigidBodyData* inRigidData, PxTGSSolverBodyVel* outSolverBodyVel, PxTGSSolverBodyTxInertia* outSolverBodyTxInertia, PxTGSSolverBodyData* outSolverBodyData, uint nbBodies, PxVec3* gravity, float dt);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxConstructStaticSolverBodyTGS(PxTransform* globalPose, PxTGSSolverBodyVel* solverBodyVel, PxTGSSolverBodyTxInertia* solverBodyTxInertia, PxTGSSolverBodyData* solverBodyData);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint PxBatchConstraintsTGS(PxSolverConstraintDesc* solverConstraintDescs, uint nbConstraints, PxTGSSolverBodyVel* solverBodies, uint nbBodies, PxConstraintBatchHeader* outBatchHeaders, PxSolverConstraintDesc* outOrderedConstraintDescs, ArticulationV** articulations = null, uint nbArticulations = 0);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxCreateContactConstraintsTGS(PxConstraintBatchHeader* batchHeaders, uint nbHeaders, PxTGSSolverContactDesc* contactDescs, PxConstraintAllocator* allocator, float invDt, float invTotalDt, float bounceThreshold, float frictionOffsetThreshold, float correlationDistance);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxCreateJointConstraintsTGS(PxConstraintBatchHeader* batchHeaders, uint nbHeaders, PxTGSSolverConstraintPrepDesc* jointDescs, PxConstraintAllocator* allocator, float dt, float totalDt, float invDt, float invTotalDt, float lengthScale);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxCreateJointConstraintsWithShadersTGS(PxConstraintBatchHeader* batchHeaders, uint nbBatchHeaders, PxConstraint** constraints, PxTGSSolverConstraintPrepDesc* jointDescs, PxConstraintAllocator* allocator, float dt, float totalDt, float invDt, float invTotalDt, float lengthScale);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        public static extern bool PxCreateJointConstraintsWithImmediateShadersTGS(PxConstraintBatchHeader* batchHeaders, uint nbBatchHeaders, PxImmediateConstraint* constraints, PxTGSSolverConstraintPrepDesc* jointDescs, PxConstraintAllocator* allocator, float dt, float totalDt, float invDt, float invTotalDt, float lengthScale);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxSolveConstraintsTGS(PxConstraintBatchHeader* batchHeaders, uint nbBatchHeaders, PxSolverConstraintDesc* solverConstraintDescs, PxTGSSolverBodyVel* solverBodies, PxTGSSolverBodyTxInertia* txInertias, uint nbSolverBodies, uint nbPositionIterations, uint nbVelocityIterations, float dt, float invDt, uint nbSolverArticulations, ArticulationV** solverArticulations);

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PxIntegrateSolverBodiesTGS(PxTGSSolverBodyVel* solverBody, PxTGSSolverBodyTxInertia* txInertia, PxTransform* poses, uint nbBodiesToIntegrate, float dt);
    }
}
