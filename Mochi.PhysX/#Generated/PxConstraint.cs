// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct PxConstraint
    {
        [FieldOffset(0)] public PxBase Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxScene* getScene()
        {
            fixed (PxConstraint* @this = &this)
            { return VirtualMethodTablePointer->getScene(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void getActors(PxRigidActor** actor0, PxRigidActor** actor1)
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->getActors(@this, actor0, actor1); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setActors(PxRigidActor* actor0, PxRigidActor* actor1)
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->setActors(@this, actor0, actor1); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void markDirty()
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->markDirty(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setFlags(PxConstraintFlags* flags)
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->setFlags(@this, flags); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxConstraintFlags getFlags()
        {
            fixed (PxConstraint* @this = &this)
            {
                PxConstraintFlags __returnBuffer;
                VirtualMethodTablePointer->getFlags(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setFlag(PxConstraintFlags flag, bool value)
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->setFlag(@this, flag, value); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void getForce(PxVec3* linear, PxVec3* angular)
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->getForce(@this, linear, angular); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool isValid()
        {
            fixed (PxConstraint* @this = &this)
            { return VirtualMethodTablePointer->isValid(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setBreakForce(float linear, float angular)
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->setBreakForce(@this, linear, angular); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void getBreakForce(float* linear, float* angular)
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->getBreakForce(@this, linear, angular); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setMinResponseThreshold(float threshold)
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->setMinResponseThreshold(@this, threshold); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getMinResponseThreshold()
        {
            fixed (PxConstraint* @this = &this)
            { return VirtualMethodTablePointer->getMinResponseThreshold(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void* getExternalReference(uint* typeID)
        {
            fixed (PxConstraint* @this = &this)
            { return VirtualMethodTablePointer->getExternalReference(@this, typeID); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setConstraintFunctions(PxConstraintConnector* connector, PxConstraintShaderTable* shaders)
        {
            fixed (PxConstraint* @this = &this)
            { VirtualMethodTablePointer->setConstraintFunctions(@this, connector, shaders); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte* getConcreteTypeName()
        {
            fixed (PxConstraint* @this = &this)
            { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, void> release;
            /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, byte*> getConcreteTypeName;
            /// <summary>Virtual method pointer for `isReleasable`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, NativeBoolean> isReleasable;
            /// <summary>Virtual method pointer for `~PxConstraint`</summary>
            public void* __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `isKindOf`</summary>
            public void* isKindOf;
            /// <summary>Virtual method pointer for `getScene`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, PxScene*> getScene;
            /// <summary>Virtual method pointer for `getActors`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, PxRigidActor**, PxRigidActor**, void> getActors;
            /// <summary>Virtual method pointer for `setActors`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, PxRigidActor*, PxRigidActor*, void> setActors;
            /// <summary>Virtual method pointer for `markDirty`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, void> markDirty;
            /// <summary>Virtual method pointer for `setFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, PxConstraintFlags*, void> setFlags;
            /// <summary>Virtual method pointer for `getFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, PxConstraintFlags*, PxConstraintFlags*> getFlags;
            /// <summary>Virtual method pointer for `setFlag`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, PxConstraintFlags, NativeBoolean, void> setFlag;
            /// <summary>Virtual method pointer for `getForce`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, PxVec3*, PxVec3*, void> getForce;
            /// <summary>Virtual method pointer for `isValid`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, NativeBoolean> isValid;
            /// <summary>Virtual method pointer for `setBreakForce`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, float, float, void> setBreakForce;
            /// <summary>Virtual method pointer for `getBreakForce`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, float*, float*, void> getBreakForce;
            /// <summary>Virtual method pointer for `setMinResponseThreshold`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, float, void> setMinResponseThreshold;
            /// <summary>Virtual method pointer for `getMinResponseThreshold`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, float> getMinResponseThreshold;
            /// <summary>Virtual method pointer for `getExternalReference`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, uint*, void*> getExternalReference;
            /// <summary>Virtual method pointer for `setConstraintFunctions`</summary>
            public delegate* unmanaged[Cdecl]<PxConstraint*, PxConstraintConnector*, PxConstraintShaderTable*, void> setConstraintFunctions;
        }
    }
}
