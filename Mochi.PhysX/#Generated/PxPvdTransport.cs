// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public unsafe partial struct PxPvdTransport
    {
        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool connect()
        {
            fixed (PxPvdTransport* @this = &this)
            { return VirtualMethodTablePointer->connect(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void disconnect()
        {
            fixed (PxPvdTransport* @this = &this)
            { VirtualMethodTablePointer->disconnect(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool isConnected()
        {
            fixed (PxPvdTransport* @this = &this)
            { return VirtualMethodTablePointer->isConnected(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool write(byte* inBytes, uint inLength)
        {
            fixed (PxPvdTransport* @this = &this)
            { return VirtualMethodTablePointer->write(@this, inBytes, inLength); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxPvdTransport* @lock()
        {
            fixed (PxPvdTransport* @this = &this)
            { return VirtualMethodTablePointer->@lock(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void unlock()
        {
            fixed (PxPvdTransport* @this = &this)
            { VirtualMethodTablePointer->unlock(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void flush()
        {
            fixed (PxPvdTransport* @this = &this)
            { VirtualMethodTablePointer->flush(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ulong getWrittenDataSize()
        {
            fixed (PxPvdTransport* @this = &this)
            { return VirtualMethodTablePointer->getWrittenDataSize(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxPvdTransport* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `connect`</summary>
            public delegate* unmanaged[Cdecl]<PxPvdTransport*, NativeBoolean> connect;
            /// <summary>Virtual method pointer for `disconnect`</summary>
            public delegate* unmanaged[Cdecl]<PxPvdTransport*, void> disconnect;
            /// <summary>Virtual method pointer for `isConnected`</summary>
            public delegate* unmanaged[Cdecl]<PxPvdTransport*, NativeBoolean> isConnected;
            /// <summary>Virtual method pointer for `write`</summary>
            public delegate* unmanaged[Cdecl]<PxPvdTransport*, byte*, uint, NativeBoolean> write;
            /// <summary>Virtual method pointer for `lock`</summary>
            public delegate* unmanaged[Cdecl]<PxPvdTransport*, PxPvdTransport*> @lock;
            /// <summary>Virtual method pointer for `unlock`</summary>
            public delegate* unmanaged[Cdecl]<PxPvdTransport*, void> unlock;
            /// <summary>Virtual method pointer for `flush`</summary>
            public delegate* unmanaged[Cdecl]<PxPvdTransport*, void> flush;
            /// <summary>Virtual method pointer for `getWrittenDataSize`</summary>
            public delegate* unmanaged[Cdecl]<PxPvdTransport*, ulong> getWrittenDataSize;
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxPvdTransport*, void> release;
            /// <summary>Virtual method pointer for `~PxPvdTransport`</summary>
            public void* __DeletingDestructorPointer;
        }
    }
}
