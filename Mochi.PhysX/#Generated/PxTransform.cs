// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 28)]
    public unsafe partial struct PxTransform
    {
        [FieldOffset(0)] public PxQuat q;

        [FieldOffset(16)] public PxVec3 p;

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper25", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxTransform* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform()
        {
            fixed (PxTransform* @this = &this)
            { Constructor_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper26", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxTransform* @this, PxVec3* position);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform(PxVec3* position)
        {
            fixed (PxTransform* @this = &this)
            { Constructor_PInvoke(@this, position); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper27", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxTransform* @this, PxIDENTITY r);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform(PxIDENTITY r)
        {
            fixed (PxTransform* @this = &this)
            { Constructor_PInvoke(@this, r); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper28", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxTransform* @this, PxQuat* orientation);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform(PxQuat* orientation)
        {
            fixed (PxTransform* @this = &this)
            { Constructor_PInvoke(@this, orientation); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper29", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxTransform* @this, float x, float y, float z, PxQuat* aQ);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform(float x, float y, float z, PxQuat* aQ)
        {
            fixed (PxTransform* @this = &this)
            { Constructor_PInvoke(@this, x, y, z, aQ); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper30", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxTransform* @this, PxVec3* p0, PxQuat* q0);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform(PxVec3* p0, PxQuat* q0)
        {
            fixed (PxTransform* @this = &this)
            { Constructor_PInvoke(@this, p0, q0); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper31", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(PxTransform* @this, PxMat44* m);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform(PxMat44* m)
        {
            fixed (PxTransform* @this = &this)
            { Constructor_PInvoke(@this, m); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??8PxTransform@physx@@QEBA_NAEBV01@@Z", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool operator_EqualEqual_PInvoke(PxTransform* @this, PxTransform* t);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool operator_EqualEqual(PxTransform* t)
        {
            fixed (PxTransform* @this = &this)
            { return operator_EqualEqual_PInvoke(@this, t); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??DPxTransform@physx@@QEBA?AV01@AEBV01@@Z", ExactSpelling = true)]
        private static extern PxTransform* operator_Star_PInvoke(PxTransform* @this, out PxTransform __returnBuffer, PxTransform* x);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform operator_Star(PxTransform* x)
        {
            fixed (PxTransform* @this = &this)
            {
                PxTransform __returnBuffer;
                operator_Star_PInvoke(@this, out __returnBuffer, x);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??XPxTransform@physx@@QEAAAEAV01@AEAV01@@Z", ExactSpelling = true)]
        private static extern PxTransform* operator_StarEqual_PInvoke(PxTransform* @this, PxTransform* other);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform* operator_StarEqual(PxTransform* other)
        {
            fixed (PxTransform* @this = &this)
            { return operator_StarEqual_PInvoke(@this, other); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getInverse@PxTransform@physx@@QEBA?AV12@XZ", ExactSpelling = true)]
        private static extern PxTransform* getInverse_PInvoke(PxTransform* @this, out PxTransform __returnBuffer);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform getInverse()
        {
            fixed (PxTransform* @this = &this)
            {
                PxTransform __returnBuffer;
                getInverse_PInvoke(@this, out __returnBuffer);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?transform@PxTransform@physx@@QEBA?AVPxVec3@2@AEBV32@@Z", ExactSpelling = true)]
        private static extern PxVec3* transform_PInvoke(PxTransform* @this, out PxVec3 __returnBuffer, PxVec3* input);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3 transform(PxVec3* input)
        {
            fixed (PxTransform* @this = &this)
            {
                PxVec3 __returnBuffer;
                transform_PInvoke(@this, out __returnBuffer, input);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?transformInv@PxTransform@physx@@QEBA?AVPxVec3@2@AEBV32@@Z", ExactSpelling = true)]
        private static extern PxVec3* transformInv_PInvoke(PxTransform* @this, out PxVec3 __returnBuffer, PxVec3* input);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3 transformInv(PxVec3* input)
        {
            fixed (PxTransform* @this = &this)
            {
                PxVec3 __returnBuffer;
                transformInv_PInvoke(@this, out __returnBuffer, input);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?rotate@PxTransform@physx@@QEBA?AVPxVec3@2@AEBV32@@Z", ExactSpelling = true)]
        private static extern PxVec3* rotate_PInvoke(PxTransform* @this, out PxVec3 __returnBuffer, PxVec3* input);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3 rotate(PxVec3* input)
        {
            fixed (PxTransform* @this = &this)
            {
                PxVec3 __returnBuffer;
                rotate_PInvoke(@this, out __returnBuffer, input);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?rotateInv@PxTransform@physx@@QEBA?AVPxVec3@2@AEBV32@@Z", ExactSpelling = true)]
        private static extern PxVec3* rotateInv_PInvoke(PxTransform* @this, out PxVec3 __returnBuffer, PxVec3* input);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3 rotateInv(PxVec3* input)
        {
            fixed (PxTransform* @this = &this)
            {
                PxVec3 __returnBuffer;
                rotateInv_PInvoke(@this, out __returnBuffer, input);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?transform@PxTransform@physx@@QEBA?AV12@AEBV12@@Z", ExactSpelling = true)]
        private static extern PxTransform* transform_PInvoke(PxTransform* @this, out PxTransform __returnBuffer, PxTransform* src);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform transform(PxTransform* src)
        {
            fixed (PxTransform* @this = &this)
            {
                PxTransform __returnBuffer;
                transform_PInvoke(@this, out __returnBuffer, src);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?isValid@PxTransform@physx@@QEBA_NXZ", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool isValid_PInvoke(PxTransform* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool isValid()
        {
            fixed (PxTransform* @this = &this)
            { return isValid_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?isSane@PxTransform@physx@@QEBA_NXZ", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool isSane_PInvoke(PxTransform* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool isSane()
        {
            fixed (PxTransform* @this = &this)
            { return isSane_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?isFinite@PxTransform@physx@@QEBA_NXZ", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool isFinite_PInvoke(PxTransform* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool isFinite()
        {
            fixed (PxTransform* @this = &this)
            { return isFinite_PInvoke(@this); }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?transformInv@PxTransform@physx@@QEBA?AV12@AEBV12@@Z", ExactSpelling = true)]
        private static extern PxTransform* transformInv_PInvoke(PxTransform* @this, out PxTransform __returnBuffer, PxTransform* src);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform transformInv(PxTransform* src)
        {
            fixed (PxTransform* @this = &this)
            {
                PxTransform __returnBuffer;
                transformInv_PInvoke(@this, out __returnBuffer, src);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?transform@PxTransform@physx@@QEBA?AVPxPlane@2@AEBV32@@Z", ExactSpelling = true)]
        private static extern PxPlane* transform_PInvoke(PxTransform* @this, out PxPlane __returnBuffer, PxPlane* plane);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxPlane transform(PxPlane* plane)
        {
            fixed (PxTransform* @this = &this)
            {
                PxPlane __returnBuffer;
                transform_PInvoke(@this, out __returnBuffer, plane);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?inverseTransform@PxTransform@physx@@QEBA?AVPxPlane@2@AEBV32@@Z", ExactSpelling = true)]
        private static extern PxPlane* inverseTransform_PInvoke(PxTransform* @this, out PxPlane __returnBuffer, PxPlane* plane);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxPlane inverseTransform(PxPlane* plane)
        {
            fixed (PxTransform* @this = &this)
            {
                PxPlane __returnBuffer;
                inverseTransform_PInvoke(@this, out __returnBuffer, plane);
                return __returnBuffer;
            }
        }

        [DllImport("Mochi.PhysX.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?getNormalized@PxTransform@physx@@QEBA?AV12@XZ", ExactSpelling = true)]
        private static extern PxTransform* getNormalized_PInvoke(PxTransform* @this, out PxTransform __returnBuffer);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxTransform getNormalized()
        {
            fixed (PxTransform* @this = &this)
            {
                PxTransform __returnBuffer;
                getNormalized_PInvoke(@this, out __returnBuffer);
                return __returnBuffer;
            }
        }
    }
}
