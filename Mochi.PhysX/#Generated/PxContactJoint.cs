// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public unsafe partial struct PxContactJoint
    {
        [FieldOffset(0)] public PxJoint Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setContact(PxVec3* contact)
        {
            fixed (PxContactJoint* @this = &this)
            { VirtualMethodTablePointer->setContact(@this, contact); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setContactNormal(PxVec3* contactNormal)
        {
            fixed (PxContactJoint* @this = &this)
            { VirtualMethodTablePointer->setContactNormal(@this, contactNormal); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setPenetration(float penetration)
        {
            fixed (PxContactJoint* @this = &this)
            { VirtualMethodTablePointer->setPenetration(@this, penetration); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3 getContact()
        {
            fixed (PxContactJoint* @this = &this)
            {
                PxVec3 __returnBuffer;
                VirtualMethodTablePointer->getContact(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxVec3 getContactNormal()
        {
            fixed (PxContactJoint* @this = &this)
            {
                PxVec3 __returnBuffer;
                VirtualMethodTablePointer->getContactNormal(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getPenetration()
        {
            fixed (PxContactJoint* @this = &this)
            { return VirtualMethodTablePointer->getPenetration(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getResititution()
        {
            fixed (PxContactJoint* @this = &this)
            { return VirtualMethodTablePointer->getResititution(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setResititution(float resititution)
        {
            fixed (PxContactJoint* @this = &this)
            { VirtualMethodTablePointer->setResititution(@this, resititution); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getBounceThreshold()
        {
            fixed (PxContactJoint* @this = &this)
            { return VirtualMethodTablePointer->getBounceThreshold(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setBounceThreshold(float bounceThreshold)
        {
            fixed (PxContactJoint* @this = &this)
            { VirtualMethodTablePointer->setBounceThreshold(@this, bounceThreshold); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte* getConcreteTypeName()
        {
            fixed (PxContactJoint* @this = &this)
            { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void computeJacobians(PxJacobianRow* jacobian)
        {
            fixed (PxContactJoint* @this = &this)
            { VirtualMethodTablePointer->computeJacobians(@this, jacobian); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbJacobianRows()
        {
            fixed (PxContactJoint* @this = &this)
            { return VirtualMethodTablePointer->getNbJacobianRows(@this); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, void> release;
            /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, byte*> getConcreteTypeName;
            /// <summary>Virtual method pointer for `isReleasable`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, NativeBoolean> isReleasable;
            /// <summary>Virtual method pointer for `~PxContactJoint`</summary>
            public void* __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `isKindOf`</summary>
            public void* isKindOf;
            /// <summary>Virtual method pointer for `setActors`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxRigidActor*, PxRigidActor*, void> setActors;
            /// <summary>Virtual method pointer for `getActors`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxRigidActor**, PxRigidActor**, void> getActors;
            /// <summary>Virtual method pointer for `setLocalPose`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxJointActorIndex, PxTransform*, void> setLocalPose;
            /// <summary>Virtual method pointer for `getLocalPose`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxTransform*, PxJointActorIndex, PxTransform*> getLocalPose;
            /// <summary>Virtual method pointer for `getRelativeTransform`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxTransform*, PxTransform*> getRelativeTransform;
            /// <summary>Virtual method pointer for `getRelativeLinearVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxVec3*, PxVec3*> getRelativeLinearVelocity;
            /// <summary>Virtual method pointer for `getRelativeAngularVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxVec3*, PxVec3*> getRelativeAngularVelocity;
            /// <summary>Virtual method pointer for `setBreakForce`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float, float, void> setBreakForce;
            /// <summary>Virtual method pointer for `getBreakForce`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float*, float*, void> getBreakForce;
            /// <summary>Virtual method pointer for `setConstraintFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxConstraintFlags*, void> setConstraintFlags;
            /// <summary>Virtual method pointer for `setConstraintFlag`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxConstraintFlags, NativeBoolean, void> setConstraintFlag;
            /// <summary>Virtual method pointer for `getConstraintFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxConstraintFlags*, PxConstraintFlags*> getConstraintFlags;
            /// <summary>Virtual method pointer for `setInvMassScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float, void> setInvMassScale0;
            /// <summary>Virtual method pointer for `getInvMassScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float> getInvMassScale0;
            /// <summary>Virtual method pointer for `setInvInertiaScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float, void> setInvInertiaScale0;
            /// <summary>Virtual method pointer for `getInvInertiaScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float> getInvInertiaScale0;
            /// <summary>Virtual method pointer for `setInvMassScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float, void> setInvMassScale1;
            /// <summary>Virtual method pointer for `getInvMassScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float> getInvMassScale1;
            /// <summary>Virtual method pointer for `setInvInertiaScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float, void> setInvInertiaScale1;
            /// <summary>Virtual method pointer for `getInvInertiaScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float> getInvInertiaScale1;
            /// <summary>Virtual method pointer for `getConstraint`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxConstraint*> getConstraint;
            /// <summary>Virtual method pointer for `setName`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, byte*, void> setName;
            /// <summary>Virtual method pointer for `getName`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, byte*> getName;
            /// <summary>Virtual method pointer for `getScene`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxScene*> getScene;
            /// <summary>Virtual method pointer for `setContact`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxVec3*, void> setContact;
            /// <summary>Virtual method pointer for `setContactNormal`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxVec3*, void> setContactNormal;
            /// <summary>Virtual method pointer for `setPenetration`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float, void> setPenetration;
            /// <summary>Virtual method pointer for `getContact`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxVec3*, PxVec3*> getContact;
            /// <summary>Virtual method pointer for `getContactNormal`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxVec3*, PxVec3*> getContactNormal;
            /// <summary>Virtual method pointer for `getPenetration`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float> getPenetration;
            /// <summary>Virtual method pointer for `getResititution`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float> getResititution;
            /// <summary>Virtual method pointer for `setResititution`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float, void> setResititution;
            /// <summary>Virtual method pointer for `getBounceThreshold`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float> getBounceThreshold;
            /// <summary>Virtual method pointer for `setBounceThreshold`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, float, void> setBounceThreshold;
            /// <summary>Virtual method pointer for `computeJacobians`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, PxJacobianRow*, void> computeJacobians;
            /// <summary>Virtual method pointer for `getNbJacobianRows`</summary>
            public delegate* unmanaged[Cdecl]<PxContactJoint*, uint> getNbJacobianRows;
        }
    }
}
