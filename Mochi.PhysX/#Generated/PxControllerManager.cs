// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public unsafe partial struct PxControllerManager
    {
        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void release()
        {
            fixed (PxControllerManager* @this = &this)
            { VirtualMethodTablePointer->release(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxScene* getScene()
        {
            fixed (PxControllerManager* @this = &this)
            { return VirtualMethodTablePointer->getScene(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbControllers()
        {
            fixed (PxControllerManager* @this = &this)
            { return VirtualMethodTablePointer->getNbControllers(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxController* getController(uint index)
        {
            fixed (PxControllerManager* @this = &this)
            { return VirtualMethodTablePointer->getController(@this, index); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxController* createController(PxControllerDesc* desc)
        {
            fixed (PxControllerManager* @this = &this)
            { return VirtualMethodTablePointer->createController(@this, desc); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void purgeControllers()
        {
            fixed (PxControllerManager* @this = &this)
            { VirtualMethodTablePointer->purgeControllers(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxRenderBuffer* getRenderBuffer()
        {
            fixed (PxControllerManager* @this = &this)
            { return VirtualMethodTablePointer->getRenderBuffer(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setDebugRenderingFlags(PxControllerDebugRenderFlags* flags)
        {
            fixed (PxControllerManager* @this = &this)
            { VirtualMethodTablePointer->setDebugRenderingFlags(@this, flags); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint getNbObstacleContexts()
        {
            fixed (PxControllerManager* @this = &this)
            { return VirtualMethodTablePointer->getNbObstacleContexts(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxObstacleContext* getObstacleContext(uint index)
        {
            fixed (PxControllerManager* @this = &this)
            { return VirtualMethodTablePointer->getObstacleContext(@this, index); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxObstacleContext* createObstacleContext()
        {
            fixed (PxControllerManager* @this = &this)
            { return VirtualMethodTablePointer->createObstacleContext(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void computeInteractions(float elapsedTime, PxControllerFilterCallback* cctFilterCb = null)
        {
            fixed (PxControllerManager* @this = &this)
            { VirtualMethodTablePointer->computeInteractions(@this, elapsedTime, cctFilterCb); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setTessellation(bool flag, float maxEdgeLength)
        {
            fixed (PxControllerManager* @this = &this)
            { VirtualMethodTablePointer->setTessellation(@this, flag, maxEdgeLength); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setOverlapRecoveryModule(bool flag)
        {
            fixed (PxControllerManager* @this = &this)
            { VirtualMethodTablePointer->setOverlapRecoveryModule(@this, flag); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setPreciseSweeps(bool flag)
        {
            fixed (PxControllerManager* @this = &this)
            { VirtualMethodTablePointer->setPreciseSweeps(@this, flag); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setPreventVerticalSlidingAgainstCeiling(bool flag)
        {
            fixed (PxControllerManager* @this = &this)
            { VirtualMethodTablePointer->setPreventVerticalSlidingAgainstCeiling(@this, flag); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void shiftOrigin(PxVec3* shift)
        {
            fixed (PxControllerManager* @this = &this)
            { VirtualMethodTablePointer->shiftOrigin(@this, shift); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, void> release;
            /// <summary>Virtual method pointer for `getScene`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, PxScene*> getScene;
            /// <summary>Virtual method pointer for `getNbControllers`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, uint> getNbControllers;
            /// <summary>Virtual method pointer for `getController`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, uint, PxController*> getController;
            /// <summary>Virtual method pointer for `createController`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, PxControllerDesc*, PxController*> createController;
            /// <summary>Virtual method pointer for `purgeControllers`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, void> purgeControllers;
            /// <summary>Virtual method pointer for `getRenderBuffer`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, PxRenderBuffer*> getRenderBuffer;
            /// <summary>Virtual method pointer for `setDebugRenderingFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, PxControllerDebugRenderFlags*, void> setDebugRenderingFlags;
            /// <summary>Virtual method pointer for `getNbObstacleContexts`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, uint> getNbObstacleContexts;
            /// <summary>Virtual method pointer for `getObstacleContext`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, uint, PxObstacleContext*> getObstacleContext;
            /// <summary>Virtual method pointer for `createObstacleContext`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, PxObstacleContext*> createObstacleContext;
            /// <summary>Virtual method pointer for `computeInteractions`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, float, PxControllerFilterCallback*, void> computeInteractions;
            /// <summary>Virtual method pointer for `setTessellation`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, NativeBoolean, float, void> setTessellation;
            /// <summary>Virtual method pointer for `setOverlapRecoveryModule`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, NativeBoolean, void> setOverlapRecoveryModule;
            /// <summary>Virtual method pointer for `setPreciseSweeps`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, NativeBoolean, void> setPreciseSweeps;
            /// <summary>Virtual method pointer for `setPreventVerticalSlidingAgainstCeiling`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, NativeBoolean, void> setPreventVerticalSlidingAgainstCeiling;
            /// <summary>Virtual method pointer for `shiftOrigin`</summary>
            public delegate* unmanaged[Cdecl]<PxControllerManager*, PxVec3*, void> shiftOrigin;
            /// <summary>Virtual method pointer for `~PxControllerManager`</summary>
            public void* __DeletingDestructorPointer;
        }
    }
}
