// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.PhysX.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.PhysX
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public unsafe partial struct PxDistanceJoint
    {
        [FieldOffset(0)] public PxJoint Base;

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getDistance()
        {
            fixed (PxDistanceJoint* @this = &this)
            { return VirtualMethodTablePointer->getDistance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setMinDistance(float distance)
        {
            fixed (PxDistanceJoint* @this = &this)
            { VirtualMethodTablePointer->setMinDistance(@this, distance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getMinDistance()
        {
            fixed (PxDistanceJoint* @this = &this)
            { return VirtualMethodTablePointer->getMinDistance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setMaxDistance(float distance)
        {
            fixed (PxDistanceJoint* @this = &this)
            { VirtualMethodTablePointer->setMaxDistance(@this, distance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getMaxDistance()
        {
            fixed (PxDistanceJoint* @this = &this)
            { return VirtualMethodTablePointer->getMaxDistance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setTolerance(float tolerance)
        {
            fixed (PxDistanceJoint* @this = &this)
            { VirtualMethodTablePointer->setTolerance(@this, tolerance); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getTolerance()
        {
            fixed (PxDistanceJoint* @this = &this)
            { return VirtualMethodTablePointer->getTolerance(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setStiffness(float stiffness)
        {
            fixed (PxDistanceJoint* @this = &this)
            { VirtualMethodTablePointer->setStiffness(@this, stiffness); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getStiffness()
        {
            fixed (PxDistanceJoint* @this = &this)
            { return VirtualMethodTablePointer->getStiffness(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setDamping(float damping)
        {
            fixed (PxDistanceJoint* @this = &this)
            { VirtualMethodTablePointer->setDamping(@this, damping); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float getDamping()
        {
            fixed (PxDistanceJoint* @this = &this)
            { return VirtualMethodTablePointer->getDamping(@this); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setDistanceJointFlags(PxDistanceJointFlags* flags)
        {
            fixed (PxDistanceJoint* @this = &this)
            { VirtualMethodTablePointer->setDistanceJointFlags(@this, flags); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void setDistanceJointFlag(PxDistanceJointFlags flag, bool value)
        {
            fixed (PxDistanceJoint* @this = &this)
            { VirtualMethodTablePointer->setDistanceJointFlag(@this, flag, value); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public PxDistanceJointFlags getDistanceJointFlags()
        {
            fixed (PxDistanceJoint* @this = &this)
            {
                PxDistanceJointFlags __returnBuffer;
                VirtualMethodTablePointer->getDistanceJointFlags(@this, &__returnBuffer);
                return __returnBuffer;
            }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte* getConcreteTypeName()
        {
            fixed (PxDistanceJoint* @this = &this)
            { return VirtualMethodTablePointer->getConcreteTypeName(@this); }
        }

        [FieldOffset(0)] public VirtualMethodTable* VirtualMethodTablePointer;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct VirtualMethodTable
        {
            /// <summary>Virtual method pointer for `release`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, void> release;
            /// <summary>Virtual method pointer for `getConcreteTypeName`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, byte*> getConcreteTypeName;
            /// <summary>Virtual method pointer for `isReleasable`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, NativeBoolean> isReleasable;
            /// <summary>Virtual method pointer for `~PxDistanceJoint`</summary>
            public void* __DeletingDestructorPointer;
            /// <summary>Virtual method pointer for `isKindOf`</summary>
            public void* isKindOf;
            /// <summary>Virtual method pointer for `setActors`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxRigidActor*, PxRigidActor*, void> setActors;
            /// <summary>Virtual method pointer for `getActors`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxRigidActor**, PxRigidActor**, void> getActors;
            /// <summary>Virtual method pointer for `setLocalPose`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxJointActorIndex, PxTransform*, void> setLocalPose;
            /// <summary>Virtual method pointer for `getLocalPose`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxTransform*, PxJointActorIndex, PxTransform*> getLocalPose;
            /// <summary>Virtual method pointer for `getRelativeTransform`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxTransform*, PxTransform*> getRelativeTransform;
            /// <summary>Virtual method pointer for `getRelativeLinearVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxVec3*, PxVec3*> getRelativeLinearVelocity;
            /// <summary>Virtual method pointer for `getRelativeAngularVelocity`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxVec3*, PxVec3*> getRelativeAngularVelocity;
            /// <summary>Virtual method pointer for `setBreakForce`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float, float, void> setBreakForce;
            /// <summary>Virtual method pointer for `getBreakForce`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float*, float*, void> getBreakForce;
            /// <summary>Virtual method pointer for `setConstraintFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxConstraintFlags*, void> setConstraintFlags;
            /// <summary>Virtual method pointer for `setConstraintFlag`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxConstraintFlags, NativeBoolean, void> setConstraintFlag;
            /// <summary>Virtual method pointer for `getConstraintFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxConstraintFlags*, PxConstraintFlags*> getConstraintFlags;
            /// <summary>Virtual method pointer for `setInvMassScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float, void> setInvMassScale0;
            /// <summary>Virtual method pointer for `getInvMassScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float> getInvMassScale0;
            /// <summary>Virtual method pointer for `setInvInertiaScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float, void> setInvInertiaScale0;
            /// <summary>Virtual method pointer for `getInvInertiaScale0`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float> getInvInertiaScale0;
            /// <summary>Virtual method pointer for `setInvMassScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float, void> setInvMassScale1;
            /// <summary>Virtual method pointer for `getInvMassScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float> getInvMassScale1;
            /// <summary>Virtual method pointer for `setInvInertiaScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float, void> setInvInertiaScale1;
            /// <summary>Virtual method pointer for `getInvInertiaScale1`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float> getInvInertiaScale1;
            /// <summary>Virtual method pointer for `getConstraint`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxConstraint*> getConstraint;
            /// <summary>Virtual method pointer for `setName`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, byte*, void> setName;
            /// <summary>Virtual method pointer for `getName`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, byte*> getName;
            /// <summary>Virtual method pointer for `getScene`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxScene*> getScene;
            /// <summary>Virtual method pointer for `getDistance`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float> getDistance;
            /// <summary>Virtual method pointer for `setMinDistance`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float, void> setMinDistance;
            /// <summary>Virtual method pointer for `getMinDistance`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float> getMinDistance;
            /// <summary>Virtual method pointer for `setMaxDistance`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float, void> setMaxDistance;
            /// <summary>Virtual method pointer for `getMaxDistance`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float> getMaxDistance;
            /// <summary>Virtual method pointer for `setTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float, void> setTolerance;
            /// <summary>Virtual method pointer for `getTolerance`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float> getTolerance;
            /// <summary>Virtual method pointer for `setStiffness`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float, void> setStiffness;
            /// <summary>Virtual method pointer for `getStiffness`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float> getStiffness;
            /// <summary>Virtual method pointer for `setDamping`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float, void> setDamping;
            /// <summary>Virtual method pointer for `getDamping`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, float> getDamping;
            /// <summary>Virtual method pointer for `setDistanceJointFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxDistanceJointFlags*, void> setDistanceJointFlags;
            /// <summary>Virtual method pointer for `setDistanceJointFlag`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxDistanceJointFlags, NativeBoolean, void> setDistanceJointFlag;
            /// <summary>Virtual method pointer for `getDistanceJointFlags`</summary>
            public delegate* unmanaged[Cdecl]<PxDistanceJoint*, PxDistanceJointFlags*, PxDistanceJointFlags*> getDistanceJointFlags;
        }
    }
}
